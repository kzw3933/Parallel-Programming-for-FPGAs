-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dft is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sample_real_0_i : IN STD_LOGIC_VECTOR (63 downto 0);
    sample_real_0_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    sample_real_0_o_ap_vld : OUT STD_LOGIC;
    sample_real_1_i : IN STD_LOGIC_VECTOR (63 downto 0);
    sample_real_1_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    sample_real_1_o_ap_vld : OUT STD_LOGIC;
    sample_real_2_i : IN STD_LOGIC_VECTOR (63 downto 0);
    sample_real_2_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    sample_real_2_o_ap_vld : OUT STD_LOGIC;
    sample_real_3_i : IN STD_LOGIC_VECTOR (63 downto 0);
    sample_real_3_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    sample_real_3_o_ap_vld : OUT STD_LOGIC;
    sample_real_4_i : IN STD_LOGIC_VECTOR (63 downto 0);
    sample_real_4_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    sample_real_4_o_ap_vld : OUT STD_LOGIC;
    sample_real_5_i : IN STD_LOGIC_VECTOR (63 downto 0);
    sample_real_5_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    sample_real_5_o_ap_vld : OUT STD_LOGIC;
    sample_real_6_i : IN STD_LOGIC_VECTOR (63 downto 0);
    sample_real_6_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    sample_real_6_o_ap_vld : OUT STD_LOGIC;
    sample_real_7_i : IN STD_LOGIC_VECTOR (63 downto 0);
    sample_real_7_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    sample_real_7_o_ap_vld : OUT STD_LOGIC;
    sample_imag_0_i : IN STD_LOGIC_VECTOR (63 downto 0);
    sample_imag_0_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    sample_imag_0_o_ap_vld : OUT STD_LOGIC;
    sample_imag_1_i : IN STD_LOGIC_VECTOR (63 downto 0);
    sample_imag_1_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    sample_imag_1_o_ap_vld : OUT STD_LOGIC;
    sample_imag_2_i : IN STD_LOGIC_VECTOR (63 downto 0);
    sample_imag_2_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    sample_imag_2_o_ap_vld : OUT STD_LOGIC;
    sample_imag_3_i : IN STD_LOGIC_VECTOR (63 downto 0);
    sample_imag_3_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    sample_imag_3_o_ap_vld : OUT STD_LOGIC;
    sample_imag_4_i : IN STD_LOGIC_VECTOR (63 downto 0);
    sample_imag_4_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    sample_imag_4_o_ap_vld : OUT STD_LOGIC;
    sample_imag_5_i : IN STD_LOGIC_VECTOR (63 downto 0);
    sample_imag_5_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    sample_imag_5_o_ap_vld : OUT STD_LOGIC;
    sample_imag_6_i : IN STD_LOGIC_VECTOR (63 downto 0);
    sample_imag_6_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    sample_imag_6_o_ap_vld : OUT STD_LOGIC;
    sample_imag_7_i : IN STD_LOGIC_VECTOR (63 downto 0);
    sample_imag_7_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    sample_imag_7_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of dft is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dft,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.517000,HLS_SYN_LAT=111,HLS_SYN_TPT=none,HLS_SYN_MEM=162,HLS_SYN_DSP=1880,HLS_SYN_FF=97962,HLS_SYN_LUT=134638,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FE921FB5444261E : STD_LOGIC_VECTOR (63 downto 0) := "0011111111101001001000011111101101010100010001000010011000011110";
    constant ap_const_lv64_4000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4008000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000001000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4010000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000010000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4014000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000010100000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4018000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000011000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_401C000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000011100000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_0_reg_388 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter37 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter38 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter39 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter40 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter41 : BOOLEAN;
    signal ap_block_state44_pp0_stage0_iter42 : BOOLEAN;
    signal ap_block_state45_pp0_stage0_iter43 : BOOLEAN;
    signal ap_block_state46_pp0_stage0_iter44 : BOOLEAN;
    signal ap_block_state47_pp0_stage0_iter45 : BOOLEAN;
    signal ap_block_state48_pp0_stage0_iter46 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter47 : BOOLEAN;
    signal ap_block_state50_pp0_stage0_iter48 : BOOLEAN;
    signal ap_block_state51_pp0_stage0_iter49 : BOOLEAN;
    signal ap_block_state52_pp0_stage0_iter50 : BOOLEAN;
    signal ap_block_state53_pp0_stage0_iter51 : BOOLEAN;
    signal ap_block_state54_pp0_stage0_iter52 : BOOLEAN;
    signal ap_block_state55_pp0_stage0_iter53 : BOOLEAN;
    signal ap_block_state56_pp0_stage0_iter54 : BOOLEAN;
    signal ap_block_state57_pp0_stage0_iter55 : BOOLEAN;
    signal ap_block_state58_pp0_stage0_iter56 : BOOLEAN;
    signal ap_block_state59_pp0_stage0_iter57 : BOOLEAN;
    signal ap_block_state60_pp0_stage0_iter58 : BOOLEAN;
    signal ap_block_state61_pp0_stage0_iter59 : BOOLEAN;
    signal ap_block_state62_pp0_stage0_iter60 : BOOLEAN;
    signal ap_block_state63_pp0_stage0_iter61 : BOOLEAN;
    signal ap_block_state64_pp0_stage0_iter62 : BOOLEAN;
    signal ap_block_state65_pp0_stage0_iter63 : BOOLEAN;
    signal ap_block_state66_pp0_stage0_iter64 : BOOLEAN;
    signal ap_block_state67_pp0_stage0_iter65 : BOOLEAN;
    signal ap_block_state68_pp0_stage0_iter66 : BOOLEAN;
    signal ap_block_state69_pp0_stage0_iter67 : BOOLEAN;
    signal ap_block_state70_pp0_stage0_iter68 : BOOLEAN;
    signal ap_block_state71_pp0_stage0_iter69 : BOOLEAN;
    signal ap_block_state72_pp0_stage0_iter70 : BOOLEAN;
    signal ap_block_state73_pp0_stage0_iter71 : BOOLEAN;
    signal ap_block_state74_pp0_stage0_iter72 : BOOLEAN;
    signal ap_block_state75_pp0_stage0_iter73 : BOOLEAN;
    signal ap_block_state76_pp0_stage0_iter74 : BOOLEAN;
    signal ap_block_state77_pp0_stage0_iter75 : BOOLEAN;
    signal ap_block_state78_pp0_stage0_iter76 : BOOLEAN;
    signal ap_block_state79_pp0_stage0_iter77 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_0_reg_388_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter12_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter13_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter14_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter15_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter16_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter17_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter18_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter19_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter20_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter21_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter22_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter23_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter24_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter25_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter26_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter27_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter28_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter29_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter30_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter31_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter32_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter33_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter34_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter35_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter36_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter37_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter38_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter39_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter40_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter41_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter42_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter43_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter44_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter45_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter46_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter47_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter48_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter49_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter50_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter51_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter52_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter53_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter54_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter55_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter56_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter57_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter58_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter59_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter60_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter61_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter62_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter63_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter64_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter65_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter66_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter67_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter68_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter69_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter70_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter71_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter72_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter73_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter74_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter75_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_388_pp0_iter76_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal sample_real_0_read_reg_1063 : STD_LOGIC_VECTOR (63 downto 0);
    signal sample_imag_0_read_reg_1069 : STD_LOGIC_VECTOR (63 downto 0);
    signal sample_real_1_read_reg_1075 : STD_LOGIC_VECTOR (63 downto 0);
    signal sample_imag_1_read_reg_1081 : STD_LOGIC_VECTOR (63 downto 0);
    signal sample_real_2_read_reg_1087 : STD_LOGIC_VECTOR (63 downto 0);
    signal sample_imag_2_read_reg_1093 : STD_LOGIC_VECTOR (63 downto 0);
    signal sample_real_3_read_reg_1099 : STD_LOGIC_VECTOR (63 downto 0);
    signal sample_imag_3_read_reg_1105 : STD_LOGIC_VECTOR (63 downto 0);
    signal sample_real_4_read_reg_1111 : STD_LOGIC_VECTOR (63 downto 0);
    signal sample_imag_4_read_reg_1117 : STD_LOGIC_VECTOR (63 downto 0);
    signal sample_real_5_read_reg_1123 : STD_LOGIC_VECTOR (63 downto 0);
    signal sample_imag_5_read_reg_1129 : STD_LOGIC_VECTOR (63 downto 0);
    signal sample_real_6_read_reg_1135 : STD_LOGIC_VECTOR (63 downto 0);
    signal sample_imag_6_read_reg_1141 : STD_LOGIC_VECTOR (63 downto 0);
    signal sample_real_7_read_reg_1147 : STD_LOGIC_VECTOR (63 downto 0);
    signal sample_imag_7_read_reg_1153 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln16_fu_1018_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter46_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter47_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter48_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter49_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter50_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter51_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter52_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter53_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter54_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter55_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter56_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter57_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter58_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter59_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter60_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter61_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter62_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter63_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter64_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter65_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter66_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter67_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter68_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter69_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter70_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter71_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter72_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter73_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter74_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter75_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1159_pp0_iter76_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_1024_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_1163 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal grp_fu_1015_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_1173 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_847_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter25_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter26_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter27_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter28_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter29_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter30_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter31_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter32_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter33_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter34_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter35_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter36_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter37_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter38_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter39_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter40_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter41_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter42_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_1178_pp0_iter43_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_852_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_1191 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_857_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_2_reg_1197 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sin_or_cos_double_s_fu_411_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_reg_1203 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sin_or_cos_double_s_fu_430_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i1_reg_1209 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_862_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_3_reg_1215 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_867_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_1221 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_871_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_1226 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_875_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_reg_1231 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_879_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_reg_1236 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sin_or_cos_double_s_fu_449_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i2_reg_1241 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sin_or_cos_double_s_fu_468_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i3_reg_1247 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_883_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_4_reg_1253 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_715_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_1259 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_719_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_1264 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_888_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_1_reg_1269 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_892_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_1_reg_1274 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_896_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_1_reg_1279 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_900_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_1_reg_1284 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sin_or_cos_double_s_fu_487_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i4_reg_1289 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sin_or_cos_double_s_fu_506_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i5_reg_1295 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_904_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_5_reg_1301 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_723_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_reg_1307 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_728_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_1312 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_733_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_1_reg_1317 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_737_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_41_reg_1322 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_909_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_2_reg_1327 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_913_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_2_reg_1332 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_917_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_2_reg_1337 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_921_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_2_reg_1342 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sin_or_cos_double_s_fu_525_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i6_reg_1347 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sin_or_cos_double_s_fu_544_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i7_reg_1353 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_925_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_6_reg_1359 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_741_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_1_reg_1365 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_745_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_1_reg_1370 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_749_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_2_reg_1375 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_753_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_42_reg_1380 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_930_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_3_reg_1385 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_934_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_3_reg_1390 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_938_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_3_reg_1395 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_942_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_3_reg_1400 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sin_or_cos_double_s_fu_563_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i8_reg_1405 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sin_or_cos_double_s_fu_582_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i9_reg_1411 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_946_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_7_reg_1417 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_757_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_2_reg_1423 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_761_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_2_reg_1428 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_765_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_3_reg_1433 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_769_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_1438 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_951_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_4_reg_1443 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_955_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_4_reg_1448 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_959_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_4_reg_1453 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_963_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_4_reg_1458 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sin_or_cos_double_s_fu_601_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i10_reg_1463 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sin_or_cos_double_s_fu_620_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i11_reg_1469 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_773_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_3_reg_1475 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_777_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_3_reg_1480 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_781_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_4_reg_1485 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_785_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_43_reg_1490 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_967_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_5_reg_1495 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_971_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_5_reg_1500 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_975_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_5_reg_1505 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_979_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_5_reg_1510 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sin_or_cos_double_s_fu_639_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i12_reg_1515 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sin_or_cos_double_s_fu_658_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i13_reg_1521 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_789_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_4_reg_1527 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_793_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_4_reg_1532 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_797_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_5_reg_1537 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_801_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_44_reg_1542 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_983_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_6_reg_1547 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_987_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_6_reg_1552 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_991_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_6_reg_1557 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_995_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_6_reg_1562 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sin_or_cos_double_s_fu_677_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i14_reg_1567 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sin_or_cos_double_s_fu_696_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i15_reg_1573 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_805_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_5_reg_1579 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_809_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_5_reg_1584 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_813_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_6_reg_1589 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_817_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_45_reg_1594 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_999_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_7_reg_1599 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1003_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_7_reg_1604 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1007_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_7_reg_1609 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1011_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_7_reg_1614 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_821_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_6_reg_1619 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_825_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_6_reg_1624 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_829_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_7_reg_1629 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_833_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_46_reg_1634 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_1047_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_1642 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal icmp_ln33_fu_1041_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln34_fu_1059_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln34_reg_1652 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter46 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter47 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter48 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter49 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter50 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter51 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter52 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter53 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter54 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter55 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter56 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter57 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter58 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter59 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter60 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter61 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter62 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter63 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter64 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter65 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter66 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter67 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter68 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter69 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter70 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter71 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter72 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter73 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter74 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter75 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter76 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter77 : STD_LOGIC := '0';
    signal temp_real_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_real_ce0 : STD_LOGIC;
    signal temp_real_we0 : STD_LOGIC;
    signal temp_real_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_imag_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_imag_ce0 : STD_LOGIC;
    signal temp_imag_we0 : STD_LOGIC;
    signal temp_imag_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sin_or_cos_double_s_fu_411_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_411_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_411_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_411_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_411_do_cos : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_430_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_430_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_430_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_430_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_430_do_cos : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_449_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_449_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_449_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_449_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_449_do_cos : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_468_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_468_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_468_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_468_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_468_do_cos : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_487_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_487_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_487_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_487_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_487_do_cos : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_506_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_506_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_506_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_506_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_506_do_cos : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_525_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_525_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_525_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_525_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_525_do_cos : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_544_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_544_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_544_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_544_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_544_do_cos : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_563_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_563_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_563_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_563_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_563_do_cos : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_582_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_582_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_582_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_582_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_582_do_cos : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_601_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_601_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_601_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_601_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_601_do_cos : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_620_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_620_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_620_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_620_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_620_do_cos : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_639_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_639_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_639_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_639_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_639_do_cos : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_658_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_658_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_658_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_658_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_658_do_cos : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_677_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_677_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_677_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_677_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_677_do_cos : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_696_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_696_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_696_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_696_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_696_do_cos : STD_LOGIC;
    signal ap_phi_mux_i_0_phi_fu_392_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_1_reg_400 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_411_ap_start_reg : STD_LOGIC := '0';
    signal grp_sin_or_cos_double_s_fu_430_ap_start_reg : STD_LOGIC := '0';
    signal grp_sin_or_cos_double_s_fu_449_ap_start_reg : STD_LOGIC := '0';
    signal grp_sin_or_cos_double_s_fu_468_ap_start_reg : STD_LOGIC := '0';
    signal grp_sin_or_cos_double_s_fu_487_ap_start_reg : STD_LOGIC := '0';
    signal grp_sin_or_cos_double_s_fu_506_ap_start_reg : STD_LOGIC := '0';
    signal grp_sin_or_cos_double_s_fu_525_ap_start_reg : STD_LOGIC := '0';
    signal grp_sin_or_cos_double_s_fu_544_ap_start_reg : STD_LOGIC := '0';
    signal grp_sin_or_cos_double_s_fu_563_ap_start_reg : STD_LOGIC := '0';
    signal grp_sin_or_cos_double_s_fu_582_ap_start_reg : STD_LOGIC := '0';
    signal grp_sin_or_cos_double_s_fu_601_ap_start_reg : STD_LOGIC := '0';
    signal grp_sin_or_cos_double_s_fu_620_ap_start_reg : STD_LOGIC := '0';
    signal grp_sin_or_cos_double_s_fu_639_ap_start_reg : STD_LOGIC := '0';
    signal grp_sin_or_cos_double_s_fu_658_ap_start_reg : STD_LOGIC := '0';
    signal grp_sin_or_cos_double_s_fu_677_ap_start_reg : STD_LOGIC := '0';
    signal grp_sin_or_cos_double_s_fu_696_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln18_fu_1035_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_fu_1053_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal grp_fu_837_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_842_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1015_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component sin_or_cos_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (63 downto 0);
        do_cos : IN STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dft_dsub_64ns_64nkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dft_dadd_64ns_64nlbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dft_dmul_64ns_64nmb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dft_sitodp_32ns_6ncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dft_temp_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    temp_real_U : component dft_temp_real
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_real_address0,
        ce0 => temp_real_ce0,
        we0 => temp_real_we0,
        d0 => grp_fu_837_p2,
        q0 => temp_real_q0);

    temp_imag_U : component dft_temp_real
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_imag_address0,
        ce0 => temp_imag_ce0,
        we0 => temp_imag_we0,
        d0 => grp_fu_842_p2,
        q0 => temp_imag_q0);

    grp_sin_or_cos_double_s_fu_411 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_411_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_411_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_411_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_411_ap_ready,
        t_in => x_assign_reg_1191,
        do_cos => grp_sin_or_cos_double_s_fu_411_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_411_ap_return);

    grp_sin_or_cos_double_s_fu_430 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_430_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_430_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_430_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_430_ap_ready,
        t_in => x_assign_reg_1191,
        do_cos => grp_sin_or_cos_double_s_fu_430_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_430_ap_return);

    grp_sin_or_cos_double_s_fu_449 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_449_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_449_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_449_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_449_ap_ready,
        t_in => w_reg_1178_pp0_iter18_reg,
        do_cos => grp_sin_or_cos_double_s_fu_449_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_449_ap_return);

    grp_sin_or_cos_double_s_fu_468 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_468_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_468_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_468_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_468_ap_ready,
        t_in => w_reg_1178_pp0_iter18_reg,
        do_cos => grp_sin_or_cos_double_s_fu_468_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_468_ap_return);

    grp_sin_or_cos_double_s_fu_487 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_487_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_487_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_487_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_487_ap_ready,
        t_in => x_assign_2_reg_1197,
        do_cos => grp_sin_or_cos_double_s_fu_487_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_487_ap_return);

    grp_sin_or_cos_double_s_fu_506 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_506_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_506_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_506_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_506_ap_ready,
        t_in => x_assign_2_reg_1197,
        do_cos => grp_sin_or_cos_double_s_fu_506_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_506_ap_return);

    grp_sin_or_cos_double_s_fu_525 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_525_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_525_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_525_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_525_ap_ready,
        t_in => x_assign_3_reg_1215,
        do_cos => grp_sin_or_cos_double_s_fu_525_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_525_ap_return);

    grp_sin_or_cos_double_s_fu_544 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_544_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_544_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_544_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_544_ap_ready,
        t_in => x_assign_3_reg_1215,
        do_cos => grp_sin_or_cos_double_s_fu_544_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_544_ap_return);

    grp_sin_or_cos_double_s_fu_563 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_563_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_563_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_563_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_563_ap_ready,
        t_in => x_assign_4_reg_1253,
        do_cos => grp_sin_or_cos_double_s_fu_563_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_563_ap_return);

    grp_sin_or_cos_double_s_fu_582 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_582_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_582_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_582_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_582_ap_ready,
        t_in => x_assign_4_reg_1253,
        do_cos => grp_sin_or_cos_double_s_fu_582_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_582_ap_return);

    grp_sin_or_cos_double_s_fu_601 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_601_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_601_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_601_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_601_ap_ready,
        t_in => x_assign_5_reg_1301,
        do_cos => grp_sin_or_cos_double_s_fu_601_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_601_ap_return);

    grp_sin_or_cos_double_s_fu_620 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_620_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_620_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_620_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_620_ap_ready,
        t_in => x_assign_5_reg_1301,
        do_cos => grp_sin_or_cos_double_s_fu_620_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_620_ap_return);

    grp_sin_or_cos_double_s_fu_639 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_639_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_639_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_639_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_639_ap_ready,
        t_in => x_assign_6_reg_1359,
        do_cos => grp_sin_or_cos_double_s_fu_639_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_639_ap_return);

    grp_sin_or_cos_double_s_fu_658 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_658_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_658_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_658_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_658_ap_ready,
        t_in => x_assign_6_reg_1359,
        do_cos => grp_sin_or_cos_double_s_fu_658_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_658_ap_return);

    grp_sin_or_cos_double_s_fu_677 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_677_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_677_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_677_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_677_ap_ready,
        t_in => x_assign_7_reg_1417,
        do_cos => grp_sin_or_cos_double_s_fu_677_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_677_ap_return);

    grp_sin_or_cos_double_s_fu_696 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_696_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_696_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_696_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_696_ap_ready,
        t_in => x_assign_7_reg_1417,
        do_cos => grp_sin_or_cos_double_s_fu_696_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_696_ap_return);

    dft_dsub_64ns_64nkbM_U21 : component dft_dsub_64ns_64nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_4_reg_1221,
        din1 => tmp_5_reg_1226,
        ce => ap_const_logic_1,
        dout => grp_fu_715_p2);

    dft_dadd_64ns_64nlbW_U22 : component dft_dadd_64ns_64nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_8_reg_1231,
        din1 => tmp_9_reg_1236,
        ce => ap_const_logic_1,
        dout => grp_fu_719_p2);

    dft_dadd_64ns_64nlbW_U23 : component dft_dadd_64ns_64nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_6_reg_1259,
        din1 => ap_const_lv64_0,
        ce => ap_const_logic_1,
        dout => grp_fu_723_p2);

    dft_dadd_64ns_64nlbW_U24 : component dft_dadd_64ns_64nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_s_reg_1264,
        din1 => ap_const_lv64_0,
        ce => ap_const_logic_1,
        dout => grp_fu_728_p2);

    dft_dsub_64ns_64nkbM_U25 : component dft_dsub_64ns_64nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_4_1_reg_1269,
        din1 => tmp_5_1_reg_1274,
        ce => ap_const_logic_1,
        dout => grp_fu_733_p2);

    dft_dadd_64ns_64nlbW_U26 : component dft_dadd_64ns_64nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_8_1_reg_1279,
        din1 => tmp_9_1_reg_1284,
        ce => ap_const_logic_1,
        dout => grp_fu_737_p2);

    dft_dadd_64ns_64nlbW_U27 : component dft_dadd_64ns_64nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_7_reg_1307,
        din1 => tmp_6_1_reg_1317,
        ce => ap_const_logic_1,
        dout => grp_fu_741_p2);

    dft_dadd_64ns_64nlbW_U28 : component dft_dadd_64ns_64nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_reg_1312,
        din1 => tmp_1_41_reg_1322,
        ce => ap_const_logic_1,
        dout => grp_fu_745_p2);

    dft_dsub_64ns_64nkbM_U29 : component dft_dsub_64ns_64nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_4_2_reg_1327,
        din1 => tmp_5_2_reg_1332,
        ce => ap_const_logic_1,
        dout => grp_fu_749_p2);

    dft_dadd_64ns_64nlbW_U30 : component dft_dadd_64ns_64nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_8_2_reg_1337,
        din1 => tmp_9_2_reg_1342,
        ce => ap_const_logic_1,
        dout => grp_fu_753_p2);

    dft_dadd_64ns_64nlbW_U31 : component dft_dadd_64ns_64nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_7_1_reg_1365,
        din1 => tmp_6_2_reg_1375,
        ce => ap_const_logic_1,
        dout => grp_fu_757_p2);

    dft_dadd_64ns_64nlbW_U32 : component dft_dadd_64ns_64nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_1_reg_1370,
        din1 => tmp_2_42_reg_1380,
        ce => ap_const_logic_1,
        dout => grp_fu_761_p2);

    dft_dsub_64ns_64nkbM_U33 : component dft_dsub_64ns_64nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_4_3_reg_1385,
        din1 => tmp_5_3_reg_1390,
        ce => ap_const_logic_1,
        dout => grp_fu_765_p2);

    dft_dadd_64ns_64nlbW_U34 : component dft_dadd_64ns_64nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_8_3_reg_1395,
        din1 => tmp_9_3_reg_1400,
        ce => ap_const_logic_1,
        dout => grp_fu_769_p2);

    dft_dadd_64ns_64nlbW_U35 : component dft_dadd_64ns_64nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_7_2_reg_1423,
        din1 => tmp_6_3_reg_1433,
        ce => ap_const_logic_1,
        dout => grp_fu_773_p2);

    dft_dadd_64ns_64nlbW_U36 : component dft_dadd_64ns_64nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_2_reg_1428,
        din1 => tmp_3_reg_1438,
        ce => ap_const_logic_1,
        dout => grp_fu_777_p2);

    dft_dsub_64ns_64nkbM_U37 : component dft_dsub_64ns_64nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_4_4_reg_1443,
        din1 => tmp_5_4_reg_1448,
        ce => ap_const_logic_1,
        dout => grp_fu_781_p2);

    dft_dadd_64ns_64nlbW_U38 : component dft_dadd_64ns_64nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_8_4_reg_1453,
        din1 => tmp_9_4_reg_1458,
        ce => ap_const_logic_1,
        dout => grp_fu_785_p2);

    dft_dadd_64ns_64nlbW_U39 : component dft_dadd_64ns_64nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_7_3_reg_1475,
        din1 => tmp_6_4_reg_1485,
        ce => ap_const_logic_1,
        dout => grp_fu_789_p2);

    dft_dadd_64ns_64nlbW_U40 : component dft_dadd_64ns_64nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_3_reg_1480,
        din1 => tmp_4_43_reg_1490,
        ce => ap_const_logic_1,
        dout => grp_fu_793_p2);

    dft_dsub_64ns_64nkbM_U41 : component dft_dsub_64ns_64nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_4_5_reg_1495,
        din1 => tmp_5_5_reg_1500,
        ce => ap_const_logic_1,
        dout => grp_fu_797_p2);

    dft_dadd_64ns_64nlbW_U42 : component dft_dadd_64ns_64nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_8_5_reg_1505,
        din1 => tmp_9_5_reg_1510,
        ce => ap_const_logic_1,
        dout => grp_fu_801_p2);

    dft_dadd_64ns_64nlbW_U43 : component dft_dadd_64ns_64nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_7_4_reg_1527,
        din1 => tmp_6_5_reg_1537,
        ce => ap_const_logic_1,
        dout => grp_fu_805_p2);

    dft_dadd_64ns_64nlbW_U44 : component dft_dadd_64ns_64nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_4_reg_1532,
        din1 => tmp_5_44_reg_1542,
        ce => ap_const_logic_1,
        dout => grp_fu_809_p2);

    dft_dsub_64ns_64nkbM_U45 : component dft_dsub_64ns_64nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_4_6_reg_1547,
        din1 => tmp_5_6_reg_1552,
        ce => ap_const_logic_1,
        dout => grp_fu_813_p2);

    dft_dadd_64ns_64nlbW_U46 : component dft_dadd_64ns_64nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_8_6_reg_1557,
        din1 => tmp_9_6_reg_1562,
        ce => ap_const_logic_1,
        dout => grp_fu_817_p2);

    dft_dadd_64ns_64nlbW_U47 : component dft_dadd_64ns_64nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_7_5_reg_1579,
        din1 => tmp_6_6_reg_1589,
        ce => ap_const_logic_1,
        dout => grp_fu_821_p2);

    dft_dadd_64ns_64nlbW_U48 : component dft_dadd_64ns_64nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_5_reg_1584,
        din1 => tmp_6_45_reg_1594,
        ce => ap_const_logic_1,
        dout => grp_fu_825_p2);

    dft_dsub_64ns_64nkbM_U49 : component dft_dsub_64ns_64nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_4_7_reg_1599,
        din1 => tmp_5_7_reg_1604,
        ce => ap_const_logic_1,
        dout => grp_fu_829_p2);

    dft_dadd_64ns_64nlbW_U50 : component dft_dadd_64ns_64nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_8_7_reg_1609,
        din1 => tmp_9_7_reg_1614,
        ce => ap_const_logic_1,
        dout => grp_fu_833_p2);

    dft_dadd_64ns_64nlbW_U51 : component dft_dadd_64ns_64nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_7_6_reg_1619,
        din1 => tmp_6_7_reg_1629,
        ce => ap_const_logic_1,
        dout => grp_fu_837_p2);

    dft_dadd_64ns_64nlbW_U52 : component dft_dadd_64ns_64nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_6_reg_1624,
        din1 => tmp_7_46_reg_1634,
        ce => ap_const_logic_1,
        dout => grp_fu_842_p2);

    dft_dmul_64ns_64nmb6_U53 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_reg_1173,
        din1 => ap_const_lv64_3FE921FB5444261E,
        ce => ap_const_logic_1,
        dout => grp_fu_847_p2);

    dft_dmul_64ns_64nmb6_U54 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => w_reg_1178,
        din1 => ap_const_lv64_0,
        ce => ap_const_logic_1,
        dout => grp_fu_852_p2);

    dft_dmul_64ns_64nmb6_U55 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => w_reg_1178_pp0_iter18_reg,
        din1 => ap_const_lv64_4000000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_857_p2);

    dft_dmul_64ns_64nmb6_U56 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => w_reg_1178_pp0_iter23_reg,
        din1 => ap_const_lv64_4008000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_862_p2);

    dft_dmul_64ns_64nmb6_U57 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_real_0_read_reg_1063,
        din1 => tmp_i_i_reg_1203,
        ce => ap_const_logic_1,
        dout => grp_fu_867_p2);

    dft_dmul_64ns_64nmb6_U58 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_imag_0_read_reg_1069,
        din1 => tmp_i_i1_reg_1209,
        ce => ap_const_logic_1,
        dout => grp_fu_871_p2);

    dft_dmul_64ns_64nmb6_U59 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_real_0_read_reg_1063,
        din1 => tmp_i_i1_reg_1209,
        ce => ap_const_logic_1,
        dout => grp_fu_875_p2);

    dft_dmul_64ns_64nmb6_U60 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_imag_0_read_reg_1069,
        din1 => tmp_i_i_reg_1203,
        ce => ap_const_logic_1,
        dout => grp_fu_879_p2);

    dft_dmul_64ns_64nmb6_U61 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => w_reg_1178_pp0_iter28_reg,
        din1 => ap_const_lv64_4010000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_883_p2);

    dft_dmul_64ns_64nmb6_U62 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_real_1_read_reg_1075,
        din1 => tmp_i_i2_reg_1241,
        ce => ap_const_logic_1,
        dout => grp_fu_888_p2);

    dft_dmul_64ns_64nmb6_U63 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_imag_1_read_reg_1081,
        din1 => tmp_i_i3_reg_1247,
        ce => ap_const_logic_1,
        dout => grp_fu_892_p2);

    dft_dmul_64ns_64nmb6_U64 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_real_1_read_reg_1075,
        din1 => tmp_i_i3_reg_1247,
        ce => ap_const_logic_1,
        dout => grp_fu_896_p2);

    dft_dmul_64ns_64nmb6_U65 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_imag_1_read_reg_1081,
        din1 => tmp_i_i2_reg_1241,
        ce => ap_const_logic_1,
        dout => grp_fu_900_p2);

    dft_dmul_64ns_64nmb6_U66 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => w_reg_1178_pp0_iter33_reg,
        din1 => ap_const_lv64_4014000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_904_p2);

    dft_dmul_64ns_64nmb6_U67 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_real_2_read_reg_1087,
        din1 => tmp_i_i4_reg_1289,
        ce => ap_const_logic_1,
        dout => grp_fu_909_p2);

    dft_dmul_64ns_64nmb6_U68 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_imag_2_read_reg_1093,
        din1 => tmp_i_i5_reg_1295,
        ce => ap_const_logic_1,
        dout => grp_fu_913_p2);

    dft_dmul_64ns_64nmb6_U69 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_real_2_read_reg_1087,
        din1 => tmp_i_i5_reg_1295,
        ce => ap_const_logic_1,
        dout => grp_fu_917_p2);

    dft_dmul_64ns_64nmb6_U70 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_imag_2_read_reg_1093,
        din1 => tmp_i_i4_reg_1289,
        ce => ap_const_logic_1,
        dout => grp_fu_921_p2);

    dft_dmul_64ns_64nmb6_U71 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => w_reg_1178_pp0_iter38_reg,
        din1 => ap_const_lv64_4018000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_925_p2);

    dft_dmul_64ns_64nmb6_U72 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_real_3_read_reg_1099,
        din1 => tmp_i_i6_reg_1347,
        ce => ap_const_logic_1,
        dout => grp_fu_930_p2);

    dft_dmul_64ns_64nmb6_U73 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_imag_3_read_reg_1105,
        din1 => tmp_i_i7_reg_1353,
        ce => ap_const_logic_1,
        dout => grp_fu_934_p2);

    dft_dmul_64ns_64nmb6_U74 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_real_3_read_reg_1099,
        din1 => tmp_i_i7_reg_1353,
        ce => ap_const_logic_1,
        dout => grp_fu_938_p2);

    dft_dmul_64ns_64nmb6_U75 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_imag_3_read_reg_1105,
        din1 => tmp_i_i6_reg_1347,
        ce => ap_const_logic_1,
        dout => grp_fu_942_p2);

    dft_dmul_64ns_64nmb6_U76 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => w_reg_1178_pp0_iter43_reg,
        din1 => ap_const_lv64_401C000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_946_p2);

    dft_dmul_64ns_64nmb6_U77 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_real_4_read_reg_1111,
        din1 => tmp_i_i8_reg_1405,
        ce => ap_const_logic_1,
        dout => grp_fu_951_p2);

    dft_dmul_64ns_64nmb6_U78 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_imag_4_read_reg_1117,
        din1 => tmp_i_i9_reg_1411,
        ce => ap_const_logic_1,
        dout => grp_fu_955_p2);

    dft_dmul_64ns_64nmb6_U79 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_real_4_read_reg_1111,
        din1 => tmp_i_i9_reg_1411,
        ce => ap_const_logic_1,
        dout => grp_fu_959_p2);

    dft_dmul_64ns_64nmb6_U80 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_imag_4_read_reg_1117,
        din1 => tmp_i_i8_reg_1405,
        ce => ap_const_logic_1,
        dout => grp_fu_963_p2);

    dft_dmul_64ns_64nmb6_U81 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_real_5_read_reg_1123,
        din1 => tmp_i_i10_reg_1463,
        ce => ap_const_logic_1,
        dout => grp_fu_967_p2);

    dft_dmul_64ns_64nmb6_U82 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_imag_5_read_reg_1129,
        din1 => tmp_i_i11_reg_1469,
        ce => ap_const_logic_1,
        dout => grp_fu_971_p2);

    dft_dmul_64ns_64nmb6_U83 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_real_5_read_reg_1123,
        din1 => tmp_i_i11_reg_1469,
        ce => ap_const_logic_1,
        dout => grp_fu_975_p2);

    dft_dmul_64ns_64nmb6_U84 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_imag_5_read_reg_1129,
        din1 => tmp_i_i10_reg_1463,
        ce => ap_const_logic_1,
        dout => grp_fu_979_p2);

    dft_dmul_64ns_64nmb6_U85 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_real_6_read_reg_1135,
        din1 => tmp_i_i12_reg_1515,
        ce => ap_const_logic_1,
        dout => grp_fu_983_p2);

    dft_dmul_64ns_64nmb6_U86 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_imag_6_read_reg_1141,
        din1 => tmp_i_i13_reg_1521,
        ce => ap_const_logic_1,
        dout => grp_fu_987_p2);

    dft_dmul_64ns_64nmb6_U87 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_real_6_read_reg_1135,
        din1 => tmp_i_i13_reg_1521,
        ce => ap_const_logic_1,
        dout => grp_fu_991_p2);

    dft_dmul_64ns_64nmb6_U88 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_imag_6_read_reg_1141,
        din1 => tmp_i_i12_reg_1515,
        ce => ap_const_logic_1,
        dout => grp_fu_995_p2);

    dft_dmul_64ns_64nmb6_U89 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_real_7_read_reg_1147,
        din1 => tmp_i_i14_reg_1567,
        ce => ap_const_logic_1,
        dout => grp_fu_999_p2);

    dft_dmul_64ns_64nmb6_U90 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_imag_7_read_reg_1153,
        din1 => tmp_i_i15_reg_1573,
        ce => ap_const_logic_1,
        dout => grp_fu_1003_p2);

    dft_dmul_64ns_64nmb6_U91 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_real_7_read_reg_1147,
        din1 => tmp_i_i15_reg_1573,
        ce => ap_const_logic_1,
        dout => grp_fu_1007_p2);

    dft_dmul_64ns_64nmb6_U92 : component dft_dmul_64ns_64nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sample_imag_7_read_reg_1153,
        din1 => tmp_i_i14_reg_1567,
        ce => ap_const_logic_1,
        dout => grp_fu_1011_p2);

    dft_sitodp_32ns_6ncg_U93 : component dft_sitodp_32ns_6ncg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1015_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_1015_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter47 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter48_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter48 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter49_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter49 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter50_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter50 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter51_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter51 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter52_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter52 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter53_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter53 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter54_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter54 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter55_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter55 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter56_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter56 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter57_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter57 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter58_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter58 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter59_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter59 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter60_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter60 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter61_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter61 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter61 <= ap_enable_reg_pp0_iter60;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter62_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter62 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter62 <= ap_enable_reg_pp0_iter61;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter63_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter63 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter63 <= ap_enable_reg_pp0_iter62;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter64_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter64 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter64 <= ap_enable_reg_pp0_iter63;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter65_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter65 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter65 <= ap_enable_reg_pp0_iter64;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter66_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter66 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter66 <= ap_enable_reg_pp0_iter65;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter67_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter67 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter67 <= ap_enable_reg_pp0_iter66;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter68_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter68 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter68 <= ap_enable_reg_pp0_iter67;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter69_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter69 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter69 <= ap_enable_reg_pp0_iter68;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter70_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter70 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter70 <= ap_enable_reg_pp0_iter69;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter71_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter71 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter71 <= ap_enable_reg_pp0_iter70;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter72_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter72 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter72 <= ap_enable_reg_pp0_iter71;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter73_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter73 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter73 <= ap_enable_reg_pp0_iter72;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter74_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter74 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter74 <= ap_enable_reg_pp0_iter73;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter75_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter75 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter75 <= ap_enable_reg_pp0_iter74;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter76_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter76 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter76 <= ap_enable_reg_pp0_iter75;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter77_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter77 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter77 <= ap_enable_reg_pp0_iter76;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter77 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_411_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_411_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln16_reg_1159_pp0_iter12_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    grp_sin_or_cos_double_s_fu_411_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_411_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_411_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_430_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_430_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln16_reg_1159_pp0_iter12_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    grp_sin_or_cos_double_s_fu_430_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_430_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_430_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_449_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_449_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln16_reg_1159_pp0_iter17_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    grp_sin_or_cos_double_s_fu_449_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_449_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_449_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_468_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_468_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln16_reg_1159_pp0_iter17_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    grp_sin_or_cos_double_s_fu_468_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_468_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_468_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_487_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_487_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln16_reg_1159_pp0_iter22_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    grp_sin_or_cos_double_s_fu_487_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_487_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_487_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_506_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_506_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln16_reg_1159_pp0_iter22_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    grp_sin_or_cos_double_s_fu_506_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_506_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_506_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_525_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_525_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln16_reg_1159_pp0_iter27_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    grp_sin_or_cos_double_s_fu_525_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_525_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_525_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_544_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_544_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln16_reg_1159_pp0_iter27_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    grp_sin_or_cos_double_s_fu_544_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_544_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_544_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_563_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_563_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln16_reg_1159_pp0_iter32_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    grp_sin_or_cos_double_s_fu_563_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_563_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_563_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_582_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_582_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln16_reg_1159_pp0_iter32_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    grp_sin_or_cos_double_s_fu_582_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_582_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_582_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_601_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_601_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln16_reg_1159_pp0_iter37_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    grp_sin_or_cos_double_s_fu_601_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_601_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_601_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_620_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_620_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln16_reg_1159_pp0_iter37_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    grp_sin_or_cos_double_s_fu_620_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_620_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_620_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_639_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_639_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln16_reg_1159_pp0_iter42_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    grp_sin_or_cos_double_s_fu_639_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_639_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_639_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_658_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_658_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln16_reg_1159_pp0_iter42_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    grp_sin_or_cos_double_s_fu_658_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_658_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_658_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_677_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_677_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln16_reg_1159_pp0_iter47_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter48 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    grp_sin_or_cos_double_s_fu_677_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_677_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_677_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_696_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_696_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln16_reg_1159_pp0_iter47_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter48 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    grp_sin_or_cos_double_s_fu_696_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_696_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_696_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_1159 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_reg_388 <= i_2_reg_1163;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_388 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_1_reg_400_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
                i_1_reg_400 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
                i_1_reg_400 <= i_reg_1642;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                i_0_reg_388_pp0_iter10_reg <= i_0_reg_388_pp0_iter9_reg;
                i_0_reg_388_pp0_iter11_reg <= i_0_reg_388_pp0_iter10_reg;
                i_0_reg_388_pp0_iter12_reg <= i_0_reg_388_pp0_iter11_reg;
                i_0_reg_388_pp0_iter13_reg <= i_0_reg_388_pp0_iter12_reg;
                i_0_reg_388_pp0_iter14_reg <= i_0_reg_388_pp0_iter13_reg;
                i_0_reg_388_pp0_iter15_reg <= i_0_reg_388_pp0_iter14_reg;
                i_0_reg_388_pp0_iter16_reg <= i_0_reg_388_pp0_iter15_reg;
                i_0_reg_388_pp0_iter17_reg <= i_0_reg_388_pp0_iter16_reg;
                i_0_reg_388_pp0_iter18_reg <= i_0_reg_388_pp0_iter17_reg;
                i_0_reg_388_pp0_iter19_reg <= i_0_reg_388_pp0_iter18_reg;
                i_0_reg_388_pp0_iter20_reg <= i_0_reg_388_pp0_iter19_reg;
                i_0_reg_388_pp0_iter21_reg <= i_0_reg_388_pp0_iter20_reg;
                i_0_reg_388_pp0_iter22_reg <= i_0_reg_388_pp0_iter21_reg;
                i_0_reg_388_pp0_iter23_reg <= i_0_reg_388_pp0_iter22_reg;
                i_0_reg_388_pp0_iter24_reg <= i_0_reg_388_pp0_iter23_reg;
                i_0_reg_388_pp0_iter25_reg <= i_0_reg_388_pp0_iter24_reg;
                i_0_reg_388_pp0_iter26_reg <= i_0_reg_388_pp0_iter25_reg;
                i_0_reg_388_pp0_iter27_reg <= i_0_reg_388_pp0_iter26_reg;
                i_0_reg_388_pp0_iter28_reg <= i_0_reg_388_pp0_iter27_reg;
                i_0_reg_388_pp0_iter29_reg <= i_0_reg_388_pp0_iter28_reg;
                i_0_reg_388_pp0_iter2_reg <= i_0_reg_388_pp0_iter1_reg;
                i_0_reg_388_pp0_iter30_reg <= i_0_reg_388_pp0_iter29_reg;
                i_0_reg_388_pp0_iter31_reg <= i_0_reg_388_pp0_iter30_reg;
                i_0_reg_388_pp0_iter32_reg <= i_0_reg_388_pp0_iter31_reg;
                i_0_reg_388_pp0_iter33_reg <= i_0_reg_388_pp0_iter32_reg;
                i_0_reg_388_pp0_iter34_reg <= i_0_reg_388_pp0_iter33_reg;
                i_0_reg_388_pp0_iter35_reg <= i_0_reg_388_pp0_iter34_reg;
                i_0_reg_388_pp0_iter36_reg <= i_0_reg_388_pp0_iter35_reg;
                i_0_reg_388_pp0_iter37_reg <= i_0_reg_388_pp0_iter36_reg;
                i_0_reg_388_pp0_iter38_reg <= i_0_reg_388_pp0_iter37_reg;
                i_0_reg_388_pp0_iter39_reg <= i_0_reg_388_pp0_iter38_reg;
                i_0_reg_388_pp0_iter3_reg <= i_0_reg_388_pp0_iter2_reg;
                i_0_reg_388_pp0_iter40_reg <= i_0_reg_388_pp0_iter39_reg;
                i_0_reg_388_pp0_iter41_reg <= i_0_reg_388_pp0_iter40_reg;
                i_0_reg_388_pp0_iter42_reg <= i_0_reg_388_pp0_iter41_reg;
                i_0_reg_388_pp0_iter43_reg <= i_0_reg_388_pp0_iter42_reg;
                i_0_reg_388_pp0_iter44_reg <= i_0_reg_388_pp0_iter43_reg;
                i_0_reg_388_pp0_iter45_reg <= i_0_reg_388_pp0_iter44_reg;
                i_0_reg_388_pp0_iter46_reg <= i_0_reg_388_pp0_iter45_reg;
                i_0_reg_388_pp0_iter47_reg <= i_0_reg_388_pp0_iter46_reg;
                i_0_reg_388_pp0_iter48_reg <= i_0_reg_388_pp0_iter47_reg;
                i_0_reg_388_pp0_iter49_reg <= i_0_reg_388_pp0_iter48_reg;
                i_0_reg_388_pp0_iter4_reg <= i_0_reg_388_pp0_iter3_reg;
                i_0_reg_388_pp0_iter50_reg <= i_0_reg_388_pp0_iter49_reg;
                i_0_reg_388_pp0_iter51_reg <= i_0_reg_388_pp0_iter50_reg;
                i_0_reg_388_pp0_iter52_reg <= i_0_reg_388_pp0_iter51_reg;
                i_0_reg_388_pp0_iter53_reg <= i_0_reg_388_pp0_iter52_reg;
                i_0_reg_388_pp0_iter54_reg <= i_0_reg_388_pp0_iter53_reg;
                i_0_reg_388_pp0_iter55_reg <= i_0_reg_388_pp0_iter54_reg;
                i_0_reg_388_pp0_iter56_reg <= i_0_reg_388_pp0_iter55_reg;
                i_0_reg_388_pp0_iter57_reg <= i_0_reg_388_pp0_iter56_reg;
                i_0_reg_388_pp0_iter58_reg <= i_0_reg_388_pp0_iter57_reg;
                i_0_reg_388_pp0_iter59_reg <= i_0_reg_388_pp0_iter58_reg;
                i_0_reg_388_pp0_iter5_reg <= i_0_reg_388_pp0_iter4_reg;
                i_0_reg_388_pp0_iter60_reg <= i_0_reg_388_pp0_iter59_reg;
                i_0_reg_388_pp0_iter61_reg <= i_0_reg_388_pp0_iter60_reg;
                i_0_reg_388_pp0_iter62_reg <= i_0_reg_388_pp0_iter61_reg;
                i_0_reg_388_pp0_iter63_reg <= i_0_reg_388_pp0_iter62_reg;
                i_0_reg_388_pp0_iter64_reg <= i_0_reg_388_pp0_iter63_reg;
                i_0_reg_388_pp0_iter65_reg <= i_0_reg_388_pp0_iter64_reg;
                i_0_reg_388_pp0_iter66_reg <= i_0_reg_388_pp0_iter65_reg;
                i_0_reg_388_pp0_iter67_reg <= i_0_reg_388_pp0_iter66_reg;
                i_0_reg_388_pp0_iter68_reg <= i_0_reg_388_pp0_iter67_reg;
                i_0_reg_388_pp0_iter69_reg <= i_0_reg_388_pp0_iter68_reg;
                i_0_reg_388_pp0_iter6_reg <= i_0_reg_388_pp0_iter5_reg;
                i_0_reg_388_pp0_iter70_reg <= i_0_reg_388_pp0_iter69_reg;
                i_0_reg_388_pp0_iter71_reg <= i_0_reg_388_pp0_iter70_reg;
                i_0_reg_388_pp0_iter72_reg <= i_0_reg_388_pp0_iter71_reg;
                i_0_reg_388_pp0_iter73_reg <= i_0_reg_388_pp0_iter72_reg;
                i_0_reg_388_pp0_iter74_reg <= i_0_reg_388_pp0_iter73_reg;
                i_0_reg_388_pp0_iter75_reg <= i_0_reg_388_pp0_iter74_reg;
                i_0_reg_388_pp0_iter76_reg <= i_0_reg_388_pp0_iter75_reg;
                i_0_reg_388_pp0_iter7_reg <= i_0_reg_388_pp0_iter6_reg;
                i_0_reg_388_pp0_iter8_reg <= i_0_reg_388_pp0_iter7_reg;
                i_0_reg_388_pp0_iter9_reg <= i_0_reg_388_pp0_iter8_reg;
                icmp_ln16_reg_1159_pp0_iter10_reg <= icmp_ln16_reg_1159_pp0_iter9_reg;
                icmp_ln16_reg_1159_pp0_iter11_reg <= icmp_ln16_reg_1159_pp0_iter10_reg;
                icmp_ln16_reg_1159_pp0_iter12_reg <= icmp_ln16_reg_1159_pp0_iter11_reg;
                icmp_ln16_reg_1159_pp0_iter13_reg <= icmp_ln16_reg_1159_pp0_iter12_reg;
                icmp_ln16_reg_1159_pp0_iter14_reg <= icmp_ln16_reg_1159_pp0_iter13_reg;
                icmp_ln16_reg_1159_pp0_iter15_reg <= icmp_ln16_reg_1159_pp0_iter14_reg;
                icmp_ln16_reg_1159_pp0_iter16_reg <= icmp_ln16_reg_1159_pp0_iter15_reg;
                icmp_ln16_reg_1159_pp0_iter17_reg <= icmp_ln16_reg_1159_pp0_iter16_reg;
                icmp_ln16_reg_1159_pp0_iter18_reg <= icmp_ln16_reg_1159_pp0_iter17_reg;
                icmp_ln16_reg_1159_pp0_iter19_reg <= icmp_ln16_reg_1159_pp0_iter18_reg;
                icmp_ln16_reg_1159_pp0_iter20_reg <= icmp_ln16_reg_1159_pp0_iter19_reg;
                icmp_ln16_reg_1159_pp0_iter21_reg <= icmp_ln16_reg_1159_pp0_iter20_reg;
                icmp_ln16_reg_1159_pp0_iter22_reg <= icmp_ln16_reg_1159_pp0_iter21_reg;
                icmp_ln16_reg_1159_pp0_iter23_reg <= icmp_ln16_reg_1159_pp0_iter22_reg;
                icmp_ln16_reg_1159_pp0_iter24_reg <= icmp_ln16_reg_1159_pp0_iter23_reg;
                icmp_ln16_reg_1159_pp0_iter25_reg <= icmp_ln16_reg_1159_pp0_iter24_reg;
                icmp_ln16_reg_1159_pp0_iter26_reg <= icmp_ln16_reg_1159_pp0_iter25_reg;
                icmp_ln16_reg_1159_pp0_iter27_reg <= icmp_ln16_reg_1159_pp0_iter26_reg;
                icmp_ln16_reg_1159_pp0_iter28_reg <= icmp_ln16_reg_1159_pp0_iter27_reg;
                icmp_ln16_reg_1159_pp0_iter29_reg <= icmp_ln16_reg_1159_pp0_iter28_reg;
                icmp_ln16_reg_1159_pp0_iter2_reg <= icmp_ln16_reg_1159_pp0_iter1_reg;
                icmp_ln16_reg_1159_pp0_iter30_reg <= icmp_ln16_reg_1159_pp0_iter29_reg;
                icmp_ln16_reg_1159_pp0_iter31_reg <= icmp_ln16_reg_1159_pp0_iter30_reg;
                icmp_ln16_reg_1159_pp0_iter32_reg <= icmp_ln16_reg_1159_pp0_iter31_reg;
                icmp_ln16_reg_1159_pp0_iter33_reg <= icmp_ln16_reg_1159_pp0_iter32_reg;
                icmp_ln16_reg_1159_pp0_iter34_reg <= icmp_ln16_reg_1159_pp0_iter33_reg;
                icmp_ln16_reg_1159_pp0_iter35_reg <= icmp_ln16_reg_1159_pp0_iter34_reg;
                icmp_ln16_reg_1159_pp0_iter36_reg <= icmp_ln16_reg_1159_pp0_iter35_reg;
                icmp_ln16_reg_1159_pp0_iter37_reg <= icmp_ln16_reg_1159_pp0_iter36_reg;
                icmp_ln16_reg_1159_pp0_iter38_reg <= icmp_ln16_reg_1159_pp0_iter37_reg;
                icmp_ln16_reg_1159_pp0_iter39_reg <= icmp_ln16_reg_1159_pp0_iter38_reg;
                icmp_ln16_reg_1159_pp0_iter3_reg <= icmp_ln16_reg_1159_pp0_iter2_reg;
                icmp_ln16_reg_1159_pp0_iter40_reg <= icmp_ln16_reg_1159_pp0_iter39_reg;
                icmp_ln16_reg_1159_pp0_iter41_reg <= icmp_ln16_reg_1159_pp0_iter40_reg;
                icmp_ln16_reg_1159_pp0_iter42_reg <= icmp_ln16_reg_1159_pp0_iter41_reg;
                icmp_ln16_reg_1159_pp0_iter43_reg <= icmp_ln16_reg_1159_pp0_iter42_reg;
                icmp_ln16_reg_1159_pp0_iter44_reg <= icmp_ln16_reg_1159_pp0_iter43_reg;
                icmp_ln16_reg_1159_pp0_iter45_reg <= icmp_ln16_reg_1159_pp0_iter44_reg;
                icmp_ln16_reg_1159_pp0_iter46_reg <= icmp_ln16_reg_1159_pp0_iter45_reg;
                icmp_ln16_reg_1159_pp0_iter47_reg <= icmp_ln16_reg_1159_pp0_iter46_reg;
                icmp_ln16_reg_1159_pp0_iter48_reg <= icmp_ln16_reg_1159_pp0_iter47_reg;
                icmp_ln16_reg_1159_pp0_iter49_reg <= icmp_ln16_reg_1159_pp0_iter48_reg;
                icmp_ln16_reg_1159_pp0_iter4_reg <= icmp_ln16_reg_1159_pp0_iter3_reg;
                icmp_ln16_reg_1159_pp0_iter50_reg <= icmp_ln16_reg_1159_pp0_iter49_reg;
                icmp_ln16_reg_1159_pp0_iter51_reg <= icmp_ln16_reg_1159_pp0_iter50_reg;
                icmp_ln16_reg_1159_pp0_iter52_reg <= icmp_ln16_reg_1159_pp0_iter51_reg;
                icmp_ln16_reg_1159_pp0_iter53_reg <= icmp_ln16_reg_1159_pp0_iter52_reg;
                icmp_ln16_reg_1159_pp0_iter54_reg <= icmp_ln16_reg_1159_pp0_iter53_reg;
                icmp_ln16_reg_1159_pp0_iter55_reg <= icmp_ln16_reg_1159_pp0_iter54_reg;
                icmp_ln16_reg_1159_pp0_iter56_reg <= icmp_ln16_reg_1159_pp0_iter55_reg;
                icmp_ln16_reg_1159_pp0_iter57_reg <= icmp_ln16_reg_1159_pp0_iter56_reg;
                icmp_ln16_reg_1159_pp0_iter58_reg <= icmp_ln16_reg_1159_pp0_iter57_reg;
                icmp_ln16_reg_1159_pp0_iter59_reg <= icmp_ln16_reg_1159_pp0_iter58_reg;
                icmp_ln16_reg_1159_pp0_iter5_reg <= icmp_ln16_reg_1159_pp0_iter4_reg;
                icmp_ln16_reg_1159_pp0_iter60_reg <= icmp_ln16_reg_1159_pp0_iter59_reg;
                icmp_ln16_reg_1159_pp0_iter61_reg <= icmp_ln16_reg_1159_pp0_iter60_reg;
                icmp_ln16_reg_1159_pp0_iter62_reg <= icmp_ln16_reg_1159_pp0_iter61_reg;
                icmp_ln16_reg_1159_pp0_iter63_reg <= icmp_ln16_reg_1159_pp0_iter62_reg;
                icmp_ln16_reg_1159_pp0_iter64_reg <= icmp_ln16_reg_1159_pp0_iter63_reg;
                icmp_ln16_reg_1159_pp0_iter65_reg <= icmp_ln16_reg_1159_pp0_iter64_reg;
                icmp_ln16_reg_1159_pp0_iter66_reg <= icmp_ln16_reg_1159_pp0_iter65_reg;
                icmp_ln16_reg_1159_pp0_iter67_reg <= icmp_ln16_reg_1159_pp0_iter66_reg;
                icmp_ln16_reg_1159_pp0_iter68_reg <= icmp_ln16_reg_1159_pp0_iter67_reg;
                icmp_ln16_reg_1159_pp0_iter69_reg <= icmp_ln16_reg_1159_pp0_iter68_reg;
                icmp_ln16_reg_1159_pp0_iter6_reg <= icmp_ln16_reg_1159_pp0_iter5_reg;
                icmp_ln16_reg_1159_pp0_iter70_reg <= icmp_ln16_reg_1159_pp0_iter69_reg;
                icmp_ln16_reg_1159_pp0_iter71_reg <= icmp_ln16_reg_1159_pp0_iter70_reg;
                icmp_ln16_reg_1159_pp0_iter72_reg <= icmp_ln16_reg_1159_pp0_iter71_reg;
                icmp_ln16_reg_1159_pp0_iter73_reg <= icmp_ln16_reg_1159_pp0_iter72_reg;
                icmp_ln16_reg_1159_pp0_iter74_reg <= icmp_ln16_reg_1159_pp0_iter73_reg;
                icmp_ln16_reg_1159_pp0_iter75_reg <= icmp_ln16_reg_1159_pp0_iter74_reg;
                icmp_ln16_reg_1159_pp0_iter76_reg <= icmp_ln16_reg_1159_pp0_iter75_reg;
                icmp_ln16_reg_1159_pp0_iter7_reg <= icmp_ln16_reg_1159_pp0_iter6_reg;
                icmp_ln16_reg_1159_pp0_iter8_reg <= icmp_ln16_reg_1159_pp0_iter7_reg;
                icmp_ln16_reg_1159_pp0_iter9_reg <= icmp_ln16_reg_1159_pp0_iter8_reg;
                w_reg_1178_pp0_iter10_reg <= w_reg_1178_pp0_iter9_reg;
                w_reg_1178_pp0_iter11_reg <= w_reg_1178_pp0_iter10_reg;
                w_reg_1178_pp0_iter12_reg <= w_reg_1178_pp0_iter11_reg;
                w_reg_1178_pp0_iter13_reg <= w_reg_1178_pp0_iter12_reg;
                w_reg_1178_pp0_iter14_reg <= w_reg_1178_pp0_iter13_reg;
                w_reg_1178_pp0_iter15_reg <= w_reg_1178_pp0_iter14_reg;
                w_reg_1178_pp0_iter16_reg <= w_reg_1178_pp0_iter15_reg;
                w_reg_1178_pp0_iter17_reg <= w_reg_1178_pp0_iter16_reg;
                w_reg_1178_pp0_iter18_reg <= w_reg_1178_pp0_iter17_reg;
                w_reg_1178_pp0_iter19_reg <= w_reg_1178_pp0_iter18_reg;
                w_reg_1178_pp0_iter20_reg <= w_reg_1178_pp0_iter19_reg;
                w_reg_1178_pp0_iter21_reg <= w_reg_1178_pp0_iter20_reg;
                w_reg_1178_pp0_iter22_reg <= w_reg_1178_pp0_iter21_reg;
                w_reg_1178_pp0_iter23_reg <= w_reg_1178_pp0_iter22_reg;
                w_reg_1178_pp0_iter24_reg <= w_reg_1178_pp0_iter23_reg;
                w_reg_1178_pp0_iter25_reg <= w_reg_1178_pp0_iter24_reg;
                w_reg_1178_pp0_iter26_reg <= w_reg_1178_pp0_iter25_reg;
                w_reg_1178_pp0_iter27_reg <= w_reg_1178_pp0_iter26_reg;
                w_reg_1178_pp0_iter28_reg <= w_reg_1178_pp0_iter27_reg;
                w_reg_1178_pp0_iter29_reg <= w_reg_1178_pp0_iter28_reg;
                w_reg_1178_pp0_iter30_reg <= w_reg_1178_pp0_iter29_reg;
                w_reg_1178_pp0_iter31_reg <= w_reg_1178_pp0_iter30_reg;
                w_reg_1178_pp0_iter32_reg <= w_reg_1178_pp0_iter31_reg;
                w_reg_1178_pp0_iter33_reg <= w_reg_1178_pp0_iter32_reg;
                w_reg_1178_pp0_iter34_reg <= w_reg_1178_pp0_iter33_reg;
                w_reg_1178_pp0_iter35_reg <= w_reg_1178_pp0_iter34_reg;
                w_reg_1178_pp0_iter36_reg <= w_reg_1178_pp0_iter35_reg;
                w_reg_1178_pp0_iter37_reg <= w_reg_1178_pp0_iter36_reg;
                w_reg_1178_pp0_iter38_reg <= w_reg_1178_pp0_iter37_reg;
                w_reg_1178_pp0_iter39_reg <= w_reg_1178_pp0_iter38_reg;
                w_reg_1178_pp0_iter40_reg <= w_reg_1178_pp0_iter39_reg;
                w_reg_1178_pp0_iter41_reg <= w_reg_1178_pp0_iter40_reg;
                w_reg_1178_pp0_iter42_reg <= w_reg_1178_pp0_iter41_reg;
                w_reg_1178_pp0_iter43_reg <= w_reg_1178_pp0_iter42_reg;
                w_reg_1178_pp0_iter9_reg <= w_reg_1178;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_0_reg_388_pp0_iter1_reg <= i_0_reg_388;
                icmp_ln16_reg_1159 <= icmp_ln16_fu_1018_p2;
                icmp_ln16_reg_1159_pp0_iter1_reg <= icmp_ln16_reg_1159;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_2_reg_1163 <= i_2_fu_1024_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state81)) then
                i_reg_1642 <= i_fu_1047_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                sample_imag_0_read_reg_1069 <= sample_imag_0_i;
                sample_imag_1_read_reg_1081 <= sample_imag_1_i;
                sample_imag_2_read_reg_1093 <= sample_imag_2_i;
                sample_imag_3_read_reg_1105 <= sample_imag_3_i;
                sample_imag_4_read_reg_1117 <= sample_imag_4_i;
                sample_imag_5_read_reg_1129 <= sample_imag_5_i;
                sample_imag_6_read_reg_1141 <= sample_imag_6_i;
                sample_imag_7_read_reg_1153 <= sample_imag_7_i;
                sample_real_0_read_reg_1063 <= sample_real_0_i;
                sample_real_1_read_reg_1075 <= sample_real_1_i;
                sample_real_2_read_reg_1087 <= sample_real_2_i;
                sample_real_3_read_reg_1099 <= sample_real_3_i;
                sample_real_4_read_reg_1111 <= sample_real_4_i;
                sample_real_5_read_reg_1123 <= sample_real_5_i;
                sample_real_6_read_reg_1135 <= sample_real_6_i;
                sample_real_7_read_reg_1147 <= sample_real_7_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_1159_pp0_iter46_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_1_1_reg_1370 <= grp_fu_745_p2;
                tmp_2_42_reg_1380 <= grp_fu_753_p2;
                tmp_4_3_reg_1385 <= grp_fu_930_p2;
                tmp_5_3_reg_1390 <= grp_fu_934_p2;
                tmp_6_2_reg_1375 <= grp_fu_749_p2;
                tmp_7_1_reg_1365 <= grp_fu_741_p2;
                tmp_8_3_reg_1395 <= grp_fu_938_p2;
                tmp_9_3_reg_1400 <= grp_fu_942_p2;
                tmp_i_i8_reg_1405 <= grp_sin_or_cos_double_s_fu_563_ap_return;
                tmp_i_i9_reg_1411 <= grp_sin_or_cos_double_s_fu_582_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_1159_pp0_iter51_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_1_2_reg_1428 <= grp_fu_761_p2;
                tmp_3_reg_1438 <= grp_fu_769_p2;
                tmp_4_4_reg_1443 <= grp_fu_951_p2;
                tmp_5_4_reg_1448 <= grp_fu_955_p2;
                tmp_6_3_reg_1433 <= grp_fu_765_p2;
                tmp_7_2_reg_1423 <= grp_fu_757_p2;
                tmp_8_4_reg_1453 <= grp_fu_959_p2;
                tmp_9_4_reg_1458 <= grp_fu_963_p2;
                tmp_i_i10_reg_1463 <= grp_sin_or_cos_double_s_fu_601_ap_return;
                tmp_i_i11_reg_1469 <= grp_sin_or_cos_double_s_fu_620_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_1159_pp0_iter56_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_1_3_reg_1480 <= grp_fu_777_p2;
                tmp_4_43_reg_1490 <= grp_fu_785_p2;
                tmp_4_5_reg_1495 <= grp_fu_967_p2;
                tmp_5_5_reg_1500 <= grp_fu_971_p2;
                tmp_6_4_reg_1485 <= grp_fu_781_p2;
                tmp_7_3_reg_1475 <= grp_fu_773_p2;
                tmp_8_5_reg_1505 <= grp_fu_975_p2;
                tmp_9_5_reg_1510 <= grp_fu_979_p2;
                tmp_i_i12_reg_1515 <= grp_sin_or_cos_double_s_fu_639_ap_return;
                tmp_i_i13_reg_1521 <= grp_sin_or_cos_double_s_fu_658_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_1159_pp0_iter41_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_1_41_reg_1322 <= grp_fu_737_p2;
                tmp_1_reg_1312 <= grp_fu_728_p2;
                tmp_4_2_reg_1327 <= grp_fu_909_p2;
                tmp_5_2_reg_1332 <= grp_fu_913_p2;
                tmp_6_1_reg_1317 <= grp_fu_733_p2;
                tmp_7_reg_1307 <= grp_fu_723_p2;
                tmp_8_2_reg_1337 <= grp_fu_917_p2;
                tmp_9_2_reg_1342 <= grp_fu_921_p2;
                tmp_i_i6_reg_1347 <= grp_sin_or_cos_double_s_fu_525_ap_return;
                tmp_i_i7_reg_1353 <= grp_sin_or_cos_double_s_fu_544_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_1159_pp0_iter61_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_1_4_reg_1532 <= grp_fu_793_p2;
                tmp_4_6_reg_1547 <= grp_fu_983_p2;
                tmp_5_44_reg_1542 <= grp_fu_801_p2;
                tmp_5_6_reg_1552 <= grp_fu_987_p2;
                tmp_6_5_reg_1537 <= grp_fu_797_p2;
                tmp_7_4_reg_1527 <= grp_fu_789_p2;
                tmp_8_6_reg_1557 <= grp_fu_991_p2;
                tmp_9_6_reg_1562 <= grp_fu_995_p2;
                tmp_i_i14_reg_1567 <= grp_sin_or_cos_double_s_fu_677_ap_return;
                tmp_i_i15_reg_1573 <= grp_sin_or_cos_double_s_fu_696_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_1159_pp0_iter66_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_1_5_reg_1584 <= grp_fu_809_p2;
                tmp_4_7_reg_1599 <= grp_fu_999_p2;
                tmp_5_7_reg_1604 <= grp_fu_1003_p2;
                tmp_6_45_reg_1594 <= grp_fu_817_p2;
                tmp_6_6_reg_1589 <= grp_fu_813_p2;
                tmp_7_5_reg_1579 <= grp_fu_805_p2;
                tmp_8_7_reg_1609 <= grp_fu_1007_p2;
                tmp_9_7_reg_1614 <= grp_fu_1011_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_1159_pp0_iter71_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_1_6_reg_1624 <= grp_fu_825_p2;
                tmp_6_7_reg_1629 <= grp_fu_829_p2;
                tmp_7_46_reg_1634 <= grp_fu_833_p2;
                tmp_7_6_reg_1619 <= grp_fu_821_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_1159_pp0_iter36_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_4_1_reg_1269 <= grp_fu_888_p2;
                tmp_5_1_reg_1274 <= grp_fu_892_p2;
                tmp_6_reg_1259 <= grp_fu_715_p2;
                tmp_8_1_reg_1279 <= grp_fu_896_p2;
                tmp_9_1_reg_1284 <= grp_fu_900_p2;
                tmp_i_i4_reg_1289 <= grp_sin_or_cos_double_s_fu_487_ap_return;
                tmp_i_i5_reg_1295 <= grp_sin_or_cos_double_s_fu_506_ap_return;
                tmp_s_reg_1264 <= grp_fu_719_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_1159_pp0_iter31_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_4_reg_1221 <= grp_fu_867_p2;
                tmp_5_reg_1226 <= grp_fu_871_p2;
                tmp_8_reg_1231 <= grp_fu_875_p2;
                tmp_9_reg_1236 <= grp_fu_879_p2;
                tmp_i_i2_reg_1241 <= grp_sin_or_cos_double_s_fu_449_ap_return;
                tmp_i_i3_reg_1247 <= grp_sin_or_cos_double_s_fu_468_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_1159_pp0_iter26_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_i_i1_reg_1209 <= grp_sin_or_cos_double_s_fu_430_ap_return;
                tmp_i_i_reg_1203 <= grp_sin_or_cos_double_s_fu_411_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_1159_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_reg_1173 <= grp_fu_1015_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_1041_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state81))) then
                trunc_ln34_reg_1652 <= trunc_ln34_fu_1059_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_1159_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                w_reg_1178 <= grp_fu_847_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_1159_pp0_iter22_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                x_assign_2_reg_1197 <= grp_fu_857_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_1159_pp0_iter27_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                x_assign_3_reg_1215 <= grp_fu_862_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_1159_pp0_iter32_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                x_assign_4_reg_1253 <= grp_fu_883_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_1159_pp0_iter37_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                x_assign_5_reg_1301 <= grp_fu_904_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_1159_pp0_iter42_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                x_assign_6_reg_1359 <= grp_fu_925_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_1159_pp0_iter47_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                x_assign_7_reg_1417 <= grp_fu_946_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_1159_pp0_iter12_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                x_assign_reg_1191 <= grp_fu_852_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln16_fu_1018_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state81, icmp_ln33_fu_1041_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter76, ap_enable_reg_pp0_iter77)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln16_fu_1018_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter77 = ap_const_logic_1) and (ap_enable_reg_pp0_iter76 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln16_fu_1018_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter77 = ap_const_logic_1) and (ap_enable_reg_pp0_iter76 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state81) and (icmp_ln33_fu_1041_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state80 <= ap_CS_fsm(2);
    ap_CS_fsm_state81 <= ap_CS_fsm(3);
    ap_CS_fsm_state82 <= ap_CS_fsm(4);
    ap_CS_fsm_state83 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage0_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage0_iter46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage0_iter47 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage0_iter48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage0_iter49 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage0_iter50 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage0_iter51 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage0_iter52 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage0_iter53 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage0_iter54 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage0_iter55 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage0_iter56 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage0_iter57 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage0_iter58 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage0_iter59 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp0_stage0_iter60 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp0_stage0_iter61 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp0_stage0_iter62 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp0_stage0_iter63 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp0_stage0_iter64 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp0_stage0_iter65 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp0_stage0_iter66 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp0_stage0_iter67 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp0_stage0_iter68 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp0_stage0_iter69 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp0_stage0_iter70 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp0_stage0_iter71 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp0_stage0_iter72 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp0_stage0_iter73 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp0_stage0_iter74 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp0_stage0_iter75 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp0_stage0_iter76 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp0_stage0_iter77 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln16_fu_1018_p2)
    begin
        if ((icmp_ln16_fu_1018_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state81, icmp_ln33_fu_1041_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state81) and (icmp_ln33_fu_1041_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter47, ap_enable_reg_pp0_iter48, ap_enable_reg_pp0_iter49, ap_enable_reg_pp0_iter50, ap_enable_reg_pp0_iter51, ap_enable_reg_pp0_iter52, ap_enable_reg_pp0_iter53, ap_enable_reg_pp0_iter54, ap_enable_reg_pp0_iter55, ap_enable_reg_pp0_iter56, ap_enable_reg_pp0_iter57, ap_enable_reg_pp0_iter58, ap_enable_reg_pp0_iter59, ap_enable_reg_pp0_iter60, ap_enable_reg_pp0_iter61, ap_enable_reg_pp0_iter62, ap_enable_reg_pp0_iter63, ap_enable_reg_pp0_iter64, ap_enable_reg_pp0_iter65, ap_enable_reg_pp0_iter66, ap_enable_reg_pp0_iter67, ap_enable_reg_pp0_iter68, ap_enable_reg_pp0_iter69, ap_enable_reg_pp0_iter70, ap_enable_reg_pp0_iter71, ap_enable_reg_pp0_iter72, ap_enable_reg_pp0_iter73, ap_enable_reg_pp0_iter74, ap_enable_reg_pp0_iter75, ap_enable_reg_pp0_iter76, ap_enable_reg_pp0_iter77)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter77 = ap_const_logic_0) and (ap_enable_reg_pp0_iter76 = ap_const_logic_0) and (ap_enable_reg_pp0_iter75 = ap_const_logic_0) and (ap_enable_reg_pp0_iter74 = ap_const_logic_0) and (ap_enable_reg_pp0_iter73 = ap_const_logic_0) and (ap_enable_reg_pp0_iter72 = ap_const_logic_0) and (ap_enable_reg_pp0_iter71 = ap_const_logic_0) and (ap_enable_reg_pp0_iter70 = ap_const_logic_0) and (ap_enable_reg_pp0_iter69 = ap_const_logic_0) and (ap_enable_reg_pp0_iter68 = ap_const_logic_0) and (ap_enable_reg_pp0_iter67 = ap_const_logic_0) and (ap_enable_reg_pp0_iter66 = ap_const_logic_0) and (ap_enable_reg_pp0_iter65 = ap_const_logic_0) and (ap_enable_reg_pp0_iter64 = ap_const_logic_0) and (ap_enable_reg_pp0_iter63 = ap_const_logic_0) and (ap_enable_reg_pp0_iter62 = ap_const_logic_0) and (ap_enable_reg_pp0_iter61 = ap_const_logic_0) and (ap_enable_reg_pp0_iter60 = ap_const_logic_0) and (ap_enable_reg_pp0_iter59 = ap_const_logic_0) and (ap_enable_reg_pp0_iter58 = ap_const_logic_0) and (ap_enable_reg_pp0_iter57 = ap_const_logic_0) and (ap_enable_reg_pp0_iter56 = ap_const_logic_0) and (ap_enable_reg_pp0_iter55 = ap_const_logic_0) and (ap_enable_reg_pp0_iter54 = ap_const_logic_0) and (ap_enable_reg_pp0_iter53 = ap_const_logic_0) and (ap_enable_reg_pp0_iter52 = ap_const_logic_0) and (ap_enable_reg_pp0_iter51 = ap_const_logic_0) and (ap_enable_reg_pp0_iter50 = ap_const_logic_0) and (ap_enable_reg_pp0_iter49 = ap_const_logic_0) and (ap_enable_reg_pp0_iter48 = ap_const_logic_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_392_p4_assign_proc : process(i_0_reg_388, ap_CS_fsm_pp0_stage0, icmp_ln16_reg_1159, i_2_reg_1163, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln16_reg_1159 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_0_phi_fu_392_p4 <= i_2_reg_1163;
        else 
            ap_phi_mux_i_0_phi_fu_392_p4 <= i_0_reg_388;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state81, icmp_ln33_fu_1041_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state81) and (icmp_ln33_fu_1041_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1015_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_phi_fu_392_p4),32));
    grp_sin_or_cos_double_s_fu_411_ap_start <= grp_sin_or_cos_double_s_fu_411_ap_start_reg;
    grp_sin_or_cos_double_s_fu_411_do_cos <= ap_const_logic_1;
    grp_sin_or_cos_double_s_fu_430_ap_start <= grp_sin_or_cos_double_s_fu_430_ap_start_reg;
    grp_sin_or_cos_double_s_fu_430_do_cos <= ap_const_logic_0;
    grp_sin_or_cos_double_s_fu_449_ap_start <= grp_sin_or_cos_double_s_fu_449_ap_start_reg;
    grp_sin_or_cos_double_s_fu_449_do_cos <= ap_const_logic_1;
    grp_sin_or_cos_double_s_fu_468_ap_start <= grp_sin_or_cos_double_s_fu_468_ap_start_reg;
    grp_sin_or_cos_double_s_fu_468_do_cos <= ap_const_logic_0;
    grp_sin_or_cos_double_s_fu_487_ap_start <= grp_sin_or_cos_double_s_fu_487_ap_start_reg;
    grp_sin_or_cos_double_s_fu_487_do_cos <= ap_const_logic_1;
    grp_sin_or_cos_double_s_fu_506_ap_start <= grp_sin_or_cos_double_s_fu_506_ap_start_reg;
    grp_sin_or_cos_double_s_fu_506_do_cos <= ap_const_logic_0;
    grp_sin_or_cos_double_s_fu_525_ap_start <= grp_sin_or_cos_double_s_fu_525_ap_start_reg;
    grp_sin_or_cos_double_s_fu_525_do_cos <= ap_const_logic_1;
    grp_sin_or_cos_double_s_fu_544_ap_start <= grp_sin_or_cos_double_s_fu_544_ap_start_reg;
    grp_sin_or_cos_double_s_fu_544_do_cos <= ap_const_logic_0;
    grp_sin_or_cos_double_s_fu_563_ap_start <= grp_sin_or_cos_double_s_fu_563_ap_start_reg;
    grp_sin_or_cos_double_s_fu_563_do_cos <= ap_const_logic_1;
    grp_sin_or_cos_double_s_fu_582_ap_start <= grp_sin_or_cos_double_s_fu_582_ap_start_reg;
    grp_sin_or_cos_double_s_fu_582_do_cos <= ap_const_logic_0;
    grp_sin_or_cos_double_s_fu_601_ap_start <= grp_sin_or_cos_double_s_fu_601_ap_start_reg;
    grp_sin_or_cos_double_s_fu_601_do_cos <= ap_const_logic_1;
    grp_sin_or_cos_double_s_fu_620_ap_start <= grp_sin_or_cos_double_s_fu_620_ap_start_reg;
    grp_sin_or_cos_double_s_fu_620_do_cos <= ap_const_logic_0;
    grp_sin_or_cos_double_s_fu_639_ap_start <= grp_sin_or_cos_double_s_fu_639_ap_start_reg;
    grp_sin_or_cos_double_s_fu_639_do_cos <= ap_const_logic_1;
    grp_sin_or_cos_double_s_fu_658_ap_start <= grp_sin_or_cos_double_s_fu_658_ap_start_reg;
    grp_sin_or_cos_double_s_fu_658_do_cos <= ap_const_logic_0;
    grp_sin_or_cos_double_s_fu_677_ap_start <= grp_sin_or_cos_double_s_fu_677_ap_start_reg;
    grp_sin_or_cos_double_s_fu_677_do_cos <= ap_const_logic_1;
    grp_sin_or_cos_double_s_fu_696_ap_start <= grp_sin_or_cos_double_s_fu_696_ap_start_reg;
    grp_sin_or_cos_double_s_fu_696_do_cos <= ap_const_logic_0;
    i_2_fu_1024_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_392_p4) + unsigned(ap_const_lv4_1));
    i_fu_1047_p2 <= std_logic_vector(unsigned(i_1_reg_400) + unsigned(ap_const_lv4_1));
    icmp_ln16_fu_1018_p2 <= "1" when (ap_phi_mux_i_0_phi_fu_392_p4 = ap_const_lv4_8) else "0";
    icmp_ln33_fu_1041_p2 <= "1" when (i_1_reg_400 = ap_const_lv4_8) else "0";

    sample_imag_0_o_assign_proc : process(sample_imag_0_i, trunc_ln34_reg_1652, temp_imag_q0, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_0))) then 
            sample_imag_0_o <= temp_imag_q0;
        else 
            sample_imag_0_o <= sample_imag_0_i;
        end if; 
    end process;


    sample_imag_0_o_ap_vld_assign_proc : process(trunc_ln34_reg_1652, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_0))) then 
            sample_imag_0_o_ap_vld <= ap_const_logic_1;
        else 
            sample_imag_0_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    sample_imag_1_o_assign_proc : process(sample_imag_1_i, trunc_ln34_reg_1652, temp_imag_q0, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_1))) then 
            sample_imag_1_o <= temp_imag_q0;
        else 
            sample_imag_1_o <= sample_imag_1_i;
        end if; 
    end process;


    sample_imag_1_o_ap_vld_assign_proc : process(trunc_ln34_reg_1652, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_1))) then 
            sample_imag_1_o_ap_vld <= ap_const_logic_1;
        else 
            sample_imag_1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    sample_imag_2_o_assign_proc : process(sample_imag_2_i, trunc_ln34_reg_1652, temp_imag_q0, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_2))) then 
            sample_imag_2_o <= temp_imag_q0;
        else 
            sample_imag_2_o <= sample_imag_2_i;
        end if; 
    end process;


    sample_imag_2_o_ap_vld_assign_proc : process(trunc_ln34_reg_1652, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_2))) then 
            sample_imag_2_o_ap_vld <= ap_const_logic_1;
        else 
            sample_imag_2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    sample_imag_3_o_assign_proc : process(sample_imag_3_i, trunc_ln34_reg_1652, temp_imag_q0, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_3))) then 
            sample_imag_3_o <= temp_imag_q0;
        else 
            sample_imag_3_o <= sample_imag_3_i;
        end if; 
    end process;


    sample_imag_3_o_ap_vld_assign_proc : process(trunc_ln34_reg_1652, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_3))) then 
            sample_imag_3_o_ap_vld <= ap_const_logic_1;
        else 
            sample_imag_3_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    sample_imag_4_o_assign_proc : process(sample_imag_4_i, trunc_ln34_reg_1652, temp_imag_q0, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_4))) then 
            sample_imag_4_o <= temp_imag_q0;
        else 
            sample_imag_4_o <= sample_imag_4_i;
        end if; 
    end process;


    sample_imag_4_o_ap_vld_assign_proc : process(trunc_ln34_reg_1652, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_4))) then 
            sample_imag_4_o_ap_vld <= ap_const_logic_1;
        else 
            sample_imag_4_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    sample_imag_5_o_assign_proc : process(sample_imag_5_i, trunc_ln34_reg_1652, temp_imag_q0, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_5))) then 
            sample_imag_5_o <= temp_imag_q0;
        else 
            sample_imag_5_o <= sample_imag_5_i;
        end if; 
    end process;


    sample_imag_5_o_ap_vld_assign_proc : process(trunc_ln34_reg_1652, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_5))) then 
            sample_imag_5_o_ap_vld <= ap_const_logic_1;
        else 
            sample_imag_5_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    sample_imag_6_o_assign_proc : process(sample_imag_6_i, trunc_ln34_reg_1652, temp_imag_q0, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_6))) then 
            sample_imag_6_o <= temp_imag_q0;
        else 
            sample_imag_6_o <= sample_imag_6_i;
        end if; 
    end process;


    sample_imag_6_o_ap_vld_assign_proc : process(trunc_ln34_reg_1652, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_6))) then 
            sample_imag_6_o_ap_vld <= ap_const_logic_1;
        else 
            sample_imag_6_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    sample_imag_7_o_assign_proc : process(sample_imag_7_i, trunc_ln34_reg_1652, temp_imag_q0, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_7))) then 
            sample_imag_7_o <= temp_imag_q0;
        else 
            sample_imag_7_o <= sample_imag_7_i;
        end if; 
    end process;


    sample_imag_7_o_ap_vld_assign_proc : process(trunc_ln34_reg_1652, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_7))) then 
            sample_imag_7_o_ap_vld <= ap_const_logic_1;
        else 
            sample_imag_7_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    sample_real_0_o_assign_proc : process(sample_real_0_i, trunc_ln34_reg_1652, temp_real_q0, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_0))) then 
            sample_real_0_o <= temp_real_q0;
        else 
            sample_real_0_o <= sample_real_0_i;
        end if; 
    end process;


    sample_real_0_o_ap_vld_assign_proc : process(trunc_ln34_reg_1652, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_0))) then 
            sample_real_0_o_ap_vld <= ap_const_logic_1;
        else 
            sample_real_0_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    sample_real_1_o_assign_proc : process(sample_real_1_i, trunc_ln34_reg_1652, temp_real_q0, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_1))) then 
            sample_real_1_o <= temp_real_q0;
        else 
            sample_real_1_o <= sample_real_1_i;
        end if; 
    end process;


    sample_real_1_o_ap_vld_assign_proc : process(trunc_ln34_reg_1652, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_1))) then 
            sample_real_1_o_ap_vld <= ap_const_logic_1;
        else 
            sample_real_1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    sample_real_2_o_assign_proc : process(sample_real_2_i, trunc_ln34_reg_1652, temp_real_q0, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_2))) then 
            sample_real_2_o <= temp_real_q0;
        else 
            sample_real_2_o <= sample_real_2_i;
        end if; 
    end process;


    sample_real_2_o_ap_vld_assign_proc : process(trunc_ln34_reg_1652, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_2))) then 
            sample_real_2_o_ap_vld <= ap_const_logic_1;
        else 
            sample_real_2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    sample_real_3_o_assign_proc : process(sample_real_3_i, trunc_ln34_reg_1652, temp_real_q0, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_3))) then 
            sample_real_3_o <= temp_real_q0;
        else 
            sample_real_3_o <= sample_real_3_i;
        end if; 
    end process;


    sample_real_3_o_ap_vld_assign_proc : process(trunc_ln34_reg_1652, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_3))) then 
            sample_real_3_o_ap_vld <= ap_const_logic_1;
        else 
            sample_real_3_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    sample_real_4_o_assign_proc : process(sample_real_4_i, trunc_ln34_reg_1652, temp_real_q0, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_4))) then 
            sample_real_4_o <= temp_real_q0;
        else 
            sample_real_4_o <= sample_real_4_i;
        end if; 
    end process;


    sample_real_4_o_ap_vld_assign_proc : process(trunc_ln34_reg_1652, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_4))) then 
            sample_real_4_o_ap_vld <= ap_const_logic_1;
        else 
            sample_real_4_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    sample_real_5_o_assign_proc : process(sample_real_5_i, trunc_ln34_reg_1652, temp_real_q0, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_5))) then 
            sample_real_5_o <= temp_real_q0;
        else 
            sample_real_5_o <= sample_real_5_i;
        end if; 
    end process;


    sample_real_5_o_ap_vld_assign_proc : process(trunc_ln34_reg_1652, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_5))) then 
            sample_real_5_o_ap_vld <= ap_const_logic_1;
        else 
            sample_real_5_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    sample_real_6_o_assign_proc : process(sample_real_6_i, trunc_ln34_reg_1652, temp_real_q0, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_6))) then 
            sample_real_6_o <= temp_real_q0;
        else 
            sample_real_6_o <= sample_real_6_i;
        end if; 
    end process;


    sample_real_6_o_ap_vld_assign_proc : process(trunc_ln34_reg_1652, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_6))) then 
            sample_real_6_o_ap_vld <= ap_const_logic_1;
        else 
            sample_real_6_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    sample_real_7_o_assign_proc : process(sample_real_7_i, trunc_ln34_reg_1652, temp_real_q0, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_7))) then 
            sample_real_7_o <= temp_real_q0;
        else 
            sample_real_7_o <= sample_real_7_i;
        end if; 
    end process;


    sample_real_7_o_ap_vld_assign_proc : process(trunc_ln34_reg_1652, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) and (trunc_ln34_reg_1652 = ap_const_lv3_7))) then 
            sample_real_7_o_ap_vld <= ap_const_logic_1;
        else 
            sample_real_7_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    temp_imag_address0_assign_proc : process(ap_CS_fsm_state81, ap_enable_reg_pp0_iter77, ap_block_pp0_stage0, zext_ln18_fu_1035_p1, zext_ln34_fu_1053_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            temp_imag_address0 <= zext_ln34_fu_1053_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter77 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            temp_imag_address0 <= zext_ln18_fu_1035_p1(3 - 1 downto 0);
        else 
            temp_imag_address0 <= "XXX";
        end if; 
    end process;


    temp_imag_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state81, ap_enable_reg_pp0_iter77)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state81) or ((ap_enable_reg_pp0_iter77 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            temp_imag_ce0 <= ap_const_logic_1;
        else 
            temp_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_imag_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln16_reg_1159_pp0_iter76_reg, ap_enable_reg_pp0_iter77)
    begin
        if (((icmp_ln16_reg_1159_pp0_iter76_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter77 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            temp_imag_we0 <= ap_const_logic_1;
        else 
            temp_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_real_address0_assign_proc : process(ap_CS_fsm_state81, ap_enable_reg_pp0_iter77, ap_block_pp0_stage0, zext_ln18_fu_1035_p1, zext_ln34_fu_1053_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            temp_real_address0 <= zext_ln34_fu_1053_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter77 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            temp_real_address0 <= zext_ln18_fu_1035_p1(3 - 1 downto 0);
        else 
            temp_real_address0 <= "XXX";
        end if; 
    end process;


    temp_real_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state81, ap_enable_reg_pp0_iter77)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state81) or ((ap_enable_reg_pp0_iter77 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            temp_real_ce0 <= ap_const_logic_1;
        else 
            temp_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_real_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln16_reg_1159_pp0_iter76_reg, ap_enable_reg_pp0_iter77)
    begin
        if (((icmp_ln16_reg_1159_pp0_iter76_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter77 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            temp_real_we0 <= ap_const_logic_1;
        else 
            temp_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln34_fu_1059_p1 <= i_1_reg_400(3 - 1 downto 0);
    zext_ln18_fu_1035_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_388_pp0_iter76_reg),64));
    zext_ln34_fu_1053_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_400),64));
end behav;
