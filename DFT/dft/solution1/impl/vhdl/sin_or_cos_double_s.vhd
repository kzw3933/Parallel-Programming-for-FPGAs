-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sin_or_cos_double_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    t_in : IN STD_LOGIC_VECTOR (63 downto 0);
    do_cos : IN STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of sin_or_cos_double_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_44D : STD_LOGIC_VECTOR (10 downto 0) := "10001001101";
    constant ap_const_lv11_4A : STD_LOGIC_VECTOR (10 downto 0) := "00001001010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_A6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100110";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101001";
    constant ap_const_lv11_403 : STD_LOGIC_VECTOR (10 downto 0) := "10000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv124_0 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv63_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (62 downto 0) := "111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv12_3FF : STD_LOGIC_VECTOR (11 downto 0) := "001111111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ref_4oPi_table_256_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_4oPi_table_256_V_ce0 : STD_LOGIC;
    signal ref_4oPi_table_256_V_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal fourth_order_double_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_4_ce0 : STD_LOGIC;
    signal fourth_order_double_4_q0 : STD_LOGIC_VECTOR (58 downto 0);
    signal fourth_order_double_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_5_ce0 : STD_LOGIC;
    signal fourth_order_double_5_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal fourth_order_double_6_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_6_ce0 : STD_LOGIC;
    signal fourth_order_double_6_q0 : STD_LOGIC_VECTOR (43 downto 0);
    signal fourth_order_double_7_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_7_ce0 : STD_LOGIC;
    signal fourth_order_double_7_q0 : STD_LOGIC_VECTOR (32 downto 0);
    signal fourth_order_double_s_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_s_ce0 : STD_LOGIC;
    signal fourth_order_double_s_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal do_cos_read_reg_1529 : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1529_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1529_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1529_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1529_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1529_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1529_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1529_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1529_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1529_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1529_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1529_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1529_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1536 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1536_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1536_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1536_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1536_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_fu_320_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_V_reg_1542 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_V_reg_1542_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_V_reg_1542_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_V_reg_1542_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_V_1_fu_330_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_V_1_reg_1549 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_V_1_reg_1549_pp0_iter1_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal closepath_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1555 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1555_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1555_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1555_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln601_fu_369_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln601_reg_1566 : STD_LOGIC_VECTOR (6 downto 0);
    signal ret_V_14_reg_1571 : STD_LOGIC_VECTOR (169 downto 0);
    signal icmp_ln833_1_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_1_reg_1586 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_1_reg_1586_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_1_reg_1586_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_1_reg_1586_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_1_reg_1586_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_1_reg_1586_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_1_reg_1586_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_1_reg_1586_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_1_reg_1586_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_1_reg_1586_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_1_reg_1586_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_36_reg_1592 : STD_LOGIC_VECTOR (123 downto 0);
    signal trunc_ln_i_reg_1598 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_37_fu_449_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_37_reg_1603 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_7_fu_464_p3 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Val2_7_reg_1609 : STD_LOGIC_VECTOR (123 downto 0);
    signal Mx_zeros_V_fu_515_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal Mx_zeros_V_reg_1614 : STD_LOGIC_VECTOR (5 downto 0);
    signal Ex_V_fu_523_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_1619 : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_1619_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_1619_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_1619_pp0_iter7_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_1619_pp0_iter8_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_1619_pp0_iter9_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_1619_pp0_iter10_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_1619_pp0_iter11_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_1619_pp0_iter12_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_reg_1625 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_reg_1631 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_reg_1631_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_reg_1631_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_reg_1631_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_reg_1631_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_reg_1631_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_reg_1631_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_reg_1631_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_reg_1631_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_2_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_2_reg_1637 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_2_reg_1637_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_2_reg_1637_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_2_reg_1637_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_2_reg_1637_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_2_reg_1637_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_2_reg_1637_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_2_reg_1637_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_2_reg_1637_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal Mx_V_fu_555_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1645 : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1645_pp0_iter6_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1645_pp0_iter7_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1645_pp0_iter8_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal cos_basis_fu_635_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1650 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1650_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1650_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1650_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1650_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1650_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1650_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1650_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal B_V_fu_652_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal B_V_reg_1656 : STD_LOGIC_VECTOR (55 downto 0);
    signal B_V_reg_1656_pp0_iter6_reg : STD_LOGIC_VECTOR (55 downto 0);
    signal B_trunc_V_reg_1661 : STD_LOGIC_VECTOR (48 downto 0);
    signal zext_ln498_fu_685_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln498_reg_1666 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln300_fu_781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1683 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1683_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1683_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1683_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1683_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1683_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1683_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1683_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_2_fu_801_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_2_reg_1689 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_2_reg_1689_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_2_reg_1689_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_2_reg_1689_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_2_reg_1689_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_2_reg_1689_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_2_reg_1689_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_2_reg_1689_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_5_fu_809_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal r_V_5_reg_1694 : STD_LOGIC_VECTOR (97 downto 0);
    signal B_squared_V_reg_1699 : STD_LOGIC_VECTOR (48 downto 0);
    signal fourth_order_double_10_reg_1710 : STD_LOGIC_VECTOR (51 downto 0);
    signal fourth_order_double_12_reg_1715 : STD_LOGIC_VECTOR (43 downto 0);
    signal B_third_power_V_reg_1730 : STD_LOGIC_VECTOR (41 downto 0);
    signal B_fourth_power_V_reg_1735 : STD_LOGIC_VECTOR (34 downto 0);
    signal p_Val2_15_reg_1740 : STD_LOGIC_VECTOR (58 downto 0);
    signal p_Val2_15_reg_1740_pp0_iter8_reg : STD_LOGIC_VECTOR (58 downto 0);
    signal trunc_ln662_1_reg_1755 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln662_1_reg_1755_pp0_iter8_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal fourth_order_double_14_reg_1760 : STD_LOGIC_VECTOR (32 downto 0);
    signal fourth_order_double_16_reg_1765 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln1_reg_1770 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_3_reg_1775 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_4_reg_1780 : STD_LOGIC_VECTOR (28 downto 0);
    signal select_ln272_1_fu_950_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal select_ln272_1_reg_1785 : STD_LOGIC_VECTOR (62 downto 0);
    signal ret_V_fu_997_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_reg_1790 : STD_LOGIC_VECTOR (63 downto 0);
    signal result_V_reg_1805 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_1_i_reg_1811 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_13_1_i_reg_1816 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_13_2_i_reg_1821 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_i_40_reg_1826 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_i_40_reg_1826_pp0_iter12_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_i_i2_fu_1132_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i2_reg_1831 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i2_i_fu_1150_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i2_i_reg_1837 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i4_i_fu_1168_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i4_i_reg_1843 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1253_fu_1180_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln1253_reg_1850 : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln1253_1_fu_1189_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln1253_1_reg_1855 : STD_LOGIC_VECTOR (62 downto 0);
    signal icmp_ln1452_fu_1195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_reg_1861 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln635_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln114_1_fu_340_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal addr_V_fu_346_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_i_i_fu_354_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln744_fu_373_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal r_V_17_fu_376_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal p_Result_20_fu_392_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_406_p0 : STD_LOGIC_VECTOR (169 downto 0);
    signal grp_fu_406_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_406_p2 : STD_LOGIC_VECTOR (222 downto 0);
    signal add_ln114_fu_437_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln745_fu_455_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal Mx_bits_V_1_fu_459_p2 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Result_i_i_39_fu_471_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal p_Result_21_fu_481_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_8_fu_489_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_22_fu_499_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_fu_507_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln482_fu_442_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln655_fu_519_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1253_fu_547_p1 : STD_LOGIC_VECTOR (123 downto 0);
    signal r_V_18_fu_550_p2 : STD_LOGIC_VECTOR (123 downto 0);
    signal sext_ln1334_fu_565_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_fu_568_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_574_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1311_fu_581_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1287_fu_585_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_fu_589_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_3_fu_595_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_1_fu_608_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln271_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_19_fu_601_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal xor_ln29_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_i_fu_642_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_23_fu_677_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_29_fu_691_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_697_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_735_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln271_fu_773_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln311_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln307_fu_785_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln311_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_20_fu_812_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_20_fu_812_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_20_fu_812_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal r_V_21_fu_831_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_21_fu_831_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_8_fu_828_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal r_V_21_fu_831_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal r_V_22_fu_846_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_22_fu_846_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_22_fu_846_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_868_p0 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_24_fu_880_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_24_fu_880_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal r_V_24_fu_880_p2 : STD_LOGIC_VECTOR (92 downto 0);
    signal grp_fu_868_p2 : STD_LOGIC_VECTOR (107 downto 0);
    signal r_V_25_fu_912_p0 : STD_LOGIC_VECTOR (41 downto 0);
    signal r_V_25_fu_912_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_25_fu_912_p2 : STD_LOGIC_VECTOR (74 downto 0);
    signal r_V_26_fu_934_p0 : STD_LOGIC_VECTOR (34 downto 0);
    signal r_V_26_fu_934_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_26_fu_934_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal t1_V_fu_956_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal lhs_V_1_fu_963_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal rhs_V_2_fu_967_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_16_fu_970_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln657_fu_976_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_17_fu_979_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln657_fu_985_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_18_fu_988_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln657_1_fu_994_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1009_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_1009_p2 : STD_LOGIC_VECTOR (125 downto 0);
    signal tmp_i_fu_1065_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_4_i_fu_1084_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_5_i_fu_1103_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_27_fu_1072_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_25_fu_1122_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_28_fu_1091_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_26_fu_1140_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_29_fu_1110_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_27_fu_1158_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1287_1_fu_1176_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1287_2_fu_1185_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal select_ln272_fu_1200_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_i_fu_1210_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_24_fu_1217_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_28_fu_1229_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln442_fu_1252_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1287_3_fu_1267_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln442_1_fu_1262_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i6_i_fu_1239_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1253_2_fu_1270_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1287_4_fu_1286_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal icmp_ln444_1_fu_1257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln444_fu_1247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln444_fu_1296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln444_2_fu_1275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln444_1_fu_1308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln444_2_fu_1314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln444_fu_1302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln442_2_fu_1280_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln444_fu_1320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln444_fu_1326_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln444_1_fu_1334_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_fu_1206_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln452_fu_1349_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln452_fu_1355_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln444_2_fu_1341_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newexp_fu_1359_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_1365_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln1253_3_fu_1290_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_5_fu_1382_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_6_fu_1392_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_7_fu_1409_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_8_fu_1419_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal select_ln444_3_fu_1401_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal select_ln444_4_fu_1428_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln453_fu_1373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln444_5_fu_1436_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln311_fu_1466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln311_1_fu_1459_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_fu_1378_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln307_fu_1452_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln311_fu_1471_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln300_1_fu_1486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln300_fu_1490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_fu_1504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln300_2_fu_1496_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal significand_V_fu_1444_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal ret_V_12_fu_1479_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_13_fu_1508_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_30_fu_1516_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to12 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1009_p10 : STD_LOGIC_VECTOR (125 downto 0);
    signal grp_fu_406_p00 : STD_LOGIC_VECTOR (222 downto 0);
    signal grp_fu_406_p10 : STD_LOGIC_VECTOR (222 downto 0);
    signal grp_fu_868_p00 : STD_LOGIC_VECTOR (107 downto 0);
    signal r_V_24_fu_880_p00 : STD_LOGIC_VECTOR (92 downto 0);
    signal r_V_25_fu_912_p00 : STD_LOGIC_VECTOR (74 downto 0);
    signal r_V_25_fu_912_p10 : STD_LOGIC_VECTOR (74 downto 0);
    signal r_V_26_fu_934_p00 : STD_LOGIC_VECTOR (59 downto 0);
    signal r_V_26_fu_934_p10 : STD_LOGIC_VECTOR (59 downto 0);

    component dft_mul_170ns_53nhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (169 downto 0);
        din1 : IN STD_LOGIC_VECTOR (52 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (222 downto 0) );
    end component;


    component dft_mux_83_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dft_mux_164_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dft_mul_56ns_52s_ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (55 downto 0);
        din1 : IN STD_LOGIC_VECTOR (51 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (107 downto 0) );
    end component;


    component dft_mul_64s_63ns_jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (62 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (125 downto 0) );
    end component;


    component sin_or_cos_doublebkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component sin_or_cos_doublecud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (58 downto 0) );
    end component;


    component sin_or_cos_doubledEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component sin_or_cos_doubleeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component sin_or_cos_doublefYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component sin_or_cos_doubleg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;



begin
    ref_4oPi_table_256_V_U : component sin_or_cos_doublebkb
    generic map (
        DataWidth => 256,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ref_4oPi_table_256_V_address0,
        ce0 => ref_4oPi_table_256_V_ce0,
        q0 => ref_4oPi_table_256_V_q0);

    fourth_order_double_4_U : component sin_or_cos_doublecud
    generic map (
        DataWidth => 59,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_4_address0,
        ce0 => fourth_order_double_4_ce0,
        q0 => fourth_order_double_4_q0);

    fourth_order_double_5_U : component sin_or_cos_doubledEe
    generic map (
        DataWidth => 52,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_5_address0,
        ce0 => fourth_order_double_5_ce0,
        q0 => fourth_order_double_5_q0);

    fourth_order_double_6_U : component sin_or_cos_doubleeOg
    generic map (
        DataWidth => 44,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_6_address0,
        ce0 => fourth_order_double_6_ce0,
        q0 => fourth_order_double_6_q0);

    fourth_order_double_7_U : component sin_or_cos_doublefYi
    generic map (
        DataWidth => 33,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_7_address0,
        ce0 => fourth_order_double_7_ce0,
        q0 => fourth_order_double_7_q0);

    fourth_order_double_s_U : component sin_or_cos_doubleg8j
    generic map (
        DataWidth => 25,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_s_address0,
        ce0 => fourth_order_double_s_ce0,
        q0 => fourth_order_double_s_q0);

    dft_mul_170ns_53nhbi_U1 : component dft_mul_170ns_53nhbi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 170,
        din1_WIDTH => 53,
        dout_WIDTH => 223)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_406_p0,
        din1 => grp_fu_406_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_406_p2);

    dft_mux_83_1_1_1_U2 : component dft_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_1,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => p_Val2_37_reg_1603,
        dout => tmp_1_fu_608_p10);

    dft_mux_164_1_1_1_U3 : component dft_mux_164_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => ap_const_lv1_0,
        din9 => ap_const_lv1_1,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_0,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_29_fu_691_p3,
        dout => tmp_fu_697_p18);

    dft_mux_164_1_1_1_U4 : component dft_mux_164_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_0,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_1,
        din9 => ap_const_lv1_0,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_0,
        din13 => ap_const_lv1_1,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_29_fu_691_p3,
        dout => tmp_2_fu_735_p18);

    dft_mul_56ns_52s_ibs_U5 : component dft_mul_56ns_52s_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 56,
        din1_WIDTH => 52,
        dout_WIDTH => 108)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_868_p0,
        din1 => fourth_order_double_10_reg_1710,
        ce => ap_const_logic_1,
        dout => grp_fu_868_p2);

    dft_mul_64s_63ns_jbC_U6 : component dft_mul_64s_63ns_jbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 63,
        dout_WIDTH => 126)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ret_V_reg_1790,
        din1 => grp_fu_1009_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1009_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                B_V_reg_1656 <= B_V_fu_652_p1;
                B_V_reg_1656_pp0_iter6_reg <= B_V_reg_1656;
                B_fourth_power_V_reg_1735 <= r_V_22_fu_846_p2(97 downto 63);
                B_squared_V_reg_1699 <= r_V_20_fu_812_p2(97 downto 49);
                B_third_power_V_reg_1730 <= r_V_21_fu_831_p2(97 downto 56);
                B_trunc_V_reg_1661 <= r_V_19_fu_601_p3(55 downto 7);
                Ex_V_reg_1619 <= Ex_V_fu_523_p2;
                Ex_V_reg_1619_pp0_iter10_reg <= Ex_V_reg_1619_pp0_iter9_reg;
                Ex_V_reg_1619_pp0_iter11_reg <= Ex_V_reg_1619_pp0_iter10_reg;
                Ex_V_reg_1619_pp0_iter12_reg <= Ex_V_reg_1619_pp0_iter11_reg;
                Ex_V_reg_1619_pp0_iter5_reg <= Ex_V_reg_1619;
                Ex_V_reg_1619_pp0_iter6_reg <= Ex_V_reg_1619_pp0_iter5_reg;
                Ex_V_reg_1619_pp0_iter7_reg <= Ex_V_reg_1619_pp0_iter6_reg;
                Ex_V_reg_1619_pp0_iter8_reg <= Ex_V_reg_1619_pp0_iter7_reg;
                Ex_V_reg_1619_pp0_iter9_reg <= Ex_V_reg_1619_pp0_iter8_reg;
                Mx_V_reg_1645 <= r_V_18_fu_550_p2(123 downto 61);
                Mx_V_reg_1645_pp0_iter6_reg <= Mx_V_reg_1645;
                Mx_V_reg_1645_pp0_iter7_reg <= Mx_V_reg_1645_pp0_iter6_reg;
                Mx_V_reg_1645_pp0_iter8_reg <= Mx_V_reg_1645_pp0_iter7_reg;
                Mx_zeros_V_reg_1614 <= Mx_zeros_V_fu_515_p1;
                and_ln300_reg_1683 <= and_ln300_fu_781_p2;
                and_ln300_reg_1683_pp0_iter10_reg <= and_ln300_reg_1683_pp0_iter9_reg;
                and_ln300_reg_1683_pp0_iter11_reg <= and_ln300_reg_1683_pp0_iter10_reg;
                and_ln300_reg_1683_pp0_iter12_reg <= and_ln300_reg_1683_pp0_iter11_reg;
                and_ln300_reg_1683_pp0_iter6_reg <= and_ln300_reg_1683;
                and_ln300_reg_1683_pp0_iter7_reg <= and_ln300_reg_1683_pp0_iter6_reg;
                and_ln300_reg_1683_pp0_iter8_reg <= and_ln300_reg_1683_pp0_iter7_reg;
                and_ln300_reg_1683_pp0_iter9_reg <= and_ln300_reg_1683_pp0_iter8_reg;
                closepath_reg_1555_pp0_iter2_reg <= closepath_reg_1555_pp0_iter1_reg;
                closepath_reg_1555_pp0_iter3_reg <= closepath_reg_1555_pp0_iter2_reg;
                cos_basis_reg_1650 <= cos_basis_fu_635_p3;
                cos_basis_reg_1650_pp0_iter10_reg <= cos_basis_reg_1650_pp0_iter9_reg;
                cos_basis_reg_1650_pp0_iter11_reg <= cos_basis_reg_1650_pp0_iter10_reg;
                cos_basis_reg_1650_pp0_iter12_reg <= cos_basis_reg_1650_pp0_iter11_reg;
                cos_basis_reg_1650_pp0_iter6_reg <= cos_basis_reg_1650;
                cos_basis_reg_1650_pp0_iter7_reg <= cos_basis_reg_1650_pp0_iter6_reg;
                cos_basis_reg_1650_pp0_iter8_reg <= cos_basis_reg_1650_pp0_iter7_reg;
                cos_basis_reg_1650_pp0_iter9_reg <= cos_basis_reg_1650_pp0_iter8_reg;
                do_cos_read_reg_1529_pp0_iter10_reg <= do_cos_read_reg_1529_pp0_iter9_reg;
                do_cos_read_reg_1529_pp0_iter11_reg <= do_cos_read_reg_1529_pp0_iter10_reg;
                do_cos_read_reg_1529_pp0_iter12_reg <= do_cos_read_reg_1529_pp0_iter11_reg;
                do_cos_read_reg_1529_pp0_iter2_reg <= do_cos_read_reg_1529_pp0_iter1_reg;
                do_cos_read_reg_1529_pp0_iter3_reg <= do_cos_read_reg_1529_pp0_iter2_reg;
                do_cos_read_reg_1529_pp0_iter4_reg <= do_cos_read_reg_1529_pp0_iter3_reg;
                do_cos_read_reg_1529_pp0_iter5_reg <= do_cos_read_reg_1529_pp0_iter4_reg;
                do_cos_read_reg_1529_pp0_iter6_reg <= do_cos_read_reg_1529_pp0_iter5_reg;
                do_cos_read_reg_1529_pp0_iter7_reg <= do_cos_read_reg_1529_pp0_iter6_reg;
                do_cos_read_reg_1529_pp0_iter8_reg <= do_cos_read_reg_1529_pp0_iter7_reg;
                do_cos_read_reg_1529_pp0_iter9_reg <= do_cos_read_reg_1529_pp0_iter8_reg;
                fourth_order_double_10_reg_1710 <= fourth_order_double_5_q0;
                fourth_order_double_12_reg_1715 <= fourth_order_double_6_q0;
                fourth_order_double_14_reg_1760 <= fourth_order_double_7_q0;
                fourth_order_double_16_reg_1765 <= fourth_order_double_s_q0;
                icmp_ln1452_reg_1861 <= icmp_ln1452_fu_1195_p2;
                icmp_ln833_1_reg_1586 <= icmp_ln833_1_fu_412_p2;
                icmp_ln833_1_reg_1586_pp0_iter10_reg <= icmp_ln833_1_reg_1586_pp0_iter9_reg;
                icmp_ln833_1_reg_1586_pp0_iter11_reg <= icmp_ln833_1_reg_1586_pp0_iter10_reg;
                icmp_ln833_1_reg_1586_pp0_iter12_reg <= icmp_ln833_1_reg_1586_pp0_iter11_reg;
                icmp_ln833_1_reg_1586_pp0_iter3_reg <= icmp_ln833_1_reg_1586;
                icmp_ln833_1_reg_1586_pp0_iter4_reg <= icmp_ln833_1_reg_1586_pp0_iter3_reg;
                icmp_ln833_1_reg_1586_pp0_iter5_reg <= icmp_ln833_1_reg_1586_pp0_iter4_reg;
                icmp_ln833_1_reg_1586_pp0_iter6_reg <= icmp_ln833_1_reg_1586_pp0_iter5_reg;
                icmp_ln833_1_reg_1586_pp0_iter7_reg <= icmp_ln833_1_reg_1586_pp0_iter6_reg;
                icmp_ln833_1_reg_1586_pp0_iter8_reg <= icmp_ln833_1_reg_1586_pp0_iter7_reg;
                icmp_ln833_1_reg_1586_pp0_iter9_reg <= icmp_ln833_1_reg_1586_pp0_iter8_reg;
                icmp_ln833_2_reg_1637 <= icmp_ln833_2_fu_542_p2;
                icmp_ln833_2_reg_1637_pp0_iter10_reg <= icmp_ln833_2_reg_1637_pp0_iter9_reg;
                icmp_ln833_2_reg_1637_pp0_iter11_reg <= icmp_ln833_2_reg_1637_pp0_iter10_reg;
                icmp_ln833_2_reg_1637_pp0_iter12_reg <= icmp_ln833_2_reg_1637_pp0_iter11_reg;
                icmp_ln833_2_reg_1637_pp0_iter5_reg <= icmp_ln833_2_reg_1637;
                icmp_ln833_2_reg_1637_pp0_iter6_reg <= icmp_ln833_2_reg_1637_pp0_iter5_reg;
                icmp_ln833_2_reg_1637_pp0_iter7_reg <= icmp_ln833_2_reg_1637_pp0_iter6_reg;
                icmp_ln833_2_reg_1637_pp0_iter8_reg <= icmp_ln833_2_reg_1637_pp0_iter7_reg;
                icmp_ln833_2_reg_1637_pp0_iter9_reg <= icmp_ln833_2_reg_1637_pp0_iter8_reg;
                icmp_ln833_reg_1631 <= icmp_ln833_fu_537_p2;
                icmp_ln833_reg_1631_pp0_iter10_reg <= icmp_ln833_reg_1631_pp0_iter9_reg;
                icmp_ln833_reg_1631_pp0_iter11_reg <= icmp_ln833_reg_1631_pp0_iter10_reg;
                icmp_ln833_reg_1631_pp0_iter12_reg <= icmp_ln833_reg_1631_pp0_iter11_reg;
                icmp_ln833_reg_1631_pp0_iter5_reg <= icmp_ln833_reg_1631;
                icmp_ln833_reg_1631_pp0_iter6_reg <= icmp_ln833_reg_1631_pp0_iter5_reg;
                icmp_ln833_reg_1631_pp0_iter7_reg <= icmp_ln833_reg_1631_pp0_iter6_reg;
                icmp_ln833_reg_1631_pp0_iter8_reg <= icmp_ln833_reg_1631_pp0_iter7_reg;
                icmp_ln833_reg_1631_pp0_iter9_reg <= icmp_ln833_reg_1631_pp0_iter8_reg;
                isNeg_reg_1625 <= Ex_V_fu_523_p2(10 downto 10);
                p_Repl2_2_reg_1689 <= p_Repl2_2_fu_801_p3;
                p_Repl2_2_reg_1689_pp0_iter10_reg <= p_Repl2_2_reg_1689_pp0_iter9_reg;
                p_Repl2_2_reg_1689_pp0_iter11_reg <= p_Repl2_2_reg_1689_pp0_iter10_reg;
                p_Repl2_2_reg_1689_pp0_iter12_reg <= p_Repl2_2_reg_1689_pp0_iter11_reg;
                p_Repl2_2_reg_1689_pp0_iter6_reg <= p_Repl2_2_reg_1689;
                p_Repl2_2_reg_1689_pp0_iter7_reg <= p_Repl2_2_reg_1689_pp0_iter6_reg;
                p_Repl2_2_reg_1689_pp0_iter8_reg <= p_Repl2_2_reg_1689_pp0_iter7_reg;
                p_Repl2_2_reg_1689_pp0_iter9_reg <= p_Repl2_2_reg_1689_pp0_iter8_reg;
                p_Result_13_1_i_reg_1816 <= grp_fu_1009_p2(109 downto 94);
                p_Result_13_2_i_reg_1821 <= grp_fu_1009_p2(93 downto 78);
                p_Result_1_i_reg_1811 <= grp_fu_1009_p2(125 downto 110);
                p_Result_i_40_reg_1826 <= grp_fu_1009_p2(77 downto 63);
                p_Result_i_40_reg_1826_pp0_iter12_reg <= p_Result_i_40_reg_1826;
                p_Result_s_reg_1536_pp0_iter2_reg <= p_Result_s_reg_1536_pp0_iter1_reg;
                p_Result_s_reg_1536_pp0_iter3_reg <= p_Result_s_reg_1536_pp0_iter2_reg;
                p_Result_s_reg_1536_pp0_iter4_reg <= p_Result_s_reg_1536_pp0_iter3_reg;
                p_Val2_15_reg_1740 <= fourth_order_double_4_q0;
                p_Val2_15_reg_1740_pp0_iter8_reg <= p_Val2_15_reg_1740;
                p_Val2_36_reg_1592 <= grp_fu_406_p2(166 downto 43);
                p_Val2_37_reg_1603 <= p_Val2_37_fu_449_p3;
                p_Val2_7_reg_1609 <= p_Val2_7_fu_464_p3;
                    r_V_5_reg_1694(48 downto 0) <= r_V_5_fu_809_p1(48 downto 0);
                result_V_reg_1805 <= grp_fu_1009_p2(125 downto 63);
                ret_V_reg_1790 <= ret_V_fu_997_p2;
                select_ln272_1_reg_1785 <= select_ln272_1_fu_950_p3;
                shl_ln1253_1_reg_1855 <= shl_ln1253_1_fu_1189_p2;
                shl_ln1253_reg_1850 <= shl_ln1253_fu_1180_p2;
                tmp_3_reg_1775 <= r_V_25_fu_912_p2(74 downto 38);
                tmp_4_reg_1780 <= r_V_26_fu_934_p2(59 downto 31);
                tmp_V_reg_1542_pp0_iter2_reg <= tmp_V_reg_1542_pp0_iter1_reg;
                tmp_V_reg_1542_pp0_iter3_reg <= tmp_V_reg_1542_pp0_iter2_reg;
                tmp_i2_i_reg_1837 <= tmp_i2_i_fu_1150_p3;
                tmp_i4_i_reg_1843 <= tmp_i4_i_fu_1168_p3;
                tmp_i_i2_reg_1831 <= tmp_i_i2_fu_1132_p3;
                trunc_ln1_reg_1770 <= grp_fu_868_p2(107 downto 52);
                trunc_ln662_1_reg_1755 <= r_V_24_fu_880_p2(92 downto 45);
                trunc_ln662_1_reg_1755_pp0_iter8_reg <= trunc_ln662_1_reg_1755;
                    zext_ln498_reg_1666(7 downto 0) <= zext_ln498_fu_685_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                closepath_reg_1555 <= closepath_fu_334_p2;
                closepath_reg_1555_pp0_iter1_reg <= closepath_reg_1555;
                do_cos_read_reg_1529 <= (0=>do_cos, others=>'-');
                do_cos_read_reg_1529_pp0_iter1_reg <= do_cos_read_reg_1529;
                p_Result_s_reg_1536 <= p_Val2_s_fu_308_p1(63 downto 63);
                p_Result_s_reg_1536_pp0_iter1_reg <= p_Result_s_reg_1536;
                ret_V_14_reg_1571 <= r_V_17_fu_376_p2(255 downto 86);
                tmp_V_1_reg_1549 <= tmp_V_1_fu_330_p1;
                tmp_V_1_reg_1549_pp0_iter1_reg <= tmp_V_1_reg_1549;
                tmp_V_reg_1542 <= p_Val2_s_fu_308_p1(62 downto 52);
                tmp_V_reg_1542_pp0_iter1_reg <= tmp_V_reg_1542;
                trunc_ln601_reg_1566 <= trunc_ln601_fu_369_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (closepath_reg_1555_pp0_iter2_reg = ap_const_lv1_0))) then
                trunc_ln_i_reg_1598 <= grp_fu_406_p2(169 downto 167);
            end if;
        end if;
    end process;
    zext_ln498_reg_1666(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    r_V_5_reg_1694(97 downto 49) <= "0000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    B_V_fu_652_p1 <= r_V_19_fu_601_p3(56 - 1 downto 0);
    Ex_V_fu_523_p2 <= std_logic_vector(unsigned(select_ln482_fu_442_p3) - unsigned(zext_ln655_fu_519_p1));
    Mx_V_fu_555_p4 <= r_V_18_fu_550_p2(123 downto 61);
    Mx_bits_V_1_fu_459_p2 <= std_logic_vector(unsigned(ap_const_lv124_0) - unsigned(p_Val2_36_reg_1592));
    Mx_zeros_V_fu_515_p1 <= tmp_i_i_fu_507_p3(6 - 1 downto 0);
    add_ln114_1_fu_340_p2 <= std_logic_vector(signed(ap_const_lv11_44D) + signed(tmp_V_fu_320_p4));
    add_ln114_fu_437_p2 <= std_logic_vector(signed(ap_const_lv11_403) + signed(tmp_V_reg_1542_pp0_iter3_reg));
    add_ln442_1_fu_1262_p2 <= std_logic_vector(unsigned(add_ln442_fu_1252_p2) + unsigned(tmp_i4_i_reg_1843));
    add_ln442_2_fu_1280_p2 <= std_logic_vector(unsigned(add_ln442_1_fu_1262_p2) + unsigned(tmp_i6_i_fu_1239_p3));
    add_ln442_fu_1252_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) + unsigned(tmp_i2_i_reg_1837));
    add_ln452_fu_1349_p2 <= std_logic_vector(unsigned(ap_const_lv12_3FF) + unsigned(rhs_V_fu_1206_p1));
    addr_V_fu_346_p3 <= 
        ap_const_lv11_4A when (closepath_fu_334_p2(0) = '1') else 
        add_ln114_1_fu_340_p2;
    and_ln300_1_fu_1486_p2 <= (icmp_ln833_reg_1631_pp0_iter12_reg and icmp_ln833_1_reg_1586_pp0_iter12_reg);
    and_ln300_fu_781_p2 <= (icmp_ln833_reg_1631 and icmp_ln833_1_reg_1586_pp0_iter4_reg);
    and_ln307_fu_785_p2 <= (xor_ln29_fu_666_p2 and p_Result_s_reg_1536_pp0_iter4_reg);
    and_ln311_fu_795_p2 <= (xor_ln311_fu_790_p2 and select_ln271_fu_773_p3);
    and_ln444_1_fu_1308_p2 <= (icmp_ln444_2_fu_1275_p2 and icmp_ln444_1_fu_1257_p2);
    and_ln444_2_fu_1314_p2 <= (icmp_ln444_fu_1247_p2 and and_ln444_1_fu_1308_p2);
    and_ln444_fu_1302_p2 <= (xor_ln444_fu_1296_p2 and icmp_ln444_fu_1247_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to12_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to12 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to12)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to12 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_Result_30_fu_1516_p4;
    closepath_fu_334_p2 <= "1" when (unsigned(tmp_V_fu_320_p4) < unsigned(ap_const_lv11_3FE)) else "0";
    cos_basis_fu_635_p3 <= 
        xor_ln271_fu_629_p2 when (do_cos_read_reg_1529_pp0_iter4_reg(0) = '1') else 
        tmp_1_fu_608_p10;
    empty_fu_1378_p1 <= newexp_fu_1359_p2(11 - 1 downto 0);
    fourth_order_double_4_address0 <= zext_ln498_reg_1666(8 - 1 downto 0);

    fourth_order_double_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            fourth_order_double_4_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_5_address0 <= zext_ln498_fu_685_p1(8 - 1 downto 0);

    fourth_order_double_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            fourth_order_double_5_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_6_address0 <= zext_ln498_fu_685_p1(8 - 1 downto 0);

    fourth_order_double_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            fourth_order_double_6_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_7_address0 <= zext_ln498_reg_1666(8 - 1 downto 0);

    fourth_order_double_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            fourth_order_double_7_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_s_address0 <= zext_ln498_reg_1666(8 - 1 downto 0);

    fourth_order_double_s_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            fourth_order_double_s_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1009_p1 <= grp_fu_1009_p10(63 - 1 downto 0);
    grp_fu_1009_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln272_1_reg_1785),126));
    grp_fu_406_p0 <= grp_fu_406_p00(170 - 1 downto 0);
    grp_fu_406_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_14_reg_1571),223));
    grp_fu_406_p1 <= grp_fu_406_p10(53 - 1 downto 0);
    grp_fu_406_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_20_fu_392_p3),223));
    grp_fu_868_p0 <= grp_fu_868_p00(56 - 1 downto 0);
    grp_fu_868_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_V_reg_1656_pp0_iter6_reg),108));
    icmp_ln1452_fu_1195_p2 <= "1" when (result_V_reg_1805 = ap_const_lv63_0) else "0";
    icmp_ln444_1_fu_1257_p2 <= "1" when (tmp_i2_i_reg_1837 = ap_const_lv32_10) else "0";
    icmp_ln444_2_fu_1275_p2 <= "1" when (tmp_i4_i_reg_1843 = ap_const_lv32_10) else "0";
    icmp_ln444_fu_1247_p2 <= "1" when (tmp_i_i2_reg_1831 = ap_const_lv32_10) else "0";
    icmp_ln833_1_fu_412_p2 <= "1" when (tmp_V_1_reg_1549_pp0_iter1_reg = ap_const_lv52_0) else "0";
    icmp_ln833_2_fu_542_p2 <= "1" when (tmp_V_reg_1542_pp0_iter3_reg = ap_const_lv11_7FF) else "0";
    icmp_ln833_fu_537_p2 <= "1" when (tmp_V_reg_1542_pp0_iter3_reg = ap_const_lv11_0) else "0";
        lhs_V_1_fu_963_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t1_V_fu_956_p3),64));

    newexp_fu_1359_p2 <= std_logic_vector(signed(sext_ln452_fu_1355_p1) - signed(select_ln444_2_fu_1341_p3));
    or_ln300_fu_1504_p2 <= (icmp_ln833_2_reg_1637_pp0_iter12_reg or and_ln300_reg_1683_pp0_iter12_reg);
    or_ln311_fu_1466_p2 <= (or_ln453_fu_1373_p2 or icmp_ln833_2_reg_1637_pp0_iter12_reg);
    or_ln444_fu_1320_p2 <= (and_ln444_fu_1302_p2 or and_ln444_2_fu_1314_p2);
    or_ln453_fu_1373_p2 <= (tmp_11_fu_1365_p3 or icmp_ln1452_reg_1861);
    p_Repl2_2_fu_801_p3 <= 
        and_ln307_fu_785_p2 when (and_ln300_fu_781_p2(0) = '1') else 
        and_ln311_fu_795_p2;
    p_Result_20_fu_392_p3 <= (ap_const_lv1_1 & tmp_V_1_reg_1549_pp0_iter1_reg);
    p_Result_21_fu_481_p3 <= (p_Result_i_i_39_fu_471_p4 & ap_const_lv1_1);
    p_Result_22_fu_499_p3 <= (ap_const_lv2_3 & p_Result_8_fu_489_p4);
    p_Result_23_fu_677_p3 <= (sin_basis_fu_671_p2 & p_Result_i_fu_642_p4);
    p_Result_24_fu_1217_p5 <= (tmp_6_i_fu_1210_p3 & ap_const_lv32_0(15 downto 0));
    
    p_Result_25_fu_1122_p4_proc : process(p_Val2_27_fu_1072_p5)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_25_fu_1122_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_27_fu_1072_p5;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_25_fu_1122_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_25_fu_1122_p4_i) := p_Val2_27_fu_1072_p5(32-1-p_Result_25_fu_1122_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_25_fu_1122_p4 <= resvalue(32-1 downto 0);
    end process;

    
    p_Result_26_fu_1140_p4_proc : process(p_Val2_28_fu_1091_p5)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_26_fu_1140_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_28_fu_1091_p5;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_26_fu_1140_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_26_fu_1140_p4_i) := p_Val2_28_fu_1091_p5(32-1-p_Result_26_fu_1140_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_26_fu_1140_p4 <= resvalue(32-1 downto 0);
    end process;

    
    p_Result_27_fu_1158_p4_proc : process(p_Val2_29_fu_1110_p5)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_27_fu_1158_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Val2_29_fu_1110_p5;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_27_fu_1158_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_27_fu_1158_p4_i) := p_Val2_29_fu_1110_p5(32-1-p_Result_27_fu_1158_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_27_fu_1158_p4 <= resvalue(32-1 downto 0);
    end process;

    
    p_Result_28_fu_1229_p4_proc : process(p_Result_24_fu_1217_p5)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_28_fu_1229_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_24_fu_1217_p5;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_28_fu_1229_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_28_fu_1229_p4_i) := p_Result_24_fu_1217_p5(32-1-p_Result_28_fu_1229_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_28_fu_1229_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_29_fu_691_p3 <= (p_Result_s_reg_1536_pp0_iter4_reg & p_Val2_37_reg_1603);
    p_Result_30_fu_1516_p4 <= ((p_Repl2_2_reg_1689_pp0_iter12_reg & ret_V_12_fu_1479_p3) & ret_V_13_fu_1508_p3);
    
    p_Result_8_fu_489_p4_proc : process(p_Result_21_fu_481_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(62+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(62+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable p_Result_8_fu_489_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(62 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3D(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := p_Result_21_fu_481_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(62-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(62-1-unsigned(ap_const_lv32_3D(6-1 downto 0)));
            for p_Result_8_fu_489_p4_i in 0 to 62-1 loop
                v0_cpy(p_Result_8_fu_489_p4_i) := p_Result_21_fu_481_p3(62-1-p_Result_8_fu_489_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(62-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_8_fu_489_p4 <= resvalue(62-1 downto 0);
    end process;

    p_Result_i_fu_642_p4 <= r_V_19_fu_601_p3(62 downto 56);
    p_Result_i_i_39_fu_471_p4 <= p_Val2_7_fu_464_p3(123 downto 63);
    p_Result_i_i_fu_354_p4 <= addr_V_fu_346_p3(10 downto 7);
    p_Val2_27_fu_1072_p5 <= (tmp_i_fu_1065_p3 & ap_const_lv32_0(14 downto 0));
    p_Val2_28_fu_1091_p5 <= (tmp_4_i_fu_1084_p3 & ap_const_lv32_0(14 downto 0));
    p_Val2_29_fu_1110_p5 <= (tmp_5_i_fu_1103_p3 & ap_const_lv32_0(14 downto 0));
    p_Val2_37_fu_449_p3 <= 
        ap_const_lv3_0 when (closepath_reg_1555_pp0_iter3_reg(0) = '1') else 
        trunc_ln_i_reg_1598;
    p_Val2_7_fu_464_p3 <= 
        Mx_bits_V_1_fu_459_p2 when (trunc_ln745_fu_455_p1(0) = '1') else 
        p_Val2_36_reg_1592;
    p_Val2_s_fu_308_p1 <= t_in;
    r_V_17_fu_376_p2 <= std_logic_vector(shift_left(unsigned(ref_4oPi_table_256_V_q0),to_integer(unsigned('0' & zext_ln744_fu_373_p1(31-1 downto 0)))));
    r_V_18_fu_550_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_7_reg_1609),to_integer(unsigned('0' & zext_ln1253_fu_547_p1(31-1 downto 0)))));
    r_V_19_fu_601_p3 <= 
        r_V_fu_589_p2 when (isNeg_reg_1625(0) = '1') else 
        r_V_3_fu_595_p2;
    r_V_20_fu_812_p0 <= r_V_5_fu_809_p1(49 - 1 downto 0);
    r_V_20_fu_812_p1 <= r_V_5_fu_809_p1(49 - 1 downto 0);
    r_V_20_fu_812_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_20_fu_812_p0) * unsigned(r_V_20_fu_812_p1), 98));
    r_V_21_fu_831_p0 <= r_V_5_reg_1694(49 - 1 downto 0);
    r_V_21_fu_831_p1 <= r_V_8_fu_828_p1(49 - 1 downto 0);
    r_V_21_fu_831_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_21_fu_831_p0) * unsigned(r_V_21_fu_831_p1), 98));
    r_V_22_fu_846_p0 <= r_V_8_fu_828_p1(49 - 1 downto 0);
    r_V_22_fu_846_p1 <= r_V_8_fu_828_p1(49 - 1 downto 0);
    r_V_22_fu_846_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_22_fu_846_p0) * unsigned(r_V_22_fu_846_p1), 98));
    r_V_24_fu_880_p0 <= r_V_24_fu_880_p00(49 - 1 downto 0);
    r_V_24_fu_880_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_squared_V_reg_1699),93));
    r_V_24_fu_880_p1 <= fourth_order_double_12_reg_1715;
    r_V_24_fu_880_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &r_V_24_fu_880_p0) * signed(r_V_24_fu_880_p1))), 93));
    r_V_25_fu_912_p0 <= r_V_25_fu_912_p00(42 - 1 downto 0);
    r_V_25_fu_912_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_third_power_V_reg_1730),75));
    r_V_25_fu_912_p1 <= r_V_25_fu_912_p10(33 - 1 downto 0);
    r_V_25_fu_912_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fourth_order_double_14_reg_1760),75));
    r_V_25_fu_912_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_25_fu_912_p0) * unsigned(r_V_25_fu_912_p1), 75));
    r_V_26_fu_934_p0 <= r_V_26_fu_934_p00(35 - 1 downto 0);
    r_V_26_fu_934_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_fourth_power_V_reg_1735),60));
    r_V_26_fu_934_p1 <= r_V_26_fu_934_p10(25 - 1 downto 0);
    r_V_26_fu_934_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fourth_order_double_16_reg_1765),60));
    r_V_26_fu_934_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_26_fu_934_p0) * unsigned(r_V_26_fu_934_p1), 60));
    r_V_3_fu_595_p2 <= std_logic_vector(shift_left(unsigned(Mx_V_fu_555_p4),to_integer(unsigned('0' & zext_ln1287_fu_585_p1(31-1 downto 0)))));
    r_V_5_fu_809_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_trunc_V_reg_1661),98));
    r_V_8_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_squared_V_reg_1699),98));
    r_V_fu_589_p2 <= std_logic_vector(shift_right(unsigned(Mx_V_fu_555_p4),to_integer(unsigned('0' & zext_ln1287_fu_585_p1(31-1 downto 0)))));
    ref_4oPi_table_256_V_address0 <= zext_ln635_fu_364_p1(4 - 1 downto 0);

    ref_4oPi_table_256_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ref_4oPi_table_256_V_ce0 <= ap_const_logic_1;
        else 
            ref_4oPi_table_256_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_12_fu_1479_p3 <= 
        select_ln307_fu_1452_p3 when (and_ln300_reg_1683_pp0_iter12_reg(0) = '1') else 
        select_ln311_fu_1471_p3;
    ret_V_13_fu_1508_p3 <= 
        select_ln300_2_fu_1496_p3 when (or_ln300_fu_1504_p2(0) = '1') else 
        significand_V_fu_1444_p3;
    ret_V_16_fu_970_p2 <= std_logic_vector(signed(lhs_V_1_fu_963_p1) + signed(rhs_V_2_fu_967_p1));
    ret_V_17_fu_979_p2 <= std_logic_vector(unsigned(ret_V_16_fu_970_p2) + unsigned(sext_ln657_fu_976_p1));
    ret_V_18_fu_988_p2 <= std_logic_vector(unsigned(ret_V_17_fu_979_p2) + unsigned(zext_ln657_fu_985_p1));
    ret_V_fu_997_p2 <= std_logic_vector(unsigned(ret_V_18_fu_988_p2) + unsigned(zext_ln657_1_fu_994_p1));
        rhs_V_2_fu_967_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_reg_1770),64));

        rhs_V_fu_1206_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln272_fu_1200_p3),12));

    select_ln271_fu_773_p3 <= 
        tmp_fu_697_p18 when (cos_basis_fu_635_p3(0) = '1') else 
        tmp_2_fu_735_p18;
    select_ln272_1_fu_950_p3 <= 
        ap_const_lv63_7FFFFFFFFFFFFFFF when (cos_basis_reg_1650_pp0_iter8_reg(0) = '1') else 
        Mx_V_reg_1645_pp0_iter8_reg;
    select_ln272_fu_1200_p3 <= 
        ap_const_lv11_0 when (cos_basis_reg_1650_pp0_iter12_reg(0) = '1') else 
        Ex_V_reg_1619_pp0_iter12_reg;
    select_ln300_2_fu_1496_p3 <= 
        ap_const_lv52_FFFFFFFFFFFFF when (xor_ln300_fu_1490_p2(0) = '1') else 
        ap_const_lv52_0;
    select_ln307_fu_1452_p3 <= 
        ap_const_lv11_3FF when (do_cos_read_reg_1529_pp0_iter12_reg(0) = '1') else 
        ap_const_lv11_0;
    select_ln311_1_fu_1459_p3 <= 
        ap_const_lv11_7FF when (icmp_ln833_2_reg_1637_pp0_iter12_reg(0) = '1') else 
        ap_const_lv11_0;
    select_ln311_fu_1471_p3 <= 
        select_ln311_1_fu_1459_p3 when (or_ln311_fu_1466_p2(0) = '1') else 
        empty_fu_1378_p1;
    select_ln444_1_fu_1334_p3 <= 
        add_ln442_1_fu_1262_p2 when (icmp_ln444_fu_1247_p2(0) = '1') else 
        tmp_i_i2_reg_1831;
    select_ln444_2_fu_1341_p3 <= 
        select_ln444_fu_1326_p3 when (or_ln444_fu_1320_p2(0) = '1') else 
        select_ln444_1_fu_1334_p3;
    select_ln444_3_fu_1401_p3 <= 
        tmp_5_fu_1382_p4 when (and_ln444_2_fu_1314_p2(0) = '1') else 
        tmp_6_fu_1392_p4;
    select_ln444_4_fu_1428_p3 <= 
        tmp_7_fu_1409_p4 when (icmp_ln444_fu_1247_p2(0) = '1') else 
        tmp_8_fu_1419_p4;
    select_ln444_5_fu_1436_p3 <= 
        select_ln444_3_fu_1401_p3 when (or_ln444_fu_1320_p2(0) = '1') else 
        select_ln444_4_fu_1428_p3;
    select_ln444_fu_1326_p3 <= 
        add_ln442_2_fu_1280_p2 when (and_ln444_2_fu_1314_p2(0) = '1') else 
        add_ln442_fu_1252_p2;
    select_ln482_fu_442_p3 <= 
        add_ln114_fu_437_p2 when (closepath_reg_1555_pp0_iter3_reg(0) = '1') else 
        ap_const_lv11_0;
        sext_ln1311_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_574_p3),32));

        sext_ln1334_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_V_reg_1619),12));

        sext_ln452_fu_1355_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln452_fu_1349_p2),32));

        sext_ln657_fu_976_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln662_1_reg_1755_pp0_iter8_reg),64));

    shl_ln1253_1_fu_1189_p2 <= std_logic_vector(shift_left(unsigned(shl_ln1253_fu_1180_p2),to_integer(unsigned('0' & zext_ln1287_2_fu_1185_p1(31-1 downto 0)))));
    shl_ln1253_2_fu_1270_p2 <= std_logic_vector(shift_left(unsigned(shl_ln1253_1_reg_1855),to_integer(unsigned('0' & zext_ln1287_3_fu_1267_p1(31-1 downto 0)))));
    shl_ln1253_3_fu_1290_p2 <= std_logic_vector(shift_left(unsigned(shl_ln1253_2_fu_1270_p2),to_integer(unsigned('0' & zext_ln1287_4_fu_1286_p1(31-1 downto 0)))));
    shl_ln1253_fu_1180_p2 <= std_logic_vector(shift_left(unsigned(result_V_reg_1805),to_integer(unsigned('0' & zext_ln1287_1_fu_1176_p1(31-1 downto 0)))));
    significand_V_fu_1444_p3 <= 
        ap_const_lv52_0 when (or_ln453_fu_1373_p2(0) = '1') else 
        select_ln444_5_fu_1436_p3;
    sin_basis_fu_671_p2 <= (xor_ln29_fu_666_p2 xor tmp_1_fu_608_p10);
    sub_ln1311_fu_568_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(sext_ln1334_fu_565_p1));
    t1_V_fu_956_p3 <= (p_Val2_15_reg_1740_pp0_iter8_reg & ap_const_lv4_0);
    tmp_11_fu_1365_p3 <= newexp_fu_1359_p2(31 downto 31);
    tmp_4_i_fu_1084_p3 <= (p_Result_13_1_i_reg_1816 & ap_const_lv1_1);
    tmp_5_fu_1382_p4 <= shl_ln1253_3_fu_1290_p2(61 downto 10);
    tmp_5_i_fu_1103_p3 <= (p_Result_13_2_i_reg_1821 & ap_const_lv1_1);
    tmp_6_fu_1392_p4 <= shl_ln1253_1_reg_1855(61 downto 10);
    tmp_6_i_fu_1210_p3 <= (p_Result_i_40_reg_1826_pp0_iter12_reg & ap_const_lv1_1);
    tmp_7_fu_1409_p4 <= shl_ln1253_2_fu_1270_p2(61 downto 10);
    tmp_8_fu_1419_p4 <= shl_ln1253_reg_1850(61 downto 10);
    tmp_V_1_fu_330_p1 <= p_Val2_s_fu_308_p1(52 - 1 downto 0);
    tmp_V_fu_320_p4 <= p_Val2_s_fu_308_p1(62 downto 52);
    
    tmp_i2_i_fu_1150_p3_proc : process(p_Result_26_fu_1140_p4)
    begin
        tmp_i2_i_fu_1150_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_26_fu_1140_p4(i) = '1' then
                tmp_i2_i_fu_1150_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    tmp_i4_i_fu_1168_p3_proc : process(p_Result_27_fu_1158_p4)
    begin
        tmp_i4_i_fu_1168_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_27_fu_1158_p4(i) = '1' then
                tmp_i4_i_fu_1168_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    tmp_i6_i_fu_1239_p3_proc : process(p_Result_28_fu_1229_p4)
    begin
        tmp_i6_i_fu_1239_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_28_fu_1229_p4(i) = '1' then
                tmp_i6_i_fu_1239_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    tmp_i_fu_1065_p3 <= (p_Result_1_i_reg_1811 & ap_const_lv1_1);
    
    tmp_i_i2_fu_1132_p3_proc : process(p_Result_25_fu_1122_p4)
    begin
        tmp_i_i2_fu_1132_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_25_fu_1122_p4(i) = '1' then
                tmp_i_i2_fu_1132_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    tmp_i_i_fu_507_p3_proc : process(p_Result_22_fu_499_p3)
    begin
        tmp_i_i_fu_507_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_22_fu_499_p3(i) = '1' then
                tmp_i_i_fu_507_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    trunc_ln601_fu_369_p1 <= addr_V_fu_346_p3(7 - 1 downto 0);
    trunc_ln745_fu_455_p1 <= p_Val2_37_fu_449_p3(1 - 1 downto 0);
    ush_fu_574_p3 <= 
        sub_ln1311_fu_568_p2 when (isNeg_reg_1625(0) = '1') else 
        sext_ln1334_fu_565_p1;
    xor_ln271_fu_629_p2 <= (tmp_1_fu_608_p10 xor ap_const_lv1_1);
    xor_ln29_fu_666_p2 <= (do_cos_read_reg_1529_pp0_iter4_reg xor ap_const_lv1_1);
    xor_ln300_fu_1490_p2 <= (ap_const_lv1_1 xor and_ln300_1_fu_1486_p2);
    xor_ln311_fu_790_p2 <= (icmp_ln833_2_reg_1637 xor ap_const_lv1_1);
    xor_ln444_fu_1296_p2 <= (icmp_ln444_1_fu_1257_p2 xor ap_const_lv1_1);
    zext_ln1253_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_reg_1614),124));
    zext_ln1287_1_fu_1176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i2_fu_1132_p3),63));
    zext_ln1287_2_fu_1185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i2_i_fu_1150_p3),63));
    zext_ln1287_3_fu_1267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i4_i_reg_1843),63));
    zext_ln1287_4_fu_1286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i6_i_fu_1239_p3),63));
    zext_ln1287_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_fu_581_p1),63));
    zext_ln498_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_23_fu_677_p3),64));
    zext_ln635_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i_i_fu_354_p4),64));
    zext_ln655_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_fu_515_p1),11));
    zext_ln657_1_fu_994_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_reg_1780),64));
    zext_ln657_fu_985_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_1775),64));
    zext_ln744_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln601_reg_1566),256));
end behav;
