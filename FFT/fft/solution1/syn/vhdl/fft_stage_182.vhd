-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft_stage_182 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X_R_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_R_5_ce0 : OUT STD_LOGIC;
    X_R_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_I_5_ce0 : OUT STD_LOGIC;
    X_I_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Out_R_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Out_R_6_ce0 : OUT STD_LOGIC;
    Out_R_6_we0 : OUT STD_LOGIC;
    Out_R_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Out_R_6_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Out_R_6_ce1 : OUT STD_LOGIC;
    Out_R_6_we1 : OUT STD_LOGIC;
    Out_R_6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Out_I_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Out_I_6_ce0 : OUT STD_LOGIC;
    Out_I_6_we0 : OUT STD_LOGIC;
    Out_I_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Out_I_6_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Out_I_6_ce1 : OUT STD_LOGIC;
    Out_I_6_we1 : OUT STD_LOGIC;
    Out_I_6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fft_stage_182 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_BDC90FDB : STD_LOGIC_VECTOR (31 downto 0) := "10111101110010010000111111011011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv22_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_267 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal reg_274 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_227_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_282 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln39_fu_296_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln39_reg_352 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal j_fu_306_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_360 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_263_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_365 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_189_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_reg_371 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_189_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_189_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_208_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_208_ap_done : STD_LOGIC;
    signal ap_block_state5_on_subcall_done : BOOLEAN;
    signal grp_sin_or_cos_double_s_fu_208_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i1_reg_376 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_reg_381 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_reg_386 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_260_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_reg_392 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln48_fu_334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln48_reg_400 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln46_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_245_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_416 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_421 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_253_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_427 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln50_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln50_reg_432 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i_7_fu_346_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_7_reg_448 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_237_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_453 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_458 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sin_or_cos_double_s_fu_189_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_189_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_189_do_cos : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_208_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_208_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_208_do_cos : STD_LOGIC;
    signal a_0_reg_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i_reg_168 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_0_reg_179 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_189_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_208_ap_start_reg : STD_LOGIC := '0';
    signal grp_fu_227_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_227_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_233_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_233_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_15_fu_312_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal i_lower_fu_328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_227_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln39_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_227_ce : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_233_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);

    component sin_or_cos_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (63 downto 0);
        do_cos : IN STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fft_faddfsub_32nslbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_fadd_32ns_32nmb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_fmul_32ns_32nncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_fptrunc_64ns_ocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_fpext_32ns_64pcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_sin_or_cos_double_s_fu_189 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_189_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_189_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_189_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_189_ap_ready,
        t_in => x_assign_reg_365,
        do_cos => grp_sin_or_cos_double_s_fu_189_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_189_ap_return);

    grp_sin_or_cos_double_s_fu_208 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_208_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_208_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_208_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_208_ap_ready,
        t_in => x_assign_reg_365,
        do_cos => grp_sin_or_cos_double_s_fu_208_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_208_ap_return);

    fft_faddfsub_32nslbW_U104 : component fft_faddfsub_32nslbW
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_227_p0,
        din1 => grp_fu_227_p1,
        opcode => grp_fu_227_opcode,
        ce => grp_fu_227_ce,
        dout => grp_fu_227_p2);

    fft_faddfsub_32nslbW_U105 : component fft_faddfsub_32nslbW
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_233_p0,
        din1 => grp_fu_233_p1,
        opcode => grp_fu_233_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_233_p2);

    fft_fadd_32ns_32nmb6_U106 : component fft_fadd_32ns_32nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_267,
        din1 => reg_282,
        ce => ap_const_logic_1,
        dout => grp_fu_237_p2);

    fft_fadd_32ns_32nmb6_U107 : component fft_fadd_32ns_32nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_274,
        din1 => reg_289,
        ce => ap_const_logic_1,
        dout => grp_fu_241_p2);

    fft_fmul_32ns_32nncg_U108 : component fft_fmul_32ns_32nncg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_267,
        din1 => c_reg_386,
        ce => ap_const_logic_1,
        dout => grp_fu_245_p2);

    fft_fmul_32ns_32nncg_U109 : component fft_fmul_32ns_32nncg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_274,
        din1 => s_reg_392,
        ce => ap_const_logic_1,
        dout => grp_fu_249_p2);

    fft_fmul_32ns_32nncg_U110 : component fft_fmul_32ns_32nncg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_274,
        din1 => c_reg_386,
        ce => ap_const_logic_1,
        dout => grp_fu_253_p2);

    fft_fptrunc_64ns_ocq_U111 : component fft_fptrunc_64ns_ocq
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i_reg_371,
        ce => ap_const_logic_1,
        dout => grp_fu_257_p1);

    fft_fptrunc_64ns_ocq_U112 : component fft_fptrunc_64ns_ocq
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i1_reg_376,
        ce => ap_const_logic_1,
        dout => grp_fu_260_p1);

    fft_fpext_32ns_64pcA_U113 : component fft_fpext_32ns_64pcA
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_0_reg_156,
        ce => ap_const_logic_1,
        dout => grp_fu_263_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln39_fu_300_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_189_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_189_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_sin_or_cos_double_s_fu_189_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_189_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_189_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_208_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_208_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_sin_or_cos_double_s_fu_208_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_208_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_208_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_0_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln46_fu_322_p2 = ap_const_lv1_0))) then 
                a_0_reg_156 <= a_reg_381;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                a_0_reg_156 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_0_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                i_0_reg_179 <= i_7_reg_448;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_0_reg_179 <= zext_ln39_reg_352;
            end if; 
        end if;
    end process;

    i_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln46_fu_322_p2 = ap_const_lv1_0))) then 
                i_reg_168 <= j_reg_360;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_168 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then
                a_reg_381 <= grp_fu_227_p2;
                tmp_i_i1_reg_376 <= grp_sin_or_cos_double_s_fu_208_ap_return;
                tmp_i_i_reg_371 <= grp_sin_or_cos_double_s_fu_189_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                c_reg_386 <= grp_fu_257_p1;
                s_reg_392 <= grp_fu_260_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                i_7_reg_448 <= i_7_fu_346_p2;
                sext_ln50_reg_432 <= sext_ln50_fu_340_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                j_reg_360 <= j_fu_306_p2;
                    zext_ln39_reg_352(5 downto 0) <= zext_ln39_fu_296_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_267 <= X_R_5_q0;
                reg_274 <= X_I_5_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then
                reg_282 <= grp_fu_227_p2;
                reg_289 <= grp_fu_233_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln46_fu_322_p2 = ap_const_lv1_1))) then
                sext_ln48_reg_400 <= sext_ln48_fu_334_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                tmp_5_reg_458 <= grp_fu_241_p2;
                tmp_6_reg_453 <= grp_fu_237_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_7_reg_416 <= grp_fu_245_p2;
                tmp_8_reg_421 <= grp_fu_249_p2;
                tmp_9_reg_427 <= grp_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                x_assign_reg_365 <= grp_fu_263_p1;
            end if;
        end if;
    end process;
    zext_ln39_reg_352(31 downto 6) <= "00000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_block_state5_on_subcall_done, ap_CS_fsm_state8, icmp_ln46_fu_322_p2, icmp_ln39_fu_300_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln39_fu_300_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln46_fu_322_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Out_I_6_address0 <= sext_ln48_reg_400(10 - 1 downto 0);
    Out_I_6_address1 <= sext_ln50_reg_432(10 - 1 downto 0);

    Out_I_6_ce0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            Out_I_6_ce0 <= ap_const_logic_1;
        else 
            Out_I_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_I_6_ce1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            Out_I_6_ce1 <= ap_const_logic_1;
        else 
            Out_I_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Out_I_6_d0 <= reg_289;
    Out_I_6_d1 <= tmp_5_reg_458;

    Out_I_6_we0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            Out_I_6_we0 <= ap_const_logic_1;
        else 
            Out_I_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_I_6_we1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            Out_I_6_we1 <= ap_const_logic_1;
        else 
            Out_I_6_we1 <= ap_const_logic_0;
        end if; 
    end process;

    Out_R_6_address0 <= sext_ln48_reg_400(10 - 1 downto 0);
    Out_R_6_address1 <= sext_ln50_reg_432(10 - 1 downto 0);

    Out_R_6_ce0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            Out_R_6_ce0 <= ap_const_logic_1;
        else 
            Out_R_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_R_6_ce1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            Out_R_6_ce1 <= ap_const_logic_1;
        else 
            Out_R_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Out_R_6_d0 <= reg_282;
    Out_R_6_d1 <= tmp_6_reg_453;

    Out_R_6_we0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            Out_R_6_we0 <= ap_const_logic_1;
        else 
            Out_R_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_R_6_we1_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            Out_R_6_we1 <= ap_const_logic_1;
        else 
            Out_R_6_we1 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_5_address0_assign_proc : process(sext_ln48_fu_334_p1, ap_CS_fsm_state8, sext_ln50_fu_340_p1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            X_I_5_address0 <= sext_ln50_fu_340_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            X_I_5_address0 <= sext_ln48_fu_334_p1(10 - 1 downto 0);
        else 
            X_I_5_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    X_I_5_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            X_I_5_ce0 <= ap_const_logic_1;
        else 
            X_I_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_5_address0_assign_proc : process(sext_ln48_fu_334_p1, ap_CS_fsm_state8, sext_ln50_fu_340_p1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            X_R_5_address0 <= sext_ln50_fu_340_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            X_R_5_address0 <= sext_ln48_fu_334_p1(10 - 1 downto 0);
        else 
            X_R_5_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    X_R_5_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            X_R_5_ce0 <= ap_const_logic_1;
        else 
            X_R_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state5_on_subcall_done_assign_proc : process(grp_sin_or_cos_double_s_fu_189_ap_done, grp_sin_or_cos_double_s_fu_208_ap_done)
    begin
                ap_block_state5_on_subcall_done <= ((grp_sin_or_cos_double_s_fu_208_ap_done = ap_const_logic_0) or (grp_sin_or_cos_double_s_fu_189_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln39_fu_300_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln39_fu_300_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln39_fu_300_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln39_fu_300_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_227_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_block_state5_on_subcall_done, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state21, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_1 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            grp_fu_227_ce <= ap_const_logic_0;
        else 
            grp_fu_227_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_227_opcode_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state13, ap_CS_fsm_state17, icmp_ln39_fu_300_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_227_opcode <= ap_const_lv2_1;
        elsif (((icmp_ln39_fu_300_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_227_opcode <= ap_const_lv2_0;
        else 
            grp_fu_227_opcode <= "XX";
        end if; 
    end process;


    grp_fu_227_p0_assign_proc : process(reg_267, ap_CS_fsm_state2, tmp_7_reg_416, a_0_reg_156, ap_CS_fsm_state13, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_227_p0 <= reg_267;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_227_p0 <= tmp_7_reg_416;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_227_p0 <= a_0_reg_156;
        else 
            grp_fu_227_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_227_p1_assign_proc : process(reg_282, ap_CS_fsm_state2, tmp_8_reg_421, ap_CS_fsm_state13, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_227_p1 <= reg_282;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_227_p1 <= tmp_8_reg_421;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_227_p1 <= ap_const_lv32_BDC90FDB;
        else 
            grp_fu_227_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_233_opcode_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_233_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_233_opcode <= ap_const_lv2_0;
        else 
            grp_fu_233_opcode <= "XX";
        end if; 
    end process;


    grp_fu_233_p0_assign_proc : process(reg_274, tmp_9_reg_427, ap_CS_fsm_state13, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_233_p0 <= reg_274;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_233_p0 <= tmp_9_reg_427;
        else 
            grp_fu_233_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_233_p1_assign_proc : process(reg_289, tmp_8_reg_421, ap_CS_fsm_state13, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_233_p1 <= reg_289;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_233_p1 <= tmp_8_reg_421;
        else 
            grp_fu_233_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_sin_or_cos_double_s_fu_189_ap_start <= grp_sin_or_cos_double_s_fu_189_ap_start_reg;
    grp_sin_or_cos_double_s_fu_189_do_cos <= ap_const_logic_1;
    grp_sin_or_cos_double_s_fu_208_ap_start <= grp_sin_or_cos_double_s_fu_208_ap_start_reg;
    grp_sin_or_cos_double_s_fu_208_do_cos <= ap_const_logic_0;
    i_7_fu_346_p2 <= std_logic_vector(signed(i_0_reg_179) + signed(ap_const_lv32_40));
    i_lower_fu_328_p2 <= std_logic_vector(signed(i_0_reg_179) + signed(ap_const_lv32_20));
    icmp_ln39_fu_300_p2 <= "1" when (i_reg_168 = ap_const_lv6_20) else "0";
    icmp_ln46_fu_322_p2 <= "1" when (signed(tmp_15_fu_312_p4) < signed(ap_const_lv22_1)) else "0";
    j_fu_306_p2 <= std_logic_vector(unsigned(i_reg_168) + unsigned(ap_const_lv6_1));
        sext_ln48_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_lower_fu_328_p2),64));

        sext_ln50_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_0_reg_179),64));

    tmp_15_fu_312_p4 <= i_0_reg_179(31 downto 10);
    zext_ln39_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_168),32));
end behav;
