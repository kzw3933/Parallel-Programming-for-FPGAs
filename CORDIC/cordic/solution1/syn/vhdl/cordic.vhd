-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cordic is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    theta_V : IN STD_LOGIC_VECTOR (11 downto 0);
    s_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    s_V_ap_vld : OUT STD_LOGIC;
    c_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    c_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of cordic is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cordic,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.882000,HLS_SYN_LAT=33,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=107,HLS_SYN_LUT=209,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv11_200 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_136 : STD_LOGIC_VECTOR (11 downto 0) := "000100110110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cordic_phase_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal cordic_phase_V_ce0 : STD_LOGIC;
    signal cordic_phase_V_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_fu_155_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_319 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_161_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_324 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal current_cos_V_reg_329 : STD_LOGIC_VECTOR (11 downto 0);
    signal current_sin_V_reg_334 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1333_fu_266_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1333_reg_344 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln703_fu_287_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_Val2_4_reg_93 : STD_LOGIC_VECTOR (11 downto 0);
    signal factor_0_reg_103 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_2_reg_114 : STD_LOGIC_VECTOR (11 downto 0);
    signal temp_cos_V_reg_126 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_0_reg_138 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_fu_251_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1116_fu_169_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1118_fu_173_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_fu_179_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_293_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1116_1_fu_212_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1118_1_fu_216_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_1_fu_222_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_302_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln_fu_256_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln703_1_fu_270_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln703_fu_276_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln703_fu_283_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_293_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1118_1_fu_191_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_293_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_302_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_302_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component cordic_mac_mulsubcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (20 downto 0);
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component cordic_mac_muladddEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (20 downto 0);
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component cordic_cordic_phabkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    cordic_phase_V_U : component cordic_cordic_phabkb
    generic map (
        DataWidth => 11,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cordic_phase_V_address0,
        ce0 => cordic_phase_V_ce0,
        q0 => cordic_phase_V_q0);

    cordic_mac_mulsubcud_U1 : component cordic_mac_mulsubcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 13,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_293_p0,
        din1 => r_V_fu_179_p3,
        din2 => grp_fu_293_p2,
        dout => grp_fu_293_p3);

    cordic_mac_muladddEe_U2 : component cordic_mac_muladddEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 13,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_302_p0,
        din1 => r_V_1_fu_222_p3,
        din2 => grp_fu_302_p2,
        dout => grp_fu_302_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    factor_0_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                factor_0_reg_103 <= sext_ln1333_reg_344;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                factor_0_reg_103 <= ap_const_lv11_200;
            end if; 
        end if;
    end process;

    j_0_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_0_reg_138 <= j_reg_319;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_138 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_Val2_2_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_Val2_2_reg_114 <= current_sin_V_reg_334;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_2_reg_114 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    p_Val2_4_reg_93_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_Val2_4_reg_93 <= sub_ln703_fu_287_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_4_reg_93 <= theta_V;
            end if; 
        end if;
    end process;

    temp_cos_V_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                temp_cos_V_reg_126 <= current_cos_V_reg_329;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                temp_cos_V_reg_126 <= ap_const_lv12_136;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_fu_149_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                current_cos_V_reg_329 <= grp_fu_293_p3(20 downto 9);
                current_sin_V_reg_334 <= grp_fu_302_p3(20 downto 9);
                sext_ln1333_reg_344 <= sext_ln1333_fu_266_p1;
                tmp_reg_324 <= p_Val2_4_reg_93(11 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                j_reg_319 <= j_fu_155_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln17_fu_149_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln17_fu_149_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln17_fu_149_p2)
    begin
        if (((icmp_ln17_fu_149_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln17_fu_149_p2)
    begin
        if (((icmp_ln17_fu_149_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_V <= temp_cos_V_reg_126;

    c_V_ap_vld_assign_proc : process(ap_CS_fsm_state2, icmp_ln17_fu_149_p2)
    begin
        if (((icmp_ln17_fu_149_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            c_V_ap_vld <= ap_const_logic_1;
        else 
            c_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    cordic_phase_V_address0 <= zext_ln26_fu_251_p1(4 - 1 downto 0);

    cordic_phase_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cordic_phase_V_ce0 <= ap_const_logic_1;
        else 
            cordic_phase_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_293_p0 <= sext_ln1118_1_fu_191_p1(11 - 1 downto 0);
    grp_fu_293_p2 <= (temp_cos_V_reg_126 & ap_const_lv9_0);
    grp_fu_302_p0 <= sext_ln1118_1_fu_191_p1(11 - 1 downto 0);
    grp_fu_302_p2 <= (p_Val2_2_reg_114 & ap_const_lv9_0);
    icmp_ln17_fu_149_p2 <= "1" when (j_0_reg_138 = ap_const_lv5_10) else "0";
    j_fu_155_p2 <= std_logic_vector(unsigned(j_0_reg_138) + unsigned(ap_const_lv5_1));
    r_V_1_fu_222_p3 <= 
        sub_ln1118_1_fu_216_p2 when (tmp_fu_161_p3(0) = '1') else 
        sext_ln1116_1_fu_212_p1;
    r_V_fu_179_p3 <= 
        sub_ln1118_fu_173_p2 when (tmp_fu_161_p3(0) = '1') else 
        sext_ln1116_fu_169_p1;
    s_V <= p_Val2_2_reg_114;

    s_V_ap_vld_assign_proc : process(ap_CS_fsm_state2, icmp_ln17_fu_149_p2)
    begin
        if (((icmp_ln17_fu_149_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            s_V_ap_vld <= ap_const_logic_1;
        else 
            s_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln703_fu_276_p3 <= 
        sub_ln703_1_fu_270_p2 when (tmp_reg_324(0) = '1') else 
        cordic_phase_V_q0;
        sext_ln1116_1_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_cos_V_reg_126),13));

        sext_ln1116_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_2_reg_114),13));

        sext_ln1118_1_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(factor_0_reg_103),21));

        sext_ln1333_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_256_p4),11));

        sext_ln703_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln703_fu_276_p3),12));

    sub_ln1118_1_fu_216_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(sext_ln1116_1_fu_212_p1));
    sub_ln1118_fu_173_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(sext_ln1116_fu_169_p1));
    sub_ln703_1_fu_270_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(cordic_phase_V_q0));
    sub_ln703_fu_287_p2 <= std_logic_vector(unsigned(p_Val2_4_reg_93) - unsigned(sext_ln703_fu_283_p1));
    tmp_fu_161_p3 <= p_Val2_4_reg_93(11 downto 11);
    trunc_ln_fu_256_p4 <= factor_0_reg_103(10 downto 1);
    zext_ln26_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_138),64));
end behav;
