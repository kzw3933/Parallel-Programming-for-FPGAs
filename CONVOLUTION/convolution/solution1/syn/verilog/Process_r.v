// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Process_r (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_W_ddr_AWVALID,
        m_axi_W_ddr_AWREADY,
        m_axi_W_ddr_AWADDR,
        m_axi_W_ddr_AWID,
        m_axi_W_ddr_AWLEN,
        m_axi_W_ddr_AWSIZE,
        m_axi_W_ddr_AWBURST,
        m_axi_W_ddr_AWLOCK,
        m_axi_W_ddr_AWCACHE,
        m_axi_W_ddr_AWPROT,
        m_axi_W_ddr_AWQOS,
        m_axi_W_ddr_AWREGION,
        m_axi_W_ddr_AWUSER,
        m_axi_W_ddr_WVALID,
        m_axi_W_ddr_WREADY,
        m_axi_W_ddr_WDATA,
        m_axi_W_ddr_WSTRB,
        m_axi_W_ddr_WLAST,
        m_axi_W_ddr_WID,
        m_axi_W_ddr_WUSER,
        m_axi_W_ddr_ARVALID,
        m_axi_W_ddr_ARREADY,
        m_axi_W_ddr_ARADDR,
        m_axi_W_ddr_ARID,
        m_axi_W_ddr_ARLEN,
        m_axi_W_ddr_ARSIZE,
        m_axi_W_ddr_ARBURST,
        m_axi_W_ddr_ARLOCK,
        m_axi_W_ddr_ARCACHE,
        m_axi_W_ddr_ARPROT,
        m_axi_W_ddr_ARQOS,
        m_axi_W_ddr_ARREGION,
        m_axi_W_ddr_ARUSER,
        m_axi_W_ddr_RVALID,
        m_axi_W_ddr_RREADY,
        m_axi_W_ddr_RDATA,
        m_axi_W_ddr_RLAST,
        m_axi_W_ddr_RID,
        m_axi_W_ddr_RUSER,
        m_axi_W_ddr_RRESP,
        m_axi_W_ddr_BVALID,
        m_axi_W_ddr_BREADY,
        m_axi_W_ddr_BRESP,
        m_axi_W_ddr_BID,
        m_axi_W_ddr_BUSER
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_W_ddr_AWVALID;
input   m_axi_W_ddr_AWREADY;
output  [31:0] m_axi_W_ddr_AWADDR;
output  [0:0] m_axi_W_ddr_AWID;
output  [31:0] m_axi_W_ddr_AWLEN;
output  [2:0] m_axi_W_ddr_AWSIZE;
output  [1:0] m_axi_W_ddr_AWBURST;
output  [1:0] m_axi_W_ddr_AWLOCK;
output  [3:0] m_axi_W_ddr_AWCACHE;
output  [2:0] m_axi_W_ddr_AWPROT;
output  [3:0] m_axi_W_ddr_AWQOS;
output  [3:0] m_axi_W_ddr_AWREGION;
output  [0:0] m_axi_W_ddr_AWUSER;
output   m_axi_W_ddr_WVALID;
input   m_axi_W_ddr_WREADY;
output  [31:0] m_axi_W_ddr_WDATA;
output  [3:0] m_axi_W_ddr_WSTRB;
output   m_axi_W_ddr_WLAST;
output  [0:0] m_axi_W_ddr_WID;
output  [0:0] m_axi_W_ddr_WUSER;
output   m_axi_W_ddr_ARVALID;
input   m_axi_W_ddr_ARREADY;
output  [31:0] m_axi_W_ddr_ARADDR;
output  [0:0] m_axi_W_ddr_ARID;
output  [31:0] m_axi_W_ddr_ARLEN;
output  [2:0] m_axi_W_ddr_ARSIZE;
output  [1:0] m_axi_W_ddr_ARBURST;
output  [1:0] m_axi_W_ddr_ARLOCK;
output  [3:0] m_axi_W_ddr_ARCACHE;
output  [2:0] m_axi_W_ddr_ARPROT;
output  [3:0] m_axi_W_ddr_ARQOS;
output  [3:0] m_axi_W_ddr_ARREGION;
output  [0:0] m_axi_W_ddr_ARUSER;
input   m_axi_W_ddr_RVALID;
output   m_axi_W_ddr_RREADY;
input  [31:0] m_axi_W_ddr_RDATA;
input   m_axi_W_ddr_RLAST;
input  [0:0] m_axi_W_ddr_RID;
input  [0:0] m_axi_W_ddr_RUSER;
input  [1:0] m_axi_W_ddr_RRESP;
input   m_axi_W_ddr_BVALID;
output   m_axi_W_ddr_BREADY;
input  [1:0] m_axi_W_ddr_BRESP;
input  [0:0] m_axi_W_ddr_BID;
input  [0:0] m_axi_W_ddr_BUSER;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_W_ddr_ARVALID;
reg m_axi_W_ddr_RREADY;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_Load_W_fu_16_ap_start;
wire    grp_Load_W_fu_16_ap_done;
wire    grp_Load_W_fu_16_ap_idle;
wire    grp_Load_W_fu_16_ap_ready;
wire    grp_Load_W_fu_16_m_axi_W_ddr_AWVALID;
wire   [31:0] grp_Load_W_fu_16_m_axi_W_ddr_AWADDR;
wire   [0:0] grp_Load_W_fu_16_m_axi_W_ddr_AWID;
wire   [31:0] grp_Load_W_fu_16_m_axi_W_ddr_AWLEN;
wire   [2:0] grp_Load_W_fu_16_m_axi_W_ddr_AWSIZE;
wire   [1:0] grp_Load_W_fu_16_m_axi_W_ddr_AWBURST;
wire   [1:0] grp_Load_W_fu_16_m_axi_W_ddr_AWLOCK;
wire   [3:0] grp_Load_W_fu_16_m_axi_W_ddr_AWCACHE;
wire   [2:0] grp_Load_W_fu_16_m_axi_W_ddr_AWPROT;
wire   [3:0] grp_Load_W_fu_16_m_axi_W_ddr_AWQOS;
wire   [3:0] grp_Load_W_fu_16_m_axi_W_ddr_AWREGION;
wire   [0:0] grp_Load_W_fu_16_m_axi_W_ddr_AWUSER;
wire    grp_Load_W_fu_16_m_axi_W_ddr_WVALID;
wire   [31:0] grp_Load_W_fu_16_m_axi_W_ddr_WDATA;
wire   [3:0] grp_Load_W_fu_16_m_axi_W_ddr_WSTRB;
wire    grp_Load_W_fu_16_m_axi_W_ddr_WLAST;
wire   [0:0] grp_Load_W_fu_16_m_axi_W_ddr_WID;
wire   [0:0] grp_Load_W_fu_16_m_axi_W_ddr_WUSER;
wire    grp_Load_W_fu_16_m_axi_W_ddr_ARVALID;
wire   [31:0] grp_Load_W_fu_16_m_axi_W_ddr_ARADDR;
wire   [0:0] grp_Load_W_fu_16_m_axi_W_ddr_ARID;
wire   [31:0] grp_Load_W_fu_16_m_axi_W_ddr_ARLEN;
wire   [2:0] grp_Load_W_fu_16_m_axi_W_ddr_ARSIZE;
wire   [1:0] grp_Load_W_fu_16_m_axi_W_ddr_ARBURST;
wire   [1:0] grp_Load_W_fu_16_m_axi_W_ddr_ARLOCK;
wire   [3:0] grp_Load_W_fu_16_m_axi_W_ddr_ARCACHE;
wire   [2:0] grp_Load_W_fu_16_m_axi_W_ddr_ARPROT;
wire   [3:0] grp_Load_W_fu_16_m_axi_W_ddr_ARQOS;
wire   [3:0] grp_Load_W_fu_16_m_axi_W_ddr_ARREGION;
wire   [0:0] grp_Load_W_fu_16_m_axi_W_ddr_ARUSER;
wire    grp_Load_W_fu_16_m_axi_W_ddr_RREADY;
wire    grp_Load_W_fu_16_m_axi_W_ddr_BREADY;
reg    grp_Load_W_fu_16_ap_start_reg;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 grp_Load_W_fu_16_ap_start_reg = 1'b0;
end

Load_W grp_Load_W_fu_16(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Load_W_fu_16_ap_start),
    .ap_done(grp_Load_W_fu_16_ap_done),
    .ap_idle(grp_Load_W_fu_16_ap_idle),
    .ap_ready(grp_Load_W_fu_16_ap_ready),
    .m_axi_W_ddr_AWVALID(grp_Load_W_fu_16_m_axi_W_ddr_AWVALID),
    .m_axi_W_ddr_AWREADY(1'b0),
    .m_axi_W_ddr_AWADDR(grp_Load_W_fu_16_m_axi_W_ddr_AWADDR),
    .m_axi_W_ddr_AWID(grp_Load_W_fu_16_m_axi_W_ddr_AWID),
    .m_axi_W_ddr_AWLEN(grp_Load_W_fu_16_m_axi_W_ddr_AWLEN),
    .m_axi_W_ddr_AWSIZE(grp_Load_W_fu_16_m_axi_W_ddr_AWSIZE),
    .m_axi_W_ddr_AWBURST(grp_Load_W_fu_16_m_axi_W_ddr_AWBURST),
    .m_axi_W_ddr_AWLOCK(grp_Load_W_fu_16_m_axi_W_ddr_AWLOCK),
    .m_axi_W_ddr_AWCACHE(grp_Load_W_fu_16_m_axi_W_ddr_AWCACHE),
    .m_axi_W_ddr_AWPROT(grp_Load_W_fu_16_m_axi_W_ddr_AWPROT),
    .m_axi_W_ddr_AWQOS(grp_Load_W_fu_16_m_axi_W_ddr_AWQOS),
    .m_axi_W_ddr_AWREGION(grp_Load_W_fu_16_m_axi_W_ddr_AWREGION),
    .m_axi_W_ddr_AWUSER(grp_Load_W_fu_16_m_axi_W_ddr_AWUSER),
    .m_axi_W_ddr_WVALID(grp_Load_W_fu_16_m_axi_W_ddr_WVALID),
    .m_axi_W_ddr_WREADY(1'b0),
    .m_axi_W_ddr_WDATA(grp_Load_W_fu_16_m_axi_W_ddr_WDATA),
    .m_axi_W_ddr_WSTRB(grp_Load_W_fu_16_m_axi_W_ddr_WSTRB),
    .m_axi_W_ddr_WLAST(grp_Load_W_fu_16_m_axi_W_ddr_WLAST),
    .m_axi_W_ddr_WID(grp_Load_W_fu_16_m_axi_W_ddr_WID),
    .m_axi_W_ddr_WUSER(grp_Load_W_fu_16_m_axi_W_ddr_WUSER),
    .m_axi_W_ddr_ARVALID(grp_Load_W_fu_16_m_axi_W_ddr_ARVALID),
    .m_axi_W_ddr_ARREADY(m_axi_W_ddr_ARREADY),
    .m_axi_W_ddr_ARADDR(grp_Load_W_fu_16_m_axi_W_ddr_ARADDR),
    .m_axi_W_ddr_ARID(grp_Load_W_fu_16_m_axi_W_ddr_ARID),
    .m_axi_W_ddr_ARLEN(grp_Load_W_fu_16_m_axi_W_ddr_ARLEN),
    .m_axi_W_ddr_ARSIZE(grp_Load_W_fu_16_m_axi_W_ddr_ARSIZE),
    .m_axi_W_ddr_ARBURST(grp_Load_W_fu_16_m_axi_W_ddr_ARBURST),
    .m_axi_W_ddr_ARLOCK(grp_Load_W_fu_16_m_axi_W_ddr_ARLOCK),
    .m_axi_W_ddr_ARCACHE(grp_Load_W_fu_16_m_axi_W_ddr_ARCACHE),
    .m_axi_W_ddr_ARPROT(grp_Load_W_fu_16_m_axi_W_ddr_ARPROT),
    .m_axi_W_ddr_ARQOS(grp_Load_W_fu_16_m_axi_W_ddr_ARQOS),
    .m_axi_W_ddr_ARREGION(grp_Load_W_fu_16_m_axi_W_ddr_ARREGION),
    .m_axi_W_ddr_ARUSER(grp_Load_W_fu_16_m_axi_W_ddr_ARUSER),
    .m_axi_W_ddr_RVALID(m_axi_W_ddr_RVALID),
    .m_axi_W_ddr_RREADY(grp_Load_W_fu_16_m_axi_W_ddr_RREADY),
    .m_axi_W_ddr_RDATA(m_axi_W_ddr_RDATA),
    .m_axi_W_ddr_RLAST(m_axi_W_ddr_RLAST),
    .m_axi_W_ddr_RID(m_axi_W_ddr_RID),
    .m_axi_W_ddr_RUSER(m_axi_W_ddr_RUSER),
    .m_axi_W_ddr_RRESP(m_axi_W_ddr_RRESP),
    .m_axi_W_ddr_BVALID(1'b0),
    .m_axi_W_ddr_BREADY(grp_Load_W_fu_16_m_axi_W_ddr_BREADY),
    .m_axi_W_ddr_BRESP(2'd0),
    .m_axi_W_ddr_BID(1'd0),
    .m_axi_W_ddr_BUSER(1'd0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Load_W_fu_16_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_Load_W_fu_16_ap_start_reg <= 1'b1;
        end else if ((grp_Load_W_fu_16_ap_ready == 1'b1)) begin
            grp_Load_W_fu_16_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((grp_Load_W_fu_16_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_Load_W_fu_16_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_W_ddr_ARVALID = grp_Load_W_fu_16_m_axi_W_ddr_ARVALID;
    end else begin
        m_axi_W_ddr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_W_ddr_RREADY = grp_Load_W_fu_16_m_axi_W_ddr_RREADY;
    end else begin
        m_axi_W_ddr_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_Load_W_fu_16_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign grp_Load_W_fu_16_ap_start = grp_Load_W_fu_16_ap_start_reg;

assign m_axi_W_ddr_ARADDR = grp_Load_W_fu_16_m_axi_W_ddr_ARADDR;

assign m_axi_W_ddr_ARBURST = grp_Load_W_fu_16_m_axi_W_ddr_ARBURST;

assign m_axi_W_ddr_ARCACHE = grp_Load_W_fu_16_m_axi_W_ddr_ARCACHE;

assign m_axi_W_ddr_ARID = grp_Load_W_fu_16_m_axi_W_ddr_ARID;

assign m_axi_W_ddr_ARLEN = grp_Load_W_fu_16_m_axi_W_ddr_ARLEN;

assign m_axi_W_ddr_ARLOCK = grp_Load_W_fu_16_m_axi_W_ddr_ARLOCK;

assign m_axi_W_ddr_ARPROT = grp_Load_W_fu_16_m_axi_W_ddr_ARPROT;

assign m_axi_W_ddr_ARQOS = grp_Load_W_fu_16_m_axi_W_ddr_ARQOS;

assign m_axi_W_ddr_ARREGION = grp_Load_W_fu_16_m_axi_W_ddr_ARREGION;

assign m_axi_W_ddr_ARSIZE = grp_Load_W_fu_16_m_axi_W_ddr_ARSIZE;

assign m_axi_W_ddr_ARUSER = grp_Load_W_fu_16_m_axi_W_ddr_ARUSER;

assign m_axi_W_ddr_AWADDR = 32'd0;

assign m_axi_W_ddr_AWBURST = 2'd0;

assign m_axi_W_ddr_AWCACHE = 4'd0;

assign m_axi_W_ddr_AWID = 1'd0;

assign m_axi_W_ddr_AWLEN = 32'd0;

assign m_axi_W_ddr_AWLOCK = 2'd0;

assign m_axi_W_ddr_AWPROT = 3'd0;

assign m_axi_W_ddr_AWQOS = 4'd0;

assign m_axi_W_ddr_AWREGION = 4'd0;

assign m_axi_W_ddr_AWSIZE = 3'd0;

assign m_axi_W_ddr_AWUSER = 1'd0;

assign m_axi_W_ddr_AWVALID = 1'b0;

assign m_axi_W_ddr_BREADY = 1'b0;

assign m_axi_W_ddr_WDATA = 32'd0;

assign m_axi_W_ddr_WID = 1'd0;

assign m_axi_W_ddr_WLAST = 1'b0;

assign m_axi_W_ddr_WSTRB = 4'd0;

assign m_axi_W_ddr_WUSER = 1'd0;

assign m_axi_W_ddr_WVALID = 1'b0;

endmodule //Process_r
