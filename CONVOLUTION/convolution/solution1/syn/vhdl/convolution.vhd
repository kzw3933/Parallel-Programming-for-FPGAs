-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolution is
generic (
    C_M_AXI_IN_DDR_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IN_DDR_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IN_DDR_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_DDR_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IN_DDR_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_DDR_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_DDR_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_DDR_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W_DDR_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_W_DDR_ID_WIDTH : INTEGER := 1;
    C_M_AXI_W_DDR_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W_DDR_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_W_DDR_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W_DDR_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W_DDR_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W_DDR_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_DDR_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_OUT_DDR_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_DDR_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_DDR_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUT_DDR_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_DDR_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_DDR_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_DDR_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W_DDR_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_W_DDR_USER_VALUE : INTEGER := 0;
    C_M_AXI_W_DDR_PROT_VALUE : INTEGER := 0;
    C_M_AXI_W_DDR_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_OUT_DDR_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_OUT_DDR_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUT_DDR_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUT_DDR_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_In_ddr_AWVALID : OUT STD_LOGIC;
    m_axi_In_ddr_AWREADY : IN STD_LOGIC;
    m_axi_In_ddr_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_ADDR_WIDTH-1 downto 0);
    m_axi_In_ddr_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_ID_WIDTH-1 downto 0);
    m_axi_In_ddr_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_In_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_In_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_In_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_In_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_In_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_In_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_In_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_In_ddr_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_AWUSER_WIDTH-1 downto 0);
    m_axi_In_ddr_WVALID : OUT STD_LOGIC;
    m_axi_In_ddr_WREADY : IN STD_LOGIC;
    m_axi_In_ddr_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_DATA_WIDTH-1 downto 0);
    m_axi_In_ddr_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_DATA_WIDTH/8-1 downto 0);
    m_axi_In_ddr_WLAST : OUT STD_LOGIC;
    m_axi_In_ddr_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_ID_WIDTH-1 downto 0);
    m_axi_In_ddr_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_WUSER_WIDTH-1 downto 0);
    m_axi_In_ddr_ARVALID : OUT STD_LOGIC;
    m_axi_In_ddr_ARREADY : IN STD_LOGIC;
    m_axi_In_ddr_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_ADDR_WIDTH-1 downto 0);
    m_axi_In_ddr_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_ID_WIDTH-1 downto 0);
    m_axi_In_ddr_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_In_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_In_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_In_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_In_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_In_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_In_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_In_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_In_ddr_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_ARUSER_WIDTH-1 downto 0);
    m_axi_In_ddr_RVALID : IN STD_LOGIC;
    m_axi_In_ddr_RREADY : OUT STD_LOGIC;
    m_axi_In_ddr_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_DATA_WIDTH-1 downto 0);
    m_axi_In_ddr_RLAST : IN STD_LOGIC;
    m_axi_In_ddr_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_ID_WIDTH-1 downto 0);
    m_axi_In_ddr_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_RUSER_WIDTH-1 downto 0);
    m_axi_In_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_In_ddr_BVALID : IN STD_LOGIC;
    m_axi_In_ddr_BREADY : OUT STD_LOGIC;
    m_axi_In_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_In_ddr_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_ID_WIDTH-1 downto 0);
    m_axi_In_ddr_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IN_DDR_BUSER_WIDTH-1 downto 0);
    m_axi_W_ddr_AWVALID : OUT STD_LOGIC;
    m_axi_W_ddr_AWREADY : IN STD_LOGIC;
    m_axi_W_ddr_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DDR_ADDR_WIDTH-1 downto 0);
    m_axi_W_ddr_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DDR_ID_WIDTH-1 downto 0);
    m_axi_W_ddr_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_W_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DDR_AWUSER_WIDTH-1 downto 0);
    m_axi_W_ddr_WVALID : OUT STD_LOGIC;
    m_axi_W_ddr_WREADY : IN STD_LOGIC;
    m_axi_W_ddr_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DDR_DATA_WIDTH-1 downto 0);
    m_axi_W_ddr_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DDR_DATA_WIDTH/8-1 downto 0);
    m_axi_W_ddr_WLAST : OUT STD_LOGIC;
    m_axi_W_ddr_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DDR_ID_WIDTH-1 downto 0);
    m_axi_W_ddr_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DDR_WUSER_WIDTH-1 downto 0);
    m_axi_W_ddr_ARVALID : OUT STD_LOGIC;
    m_axi_W_ddr_ARREADY : IN STD_LOGIC;
    m_axi_W_ddr_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DDR_ADDR_WIDTH-1 downto 0);
    m_axi_W_ddr_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DDR_ID_WIDTH-1 downto 0);
    m_axi_W_ddr_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_W_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DDR_ARUSER_WIDTH-1 downto 0);
    m_axi_W_ddr_RVALID : IN STD_LOGIC;
    m_axi_W_ddr_RREADY : OUT STD_LOGIC;
    m_axi_W_ddr_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_W_DDR_DATA_WIDTH-1 downto 0);
    m_axi_W_ddr_RLAST : IN STD_LOGIC;
    m_axi_W_ddr_RID : IN STD_LOGIC_VECTOR (C_M_AXI_W_DDR_ID_WIDTH-1 downto 0);
    m_axi_W_ddr_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_W_DDR_RUSER_WIDTH-1 downto 0);
    m_axi_W_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ddr_BVALID : IN STD_LOGIC;
    m_axi_W_ddr_BREADY : OUT STD_LOGIC;
    m_axi_W_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ddr_BID : IN STD_LOGIC_VECTOR (C_M_AXI_W_DDR_ID_WIDTH-1 downto 0);
    m_axi_W_ddr_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_W_DDR_BUSER_WIDTH-1 downto 0);
    m_axi_Out_ddr_AWVALID : OUT STD_LOGIC;
    m_axi_Out_ddr_AWREADY : IN STD_LOGIC;
    m_axi_Out_ddr_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_ADDR_WIDTH-1 downto 0);
    m_axi_Out_ddr_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_ID_WIDTH-1 downto 0);
    m_axi_Out_ddr_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_Out_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Out_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Out_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Out_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Out_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_AWUSER_WIDTH-1 downto 0);
    m_axi_Out_ddr_WVALID : OUT STD_LOGIC;
    m_axi_Out_ddr_WREADY : IN STD_LOGIC;
    m_axi_Out_ddr_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_DATA_WIDTH-1 downto 0);
    m_axi_Out_ddr_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_DATA_WIDTH/8-1 downto 0);
    m_axi_Out_ddr_WLAST : OUT STD_LOGIC;
    m_axi_Out_ddr_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_ID_WIDTH-1 downto 0);
    m_axi_Out_ddr_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_WUSER_WIDTH-1 downto 0);
    m_axi_Out_ddr_ARVALID : OUT STD_LOGIC;
    m_axi_Out_ddr_ARREADY : IN STD_LOGIC;
    m_axi_Out_ddr_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_ADDR_WIDTH-1 downto 0);
    m_axi_Out_ddr_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_ID_WIDTH-1 downto 0);
    m_axi_Out_ddr_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_Out_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Out_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Out_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Out_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Out_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_ARUSER_WIDTH-1 downto 0);
    m_axi_Out_ddr_RVALID : IN STD_LOGIC;
    m_axi_Out_ddr_RREADY : OUT STD_LOGIC;
    m_axi_Out_ddr_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_DATA_WIDTH-1 downto 0);
    m_axi_Out_ddr_RLAST : IN STD_LOGIC;
    m_axi_Out_ddr_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_ID_WIDTH-1 downto 0);
    m_axi_Out_ddr_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_RUSER_WIDTH-1 downto 0);
    m_axi_Out_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Out_ddr_BVALID : IN STD_LOGIC;
    m_axi_Out_ddr_BREADY : OUT STD_LOGIC;
    m_axi_Out_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Out_ddr_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_ID_WIDTH-1 downto 0);
    m_axi_Out_ddr_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_DDR_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of convolution is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "convolution,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=793,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=7107,HLS_SYN_LUT=9086,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_M_AXI_IN_DDR_TARGET_ADDR : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_IN_DDR_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_IN_DDR_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_IN_DDR_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal W_ddr_AWREADY : STD_LOGIC;
    signal W_ddr_WREADY : STD_LOGIC;
    signal W_ddr_ARVALID : STD_LOGIC;
    signal W_ddr_ARREADY : STD_LOGIC;
    signal W_ddr_RVALID : STD_LOGIC;
    signal W_ddr_RREADY : STD_LOGIC;
    signal W_ddr_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal W_ddr_RLAST : STD_LOGIC;
    signal W_ddr_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal W_ddr_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal W_ddr_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal W_ddr_BVALID : STD_LOGIC;
    signal W_ddr_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal W_ddr_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal W_ddr_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Out_ddr_AWVALID : STD_LOGIC;
    signal Out_ddr_AWREADY : STD_LOGIC;
    signal Out_ddr_WVALID : STD_LOGIC;
    signal Out_ddr_WREADY : STD_LOGIC;
    signal Out_ddr_ARREADY : STD_LOGIC;
    signal Out_ddr_RVALID : STD_LOGIC;
    signal Out_ddr_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_ddr_RLAST : STD_LOGIC;
    signal Out_ddr_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal Out_ddr_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Out_ddr_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal Out_ddr_BVALID : STD_LOGIC;
    signal Out_ddr_BREADY : STD_LOGIC;
    signal Out_ddr_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal Out_ddr_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal Out_ddr_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Out_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_0_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_0_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_0_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_0_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_0_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_0_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_0_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_0_8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_0_9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_0_10_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_0_11_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_0_12_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_0_13_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_1_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_1_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_1_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_1_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_1_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_1_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_1_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_1_8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_1_9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_1_10_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_1_11_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_1_12_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_1_13_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_2_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_2_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_2_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_2_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_2_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_2_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_2_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_2_8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_2_9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_2_10_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_2_11_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_2_12_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_2_13_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_3_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_3_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_3_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_3_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_3_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_3_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_3_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_3_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_3_8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_3_9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_3_10_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_3_11_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_3_12_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_3_13_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Process_r_fu_254_ap_start : STD_LOGIC;
    signal grp_Process_r_fu_254_ap_done : STD_LOGIC;
    signal grp_Process_r_fu_254_ap_idle : STD_LOGIC;
    signal grp_Process_r_fu_254_ap_ready : STD_LOGIC;
    signal grp_Process_r_fu_254_m_axi_W_ddr_AWVALID : STD_LOGIC;
    signal grp_Process_r_fu_254_m_axi_W_ddr_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Process_r_fu_254_m_axi_W_ddr_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Process_r_fu_254_m_axi_W_ddr_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Process_r_fu_254_m_axi_W_ddr_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Process_r_fu_254_m_axi_W_ddr_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Process_r_fu_254_m_axi_W_ddr_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Process_r_fu_254_m_axi_W_ddr_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Process_r_fu_254_m_axi_W_ddr_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Process_r_fu_254_m_axi_W_ddr_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Process_r_fu_254_m_axi_W_ddr_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Process_r_fu_254_m_axi_W_ddr_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Process_r_fu_254_m_axi_W_ddr_WVALID : STD_LOGIC;
    signal grp_Process_r_fu_254_m_axi_W_ddr_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Process_r_fu_254_m_axi_W_ddr_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Process_r_fu_254_m_axi_W_ddr_WLAST : STD_LOGIC;
    signal grp_Process_r_fu_254_m_axi_W_ddr_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Process_r_fu_254_m_axi_W_ddr_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Process_r_fu_254_m_axi_W_ddr_ARVALID : STD_LOGIC;
    signal grp_Process_r_fu_254_m_axi_W_ddr_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Process_r_fu_254_m_axi_W_ddr_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Process_r_fu_254_m_axi_W_ddr_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Process_r_fu_254_m_axi_W_ddr_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Process_r_fu_254_m_axi_W_ddr_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Process_r_fu_254_m_axi_W_ddr_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Process_r_fu_254_m_axi_W_ddr_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Process_r_fu_254_m_axi_W_ddr_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Process_r_fu_254_m_axi_W_ddr_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Process_r_fu_254_m_axi_W_ddr_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Process_r_fu_254_m_axi_W_ddr_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Process_r_fu_254_m_axi_W_ddr_RREADY : STD_LOGIC;
    signal grp_Process_r_fu_254_m_axi_W_ddr_BREADY : STD_LOGIC;
    signal grp_Offload_Out_fu_260_ap_start : STD_LOGIC;
    signal grp_Offload_Out_fu_260_ap_done : STD_LOGIC;
    signal grp_Offload_Out_fu_260_ap_idle : STD_LOGIC;
    signal grp_Offload_Out_fu_260_ap_ready : STD_LOGIC;
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_AWVALID : STD_LOGIC;
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_WVALID : STD_LOGIC;
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_WLAST : STD_LOGIC;
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_ARVALID : STD_LOGIC;
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_RREADY : STD_LOGIC;
    signal grp_Offload_Out_fu_260_m_axi_Out_ddr_BREADY : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_0_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_0_0_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_0_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_0_1_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_0_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_0_2_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_0_3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_0_3_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_0_4_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_0_4_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_0_5_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_0_5_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_0_6_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_0_6_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_0_7_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_0_7_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_0_8_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_0_8_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_0_9_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_0_9_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_0_10_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_0_10_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_0_11_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_0_11_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_0_12_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_0_12_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_0_13_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_0_13_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_1_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_1_0_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_1_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_1_1_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_1_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_1_2_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_1_3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_1_3_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_1_4_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_1_4_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_1_5_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_1_5_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_1_6_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_1_6_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_1_7_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_1_7_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_1_8_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_1_8_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_1_9_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_1_9_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_1_10_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_1_10_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_1_11_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_1_11_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_1_12_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_1_12_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_1_13_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_1_13_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_2_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_2_0_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_2_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_2_1_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_2_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_2_2_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_2_3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_2_3_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_2_4_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_2_4_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_2_5_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_2_5_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_2_6_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_2_6_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_2_7_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_2_7_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_2_8_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_2_8_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_2_9_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_2_9_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_2_10_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_2_10_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_2_11_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_2_11_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_2_12_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_2_12_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_2_13_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_2_13_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_3_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_3_0_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_3_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_3_1_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_3_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_3_2_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_3_3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_3_3_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_3_4_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_3_4_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_3_5_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_3_5_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_3_6_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_3_6_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_3_7_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_3_7_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_3_8_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_3_8_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_3_9_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_3_9_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_3_10_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_3_10_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_3_11_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_3_11_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_3_12_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_3_12_ce0 : STD_LOGIC;
    signal grp_Offload_Out_fu_260_Out_3_13_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Offload_Out_fu_260_Out_3_13_ce0 : STD_LOGIC;
    signal grp_Process_r_fu_254_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_Offload_Out_fu_260_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component Process_r IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_W_ddr_AWVALID : OUT STD_LOGIC;
        m_axi_W_ddr_AWREADY : IN STD_LOGIC;
        m_axi_W_ddr_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W_ddr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W_ddr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_WVALID : OUT STD_LOGIC;
        m_axi_W_ddr_WREADY : IN STD_LOGIC;
        m_axi_W_ddr_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W_ddr_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W_ddr_WLAST : OUT STD_LOGIC;
        m_axi_W_ddr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_ARVALID : OUT STD_LOGIC;
        m_axi_W_ddr_ARREADY : IN STD_LOGIC;
        m_axi_W_ddr_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W_ddr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W_ddr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_RVALID : IN STD_LOGIC;
        m_axi_W_ddr_RREADY : OUT STD_LOGIC;
        m_axi_W_ddr_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W_ddr_RLAST : IN STD_LOGIC;
        m_axi_W_ddr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W_ddr_BVALID : IN STD_LOGIC;
        m_axi_W_ddr_BREADY : OUT STD_LOGIC;
        m_axi_W_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W_ddr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Offload_Out IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_Out_ddr_AWVALID : OUT STD_LOGIC;
        m_axi_Out_ddr_AWREADY : IN STD_LOGIC;
        m_axi_Out_ddr_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Out_ddr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Out_ddr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Out_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Out_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Out_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Out_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Out_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Out_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Out_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Out_ddr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Out_ddr_WVALID : OUT STD_LOGIC;
        m_axi_Out_ddr_WREADY : IN STD_LOGIC;
        m_axi_Out_ddr_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Out_ddr_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Out_ddr_WLAST : OUT STD_LOGIC;
        m_axi_Out_ddr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Out_ddr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Out_ddr_ARVALID : OUT STD_LOGIC;
        m_axi_Out_ddr_ARREADY : IN STD_LOGIC;
        m_axi_Out_ddr_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Out_ddr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Out_ddr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Out_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Out_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Out_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Out_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Out_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Out_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Out_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Out_ddr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Out_ddr_RVALID : IN STD_LOGIC;
        m_axi_Out_ddr_RREADY : OUT STD_LOGIC;
        m_axi_Out_ddr_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Out_ddr_RLAST : IN STD_LOGIC;
        m_axi_Out_ddr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Out_ddr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Out_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Out_ddr_BVALID : IN STD_LOGIC;
        m_axi_Out_ddr_BREADY : OUT STD_LOGIC;
        m_axi_Out_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Out_ddr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Out_ddr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        Out_0_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_0_0_ce0 : OUT STD_LOGIC;
        Out_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_0_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_0_1_ce0 : OUT STD_LOGIC;
        Out_0_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_0_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_0_2_ce0 : OUT STD_LOGIC;
        Out_0_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_0_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_0_3_ce0 : OUT STD_LOGIC;
        Out_0_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_0_4_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_0_4_ce0 : OUT STD_LOGIC;
        Out_0_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_0_5_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_0_5_ce0 : OUT STD_LOGIC;
        Out_0_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_0_6_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_0_6_ce0 : OUT STD_LOGIC;
        Out_0_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_0_7_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_0_7_ce0 : OUT STD_LOGIC;
        Out_0_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_0_8_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_0_8_ce0 : OUT STD_LOGIC;
        Out_0_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_0_9_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_0_9_ce0 : OUT STD_LOGIC;
        Out_0_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_0_10_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_0_10_ce0 : OUT STD_LOGIC;
        Out_0_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_0_11_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_0_11_ce0 : OUT STD_LOGIC;
        Out_0_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_0_12_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_0_12_ce0 : OUT STD_LOGIC;
        Out_0_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_0_13_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_0_13_ce0 : OUT STD_LOGIC;
        Out_0_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_1_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_1_0_ce0 : OUT STD_LOGIC;
        Out_1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_1_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_1_1_ce0 : OUT STD_LOGIC;
        Out_1_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_1_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_1_2_ce0 : OUT STD_LOGIC;
        Out_1_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_1_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_1_3_ce0 : OUT STD_LOGIC;
        Out_1_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_1_4_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_1_4_ce0 : OUT STD_LOGIC;
        Out_1_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_1_5_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_1_5_ce0 : OUT STD_LOGIC;
        Out_1_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_1_6_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_1_6_ce0 : OUT STD_LOGIC;
        Out_1_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_1_7_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_1_7_ce0 : OUT STD_LOGIC;
        Out_1_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_1_8_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_1_8_ce0 : OUT STD_LOGIC;
        Out_1_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_1_9_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_1_9_ce0 : OUT STD_LOGIC;
        Out_1_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_1_10_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_1_10_ce0 : OUT STD_LOGIC;
        Out_1_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_1_11_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_1_11_ce0 : OUT STD_LOGIC;
        Out_1_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_1_12_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_1_12_ce0 : OUT STD_LOGIC;
        Out_1_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_1_13_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_1_13_ce0 : OUT STD_LOGIC;
        Out_1_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_2_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_2_0_ce0 : OUT STD_LOGIC;
        Out_2_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_2_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_2_1_ce0 : OUT STD_LOGIC;
        Out_2_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_2_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_2_2_ce0 : OUT STD_LOGIC;
        Out_2_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_2_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_2_3_ce0 : OUT STD_LOGIC;
        Out_2_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_2_4_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_2_4_ce0 : OUT STD_LOGIC;
        Out_2_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_2_5_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_2_5_ce0 : OUT STD_LOGIC;
        Out_2_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_2_6_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_2_6_ce0 : OUT STD_LOGIC;
        Out_2_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_2_7_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_2_7_ce0 : OUT STD_LOGIC;
        Out_2_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_2_8_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_2_8_ce0 : OUT STD_LOGIC;
        Out_2_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_2_9_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_2_9_ce0 : OUT STD_LOGIC;
        Out_2_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_2_10_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_2_10_ce0 : OUT STD_LOGIC;
        Out_2_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_2_11_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_2_11_ce0 : OUT STD_LOGIC;
        Out_2_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_2_12_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_2_12_ce0 : OUT STD_LOGIC;
        Out_2_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_2_13_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_2_13_ce0 : OUT STD_LOGIC;
        Out_2_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_3_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_3_0_ce0 : OUT STD_LOGIC;
        Out_3_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_3_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_3_1_ce0 : OUT STD_LOGIC;
        Out_3_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_3_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_3_2_ce0 : OUT STD_LOGIC;
        Out_3_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_3_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_3_3_ce0 : OUT STD_LOGIC;
        Out_3_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_3_4_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_3_4_ce0 : OUT STD_LOGIC;
        Out_3_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_3_5_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_3_5_ce0 : OUT STD_LOGIC;
        Out_3_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_3_6_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_3_6_ce0 : OUT STD_LOGIC;
        Out_3_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_3_7_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_3_7_ce0 : OUT STD_LOGIC;
        Out_3_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_3_8_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_3_8_ce0 : OUT STD_LOGIC;
        Out_3_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_3_9_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_3_9_ce0 : OUT STD_LOGIC;
        Out_3_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_3_10_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_3_10_ce0 : OUT STD_LOGIC;
        Out_3_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_3_11_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_3_11_ce0 : OUT STD_LOGIC;
        Out_3_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_3_12_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_3_12_ce0 : OUT STD_LOGIC;
        Out_3_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_3_13_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Out_3_13_ce0 : OUT STD_LOGIC;
        Out_3_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolution_Out_0_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolution_W_ddr_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component convolution_Out_ddr_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    convolution_W_ddr_m_axi_U : component convolution_W_ddr_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_W_DDR_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_W_DDR_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_W_DDR_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_W_DDR_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_W_DDR_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_W_DDR_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_W_DDR_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_W_DDR_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_W_DDR_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_W_DDR_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_W_DDR_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_W_DDR_CACHE_VALUE)
    port map (
        AWVALID => m_axi_W_ddr_AWVALID,
        AWREADY => m_axi_W_ddr_AWREADY,
        AWADDR => m_axi_W_ddr_AWADDR,
        AWID => m_axi_W_ddr_AWID,
        AWLEN => m_axi_W_ddr_AWLEN,
        AWSIZE => m_axi_W_ddr_AWSIZE,
        AWBURST => m_axi_W_ddr_AWBURST,
        AWLOCK => m_axi_W_ddr_AWLOCK,
        AWCACHE => m_axi_W_ddr_AWCACHE,
        AWPROT => m_axi_W_ddr_AWPROT,
        AWQOS => m_axi_W_ddr_AWQOS,
        AWREGION => m_axi_W_ddr_AWREGION,
        AWUSER => m_axi_W_ddr_AWUSER,
        WVALID => m_axi_W_ddr_WVALID,
        WREADY => m_axi_W_ddr_WREADY,
        WDATA => m_axi_W_ddr_WDATA,
        WSTRB => m_axi_W_ddr_WSTRB,
        WLAST => m_axi_W_ddr_WLAST,
        WID => m_axi_W_ddr_WID,
        WUSER => m_axi_W_ddr_WUSER,
        ARVALID => m_axi_W_ddr_ARVALID,
        ARREADY => m_axi_W_ddr_ARREADY,
        ARADDR => m_axi_W_ddr_ARADDR,
        ARID => m_axi_W_ddr_ARID,
        ARLEN => m_axi_W_ddr_ARLEN,
        ARSIZE => m_axi_W_ddr_ARSIZE,
        ARBURST => m_axi_W_ddr_ARBURST,
        ARLOCK => m_axi_W_ddr_ARLOCK,
        ARCACHE => m_axi_W_ddr_ARCACHE,
        ARPROT => m_axi_W_ddr_ARPROT,
        ARQOS => m_axi_W_ddr_ARQOS,
        ARREGION => m_axi_W_ddr_ARREGION,
        ARUSER => m_axi_W_ddr_ARUSER,
        RVALID => m_axi_W_ddr_RVALID,
        RREADY => m_axi_W_ddr_RREADY,
        RDATA => m_axi_W_ddr_RDATA,
        RLAST => m_axi_W_ddr_RLAST,
        RID => m_axi_W_ddr_RID,
        RUSER => m_axi_W_ddr_RUSER,
        RRESP => m_axi_W_ddr_RRESP,
        BVALID => m_axi_W_ddr_BVALID,
        BREADY => m_axi_W_ddr_BREADY,
        BRESP => m_axi_W_ddr_BRESP,
        BID => m_axi_W_ddr_BID,
        BUSER => m_axi_W_ddr_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => W_ddr_ARVALID,
        I_ARREADY => W_ddr_ARREADY,
        I_ARADDR => grp_Process_r_fu_254_m_axi_W_ddr_ARADDR,
        I_ARID => grp_Process_r_fu_254_m_axi_W_ddr_ARID,
        I_ARLEN => grp_Process_r_fu_254_m_axi_W_ddr_ARLEN,
        I_ARSIZE => grp_Process_r_fu_254_m_axi_W_ddr_ARSIZE,
        I_ARLOCK => grp_Process_r_fu_254_m_axi_W_ddr_ARLOCK,
        I_ARCACHE => grp_Process_r_fu_254_m_axi_W_ddr_ARCACHE,
        I_ARQOS => grp_Process_r_fu_254_m_axi_W_ddr_ARQOS,
        I_ARPROT => grp_Process_r_fu_254_m_axi_W_ddr_ARPROT,
        I_ARUSER => grp_Process_r_fu_254_m_axi_W_ddr_ARUSER,
        I_ARBURST => grp_Process_r_fu_254_m_axi_W_ddr_ARBURST,
        I_ARREGION => grp_Process_r_fu_254_m_axi_W_ddr_ARREGION,
        I_RVALID => W_ddr_RVALID,
        I_RREADY => W_ddr_RREADY,
        I_RDATA => W_ddr_RDATA,
        I_RID => W_ddr_RID,
        I_RUSER => W_ddr_RUSER,
        I_RRESP => W_ddr_RRESP,
        I_RLAST => W_ddr_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => W_ddr_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => W_ddr_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => W_ddr_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => W_ddr_BRESP,
        I_BID => W_ddr_BID,
        I_BUSER => W_ddr_BUSER);

    convolution_Out_ddr_m_axi_U : component convolution_Out_ddr_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUT_DDR_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUT_DDR_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUT_DDR_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUT_DDR_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUT_DDR_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUT_DDR_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUT_DDR_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUT_DDR_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_OUT_DDR_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_OUT_DDR_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUT_DDR_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUT_DDR_CACHE_VALUE)
    port map (
        AWVALID => m_axi_Out_ddr_AWVALID,
        AWREADY => m_axi_Out_ddr_AWREADY,
        AWADDR => m_axi_Out_ddr_AWADDR,
        AWID => m_axi_Out_ddr_AWID,
        AWLEN => m_axi_Out_ddr_AWLEN,
        AWSIZE => m_axi_Out_ddr_AWSIZE,
        AWBURST => m_axi_Out_ddr_AWBURST,
        AWLOCK => m_axi_Out_ddr_AWLOCK,
        AWCACHE => m_axi_Out_ddr_AWCACHE,
        AWPROT => m_axi_Out_ddr_AWPROT,
        AWQOS => m_axi_Out_ddr_AWQOS,
        AWREGION => m_axi_Out_ddr_AWREGION,
        AWUSER => m_axi_Out_ddr_AWUSER,
        WVALID => m_axi_Out_ddr_WVALID,
        WREADY => m_axi_Out_ddr_WREADY,
        WDATA => m_axi_Out_ddr_WDATA,
        WSTRB => m_axi_Out_ddr_WSTRB,
        WLAST => m_axi_Out_ddr_WLAST,
        WID => m_axi_Out_ddr_WID,
        WUSER => m_axi_Out_ddr_WUSER,
        ARVALID => m_axi_Out_ddr_ARVALID,
        ARREADY => m_axi_Out_ddr_ARREADY,
        ARADDR => m_axi_Out_ddr_ARADDR,
        ARID => m_axi_Out_ddr_ARID,
        ARLEN => m_axi_Out_ddr_ARLEN,
        ARSIZE => m_axi_Out_ddr_ARSIZE,
        ARBURST => m_axi_Out_ddr_ARBURST,
        ARLOCK => m_axi_Out_ddr_ARLOCK,
        ARCACHE => m_axi_Out_ddr_ARCACHE,
        ARPROT => m_axi_Out_ddr_ARPROT,
        ARQOS => m_axi_Out_ddr_ARQOS,
        ARREGION => m_axi_Out_ddr_ARREGION,
        ARUSER => m_axi_Out_ddr_ARUSER,
        RVALID => m_axi_Out_ddr_RVALID,
        RREADY => m_axi_Out_ddr_RREADY,
        RDATA => m_axi_Out_ddr_RDATA,
        RLAST => m_axi_Out_ddr_RLAST,
        RID => m_axi_Out_ddr_RID,
        RUSER => m_axi_Out_ddr_RUSER,
        RRESP => m_axi_Out_ddr_RRESP,
        BVALID => m_axi_Out_ddr_BVALID,
        BREADY => m_axi_Out_ddr_BREADY,
        BRESP => m_axi_Out_ddr_BRESP,
        BID => m_axi_Out_ddr_BID,
        BUSER => m_axi_Out_ddr_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => Out_ddr_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => Out_ddr_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => Out_ddr_RDATA,
        I_RID => Out_ddr_RID,
        I_RUSER => Out_ddr_RUSER,
        I_RRESP => Out_ddr_RRESP,
        I_RLAST => Out_ddr_RLAST,
        I_AWVALID => Out_ddr_AWVALID,
        I_AWREADY => Out_ddr_AWREADY,
        I_AWADDR => grp_Offload_Out_fu_260_m_axi_Out_ddr_AWADDR,
        I_AWID => grp_Offload_Out_fu_260_m_axi_Out_ddr_AWID,
        I_AWLEN => grp_Offload_Out_fu_260_m_axi_Out_ddr_AWLEN,
        I_AWSIZE => grp_Offload_Out_fu_260_m_axi_Out_ddr_AWSIZE,
        I_AWLOCK => grp_Offload_Out_fu_260_m_axi_Out_ddr_AWLOCK,
        I_AWCACHE => grp_Offload_Out_fu_260_m_axi_Out_ddr_AWCACHE,
        I_AWQOS => grp_Offload_Out_fu_260_m_axi_Out_ddr_AWQOS,
        I_AWPROT => grp_Offload_Out_fu_260_m_axi_Out_ddr_AWPROT,
        I_AWUSER => grp_Offload_Out_fu_260_m_axi_Out_ddr_AWUSER,
        I_AWBURST => grp_Offload_Out_fu_260_m_axi_Out_ddr_AWBURST,
        I_AWREGION => grp_Offload_Out_fu_260_m_axi_Out_ddr_AWREGION,
        I_WVALID => Out_ddr_WVALID,
        I_WREADY => Out_ddr_WREADY,
        I_WDATA => grp_Offload_Out_fu_260_m_axi_Out_ddr_WDATA,
        I_WID => grp_Offload_Out_fu_260_m_axi_Out_ddr_WID,
        I_WUSER => grp_Offload_Out_fu_260_m_axi_Out_ddr_WUSER,
        I_WLAST => grp_Offload_Out_fu_260_m_axi_Out_ddr_WLAST,
        I_WSTRB => grp_Offload_Out_fu_260_m_axi_Out_ddr_WSTRB,
        I_BVALID => Out_ddr_BVALID,
        I_BREADY => Out_ddr_BREADY,
        I_BRESP => Out_ddr_BRESP,
        I_BID => Out_ddr_BID,
        I_BUSER => Out_ddr_BUSER);

    Out_0_0_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_0_0_address0,
        ce0 => grp_Offload_Out_fu_260_Out_0_0_ce0,
        q0 => Out_0_0_q0);

    Out_0_1_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_0_1_address0,
        ce0 => grp_Offload_Out_fu_260_Out_0_1_ce0,
        q0 => Out_0_1_q0);

    Out_0_2_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_0_2_address0,
        ce0 => grp_Offload_Out_fu_260_Out_0_2_ce0,
        q0 => Out_0_2_q0);

    Out_0_3_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_0_3_address0,
        ce0 => grp_Offload_Out_fu_260_Out_0_3_ce0,
        q0 => Out_0_3_q0);

    Out_0_4_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_0_4_address0,
        ce0 => grp_Offload_Out_fu_260_Out_0_4_ce0,
        q0 => Out_0_4_q0);

    Out_0_5_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_0_5_address0,
        ce0 => grp_Offload_Out_fu_260_Out_0_5_ce0,
        q0 => Out_0_5_q0);

    Out_0_6_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_0_6_address0,
        ce0 => grp_Offload_Out_fu_260_Out_0_6_ce0,
        q0 => Out_0_6_q0);

    Out_0_7_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_0_7_address0,
        ce0 => grp_Offload_Out_fu_260_Out_0_7_ce0,
        q0 => Out_0_7_q0);

    Out_0_8_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_0_8_address0,
        ce0 => grp_Offload_Out_fu_260_Out_0_8_ce0,
        q0 => Out_0_8_q0);

    Out_0_9_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_0_9_address0,
        ce0 => grp_Offload_Out_fu_260_Out_0_9_ce0,
        q0 => Out_0_9_q0);

    Out_0_10_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_0_10_address0,
        ce0 => grp_Offload_Out_fu_260_Out_0_10_ce0,
        q0 => Out_0_10_q0);

    Out_0_11_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_0_11_address0,
        ce0 => grp_Offload_Out_fu_260_Out_0_11_ce0,
        q0 => Out_0_11_q0);

    Out_0_12_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_0_12_address0,
        ce0 => grp_Offload_Out_fu_260_Out_0_12_ce0,
        q0 => Out_0_12_q0);

    Out_0_13_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_0_13_address0,
        ce0 => grp_Offload_Out_fu_260_Out_0_13_ce0,
        q0 => Out_0_13_q0);

    Out_1_0_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_1_0_address0,
        ce0 => grp_Offload_Out_fu_260_Out_1_0_ce0,
        q0 => Out_1_0_q0);

    Out_1_1_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_1_1_address0,
        ce0 => grp_Offload_Out_fu_260_Out_1_1_ce0,
        q0 => Out_1_1_q0);

    Out_1_2_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_1_2_address0,
        ce0 => grp_Offload_Out_fu_260_Out_1_2_ce0,
        q0 => Out_1_2_q0);

    Out_1_3_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_1_3_address0,
        ce0 => grp_Offload_Out_fu_260_Out_1_3_ce0,
        q0 => Out_1_3_q0);

    Out_1_4_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_1_4_address0,
        ce0 => grp_Offload_Out_fu_260_Out_1_4_ce0,
        q0 => Out_1_4_q0);

    Out_1_5_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_1_5_address0,
        ce0 => grp_Offload_Out_fu_260_Out_1_5_ce0,
        q0 => Out_1_5_q0);

    Out_1_6_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_1_6_address0,
        ce0 => grp_Offload_Out_fu_260_Out_1_6_ce0,
        q0 => Out_1_6_q0);

    Out_1_7_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_1_7_address0,
        ce0 => grp_Offload_Out_fu_260_Out_1_7_ce0,
        q0 => Out_1_7_q0);

    Out_1_8_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_1_8_address0,
        ce0 => grp_Offload_Out_fu_260_Out_1_8_ce0,
        q0 => Out_1_8_q0);

    Out_1_9_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_1_9_address0,
        ce0 => grp_Offload_Out_fu_260_Out_1_9_ce0,
        q0 => Out_1_9_q0);

    Out_1_10_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_1_10_address0,
        ce0 => grp_Offload_Out_fu_260_Out_1_10_ce0,
        q0 => Out_1_10_q0);

    Out_1_11_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_1_11_address0,
        ce0 => grp_Offload_Out_fu_260_Out_1_11_ce0,
        q0 => Out_1_11_q0);

    Out_1_12_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_1_12_address0,
        ce0 => grp_Offload_Out_fu_260_Out_1_12_ce0,
        q0 => Out_1_12_q0);

    Out_1_13_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_1_13_address0,
        ce0 => grp_Offload_Out_fu_260_Out_1_13_ce0,
        q0 => Out_1_13_q0);

    Out_2_0_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_2_0_address0,
        ce0 => grp_Offload_Out_fu_260_Out_2_0_ce0,
        q0 => Out_2_0_q0);

    Out_2_1_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_2_1_address0,
        ce0 => grp_Offload_Out_fu_260_Out_2_1_ce0,
        q0 => Out_2_1_q0);

    Out_2_2_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_2_2_address0,
        ce0 => grp_Offload_Out_fu_260_Out_2_2_ce0,
        q0 => Out_2_2_q0);

    Out_2_3_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_2_3_address0,
        ce0 => grp_Offload_Out_fu_260_Out_2_3_ce0,
        q0 => Out_2_3_q0);

    Out_2_4_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_2_4_address0,
        ce0 => grp_Offload_Out_fu_260_Out_2_4_ce0,
        q0 => Out_2_4_q0);

    Out_2_5_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_2_5_address0,
        ce0 => grp_Offload_Out_fu_260_Out_2_5_ce0,
        q0 => Out_2_5_q0);

    Out_2_6_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_2_6_address0,
        ce0 => grp_Offload_Out_fu_260_Out_2_6_ce0,
        q0 => Out_2_6_q0);

    Out_2_7_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_2_7_address0,
        ce0 => grp_Offload_Out_fu_260_Out_2_7_ce0,
        q0 => Out_2_7_q0);

    Out_2_8_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_2_8_address0,
        ce0 => grp_Offload_Out_fu_260_Out_2_8_ce0,
        q0 => Out_2_8_q0);

    Out_2_9_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_2_9_address0,
        ce0 => grp_Offload_Out_fu_260_Out_2_9_ce0,
        q0 => Out_2_9_q0);

    Out_2_10_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_2_10_address0,
        ce0 => grp_Offload_Out_fu_260_Out_2_10_ce0,
        q0 => Out_2_10_q0);

    Out_2_11_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_2_11_address0,
        ce0 => grp_Offload_Out_fu_260_Out_2_11_ce0,
        q0 => Out_2_11_q0);

    Out_2_12_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_2_12_address0,
        ce0 => grp_Offload_Out_fu_260_Out_2_12_ce0,
        q0 => Out_2_12_q0);

    Out_2_13_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_2_13_address0,
        ce0 => grp_Offload_Out_fu_260_Out_2_13_ce0,
        q0 => Out_2_13_q0);

    Out_3_0_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_3_0_address0,
        ce0 => grp_Offload_Out_fu_260_Out_3_0_ce0,
        q0 => Out_3_0_q0);

    Out_3_1_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_3_1_address0,
        ce0 => grp_Offload_Out_fu_260_Out_3_1_ce0,
        q0 => Out_3_1_q0);

    Out_3_2_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_3_2_address0,
        ce0 => grp_Offload_Out_fu_260_Out_3_2_ce0,
        q0 => Out_3_2_q0);

    Out_3_3_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_3_3_address0,
        ce0 => grp_Offload_Out_fu_260_Out_3_3_ce0,
        q0 => Out_3_3_q0);

    Out_3_4_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_3_4_address0,
        ce0 => grp_Offload_Out_fu_260_Out_3_4_ce0,
        q0 => Out_3_4_q0);

    Out_3_5_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_3_5_address0,
        ce0 => grp_Offload_Out_fu_260_Out_3_5_ce0,
        q0 => Out_3_5_q0);

    Out_3_6_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_3_6_address0,
        ce0 => grp_Offload_Out_fu_260_Out_3_6_ce0,
        q0 => Out_3_6_q0);

    Out_3_7_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_3_7_address0,
        ce0 => grp_Offload_Out_fu_260_Out_3_7_ce0,
        q0 => Out_3_7_q0);

    Out_3_8_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_3_8_address0,
        ce0 => grp_Offload_Out_fu_260_Out_3_8_ce0,
        q0 => Out_3_8_q0);

    Out_3_9_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_3_9_address0,
        ce0 => grp_Offload_Out_fu_260_Out_3_9_ce0,
        q0 => Out_3_9_q0);

    Out_3_10_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_3_10_address0,
        ce0 => grp_Offload_Out_fu_260_Out_3_10_ce0,
        q0 => Out_3_10_q0);

    Out_3_11_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_3_11_address0,
        ce0 => grp_Offload_Out_fu_260_Out_3_11_ce0,
        q0 => Out_3_11_q0);

    Out_3_12_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_3_12_address0,
        ce0 => grp_Offload_Out_fu_260_Out_3_12_ce0,
        q0 => Out_3_12_q0);

    Out_3_13_U : component convolution_Out_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_Offload_Out_fu_260_Out_3_13_address0,
        ce0 => grp_Offload_Out_fu_260_Out_3_13_ce0,
        q0 => Out_3_13_q0);

    grp_Process_r_fu_254 : component Process_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_Process_r_fu_254_ap_start,
        ap_done => grp_Process_r_fu_254_ap_done,
        ap_idle => grp_Process_r_fu_254_ap_idle,
        ap_ready => grp_Process_r_fu_254_ap_ready,
        m_axi_W_ddr_AWVALID => grp_Process_r_fu_254_m_axi_W_ddr_AWVALID,
        m_axi_W_ddr_AWREADY => ap_const_logic_0,
        m_axi_W_ddr_AWADDR => grp_Process_r_fu_254_m_axi_W_ddr_AWADDR,
        m_axi_W_ddr_AWID => grp_Process_r_fu_254_m_axi_W_ddr_AWID,
        m_axi_W_ddr_AWLEN => grp_Process_r_fu_254_m_axi_W_ddr_AWLEN,
        m_axi_W_ddr_AWSIZE => grp_Process_r_fu_254_m_axi_W_ddr_AWSIZE,
        m_axi_W_ddr_AWBURST => grp_Process_r_fu_254_m_axi_W_ddr_AWBURST,
        m_axi_W_ddr_AWLOCK => grp_Process_r_fu_254_m_axi_W_ddr_AWLOCK,
        m_axi_W_ddr_AWCACHE => grp_Process_r_fu_254_m_axi_W_ddr_AWCACHE,
        m_axi_W_ddr_AWPROT => grp_Process_r_fu_254_m_axi_W_ddr_AWPROT,
        m_axi_W_ddr_AWQOS => grp_Process_r_fu_254_m_axi_W_ddr_AWQOS,
        m_axi_W_ddr_AWREGION => grp_Process_r_fu_254_m_axi_W_ddr_AWREGION,
        m_axi_W_ddr_AWUSER => grp_Process_r_fu_254_m_axi_W_ddr_AWUSER,
        m_axi_W_ddr_WVALID => grp_Process_r_fu_254_m_axi_W_ddr_WVALID,
        m_axi_W_ddr_WREADY => ap_const_logic_0,
        m_axi_W_ddr_WDATA => grp_Process_r_fu_254_m_axi_W_ddr_WDATA,
        m_axi_W_ddr_WSTRB => grp_Process_r_fu_254_m_axi_W_ddr_WSTRB,
        m_axi_W_ddr_WLAST => grp_Process_r_fu_254_m_axi_W_ddr_WLAST,
        m_axi_W_ddr_WID => grp_Process_r_fu_254_m_axi_W_ddr_WID,
        m_axi_W_ddr_WUSER => grp_Process_r_fu_254_m_axi_W_ddr_WUSER,
        m_axi_W_ddr_ARVALID => grp_Process_r_fu_254_m_axi_W_ddr_ARVALID,
        m_axi_W_ddr_ARREADY => W_ddr_ARREADY,
        m_axi_W_ddr_ARADDR => grp_Process_r_fu_254_m_axi_W_ddr_ARADDR,
        m_axi_W_ddr_ARID => grp_Process_r_fu_254_m_axi_W_ddr_ARID,
        m_axi_W_ddr_ARLEN => grp_Process_r_fu_254_m_axi_W_ddr_ARLEN,
        m_axi_W_ddr_ARSIZE => grp_Process_r_fu_254_m_axi_W_ddr_ARSIZE,
        m_axi_W_ddr_ARBURST => grp_Process_r_fu_254_m_axi_W_ddr_ARBURST,
        m_axi_W_ddr_ARLOCK => grp_Process_r_fu_254_m_axi_W_ddr_ARLOCK,
        m_axi_W_ddr_ARCACHE => grp_Process_r_fu_254_m_axi_W_ddr_ARCACHE,
        m_axi_W_ddr_ARPROT => grp_Process_r_fu_254_m_axi_W_ddr_ARPROT,
        m_axi_W_ddr_ARQOS => grp_Process_r_fu_254_m_axi_W_ddr_ARQOS,
        m_axi_W_ddr_ARREGION => grp_Process_r_fu_254_m_axi_W_ddr_ARREGION,
        m_axi_W_ddr_ARUSER => grp_Process_r_fu_254_m_axi_W_ddr_ARUSER,
        m_axi_W_ddr_RVALID => W_ddr_RVALID,
        m_axi_W_ddr_RREADY => grp_Process_r_fu_254_m_axi_W_ddr_RREADY,
        m_axi_W_ddr_RDATA => W_ddr_RDATA,
        m_axi_W_ddr_RLAST => W_ddr_RLAST,
        m_axi_W_ddr_RID => W_ddr_RID,
        m_axi_W_ddr_RUSER => W_ddr_RUSER,
        m_axi_W_ddr_RRESP => W_ddr_RRESP,
        m_axi_W_ddr_BVALID => ap_const_logic_0,
        m_axi_W_ddr_BREADY => grp_Process_r_fu_254_m_axi_W_ddr_BREADY,
        m_axi_W_ddr_BRESP => ap_const_lv2_0,
        m_axi_W_ddr_BID => ap_const_lv1_0,
        m_axi_W_ddr_BUSER => ap_const_lv1_0);

    grp_Offload_Out_fu_260 : component Offload_Out
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_Offload_Out_fu_260_ap_start,
        ap_done => grp_Offload_Out_fu_260_ap_done,
        ap_idle => grp_Offload_Out_fu_260_ap_idle,
        ap_ready => grp_Offload_Out_fu_260_ap_ready,
        m_axi_Out_ddr_AWVALID => grp_Offload_Out_fu_260_m_axi_Out_ddr_AWVALID,
        m_axi_Out_ddr_AWREADY => Out_ddr_AWREADY,
        m_axi_Out_ddr_AWADDR => grp_Offload_Out_fu_260_m_axi_Out_ddr_AWADDR,
        m_axi_Out_ddr_AWID => grp_Offload_Out_fu_260_m_axi_Out_ddr_AWID,
        m_axi_Out_ddr_AWLEN => grp_Offload_Out_fu_260_m_axi_Out_ddr_AWLEN,
        m_axi_Out_ddr_AWSIZE => grp_Offload_Out_fu_260_m_axi_Out_ddr_AWSIZE,
        m_axi_Out_ddr_AWBURST => grp_Offload_Out_fu_260_m_axi_Out_ddr_AWBURST,
        m_axi_Out_ddr_AWLOCK => grp_Offload_Out_fu_260_m_axi_Out_ddr_AWLOCK,
        m_axi_Out_ddr_AWCACHE => grp_Offload_Out_fu_260_m_axi_Out_ddr_AWCACHE,
        m_axi_Out_ddr_AWPROT => grp_Offload_Out_fu_260_m_axi_Out_ddr_AWPROT,
        m_axi_Out_ddr_AWQOS => grp_Offload_Out_fu_260_m_axi_Out_ddr_AWQOS,
        m_axi_Out_ddr_AWREGION => grp_Offload_Out_fu_260_m_axi_Out_ddr_AWREGION,
        m_axi_Out_ddr_AWUSER => grp_Offload_Out_fu_260_m_axi_Out_ddr_AWUSER,
        m_axi_Out_ddr_WVALID => grp_Offload_Out_fu_260_m_axi_Out_ddr_WVALID,
        m_axi_Out_ddr_WREADY => Out_ddr_WREADY,
        m_axi_Out_ddr_WDATA => grp_Offload_Out_fu_260_m_axi_Out_ddr_WDATA,
        m_axi_Out_ddr_WSTRB => grp_Offload_Out_fu_260_m_axi_Out_ddr_WSTRB,
        m_axi_Out_ddr_WLAST => grp_Offload_Out_fu_260_m_axi_Out_ddr_WLAST,
        m_axi_Out_ddr_WID => grp_Offload_Out_fu_260_m_axi_Out_ddr_WID,
        m_axi_Out_ddr_WUSER => grp_Offload_Out_fu_260_m_axi_Out_ddr_WUSER,
        m_axi_Out_ddr_ARVALID => grp_Offload_Out_fu_260_m_axi_Out_ddr_ARVALID,
        m_axi_Out_ddr_ARREADY => ap_const_logic_0,
        m_axi_Out_ddr_ARADDR => grp_Offload_Out_fu_260_m_axi_Out_ddr_ARADDR,
        m_axi_Out_ddr_ARID => grp_Offload_Out_fu_260_m_axi_Out_ddr_ARID,
        m_axi_Out_ddr_ARLEN => grp_Offload_Out_fu_260_m_axi_Out_ddr_ARLEN,
        m_axi_Out_ddr_ARSIZE => grp_Offload_Out_fu_260_m_axi_Out_ddr_ARSIZE,
        m_axi_Out_ddr_ARBURST => grp_Offload_Out_fu_260_m_axi_Out_ddr_ARBURST,
        m_axi_Out_ddr_ARLOCK => grp_Offload_Out_fu_260_m_axi_Out_ddr_ARLOCK,
        m_axi_Out_ddr_ARCACHE => grp_Offload_Out_fu_260_m_axi_Out_ddr_ARCACHE,
        m_axi_Out_ddr_ARPROT => grp_Offload_Out_fu_260_m_axi_Out_ddr_ARPROT,
        m_axi_Out_ddr_ARQOS => grp_Offload_Out_fu_260_m_axi_Out_ddr_ARQOS,
        m_axi_Out_ddr_ARREGION => grp_Offload_Out_fu_260_m_axi_Out_ddr_ARREGION,
        m_axi_Out_ddr_ARUSER => grp_Offload_Out_fu_260_m_axi_Out_ddr_ARUSER,
        m_axi_Out_ddr_RVALID => ap_const_logic_0,
        m_axi_Out_ddr_RREADY => grp_Offload_Out_fu_260_m_axi_Out_ddr_RREADY,
        m_axi_Out_ddr_RDATA => ap_const_lv32_0,
        m_axi_Out_ddr_RLAST => ap_const_logic_0,
        m_axi_Out_ddr_RID => ap_const_lv1_0,
        m_axi_Out_ddr_RUSER => ap_const_lv1_0,
        m_axi_Out_ddr_RRESP => ap_const_lv2_0,
        m_axi_Out_ddr_BVALID => Out_ddr_BVALID,
        m_axi_Out_ddr_BREADY => grp_Offload_Out_fu_260_m_axi_Out_ddr_BREADY,
        m_axi_Out_ddr_BRESP => Out_ddr_BRESP,
        m_axi_Out_ddr_BID => Out_ddr_BID,
        m_axi_Out_ddr_BUSER => Out_ddr_BUSER,
        Out_0_0_address0 => grp_Offload_Out_fu_260_Out_0_0_address0,
        Out_0_0_ce0 => grp_Offload_Out_fu_260_Out_0_0_ce0,
        Out_0_0_q0 => Out_0_0_q0,
        Out_0_1_address0 => grp_Offload_Out_fu_260_Out_0_1_address0,
        Out_0_1_ce0 => grp_Offload_Out_fu_260_Out_0_1_ce0,
        Out_0_1_q0 => Out_0_1_q0,
        Out_0_2_address0 => grp_Offload_Out_fu_260_Out_0_2_address0,
        Out_0_2_ce0 => grp_Offload_Out_fu_260_Out_0_2_ce0,
        Out_0_2_q0 => Out_0_2_q0,
        Out_0_3_address0 => grp_Offload_Out_fu_260_Out_0_3_address0,
        Out_0_3_ce0 => grp_Offload_Out_fu_260_Out_0_3_ce0,
        Out_0_3_q0 => Out_0_3_q0,
        Out_0_4_address0 => grp_Offload_Out_fu_260_Out_0_4_address0,
        Out_0_4_ce0 => grp_Offload_Out_fu_260_Out_0_4_ce0,
        Out_0_4_q0 => Out_0_4_q0,
        Out_0_5_address0 => grp_Offload_Out_fu_260_Out_0_5_address0,
        Out_0_5_ce0 => grp_Offload_Out_fu_260_Out_0_5_ce0,
        Out_0_5_q0 => Out_0_5_q0,
        Out_0_6_address0 => grp_Offload_Out_fu_260_Out_0_6_address0,
        Out_0_6_ce0 => grp_Offload_Out_fu_260_Out_0_6_ce0,
        Out_0_6_q0 => Out_0_6_q0,
        Out_0_7_address0 => grp_Offload_Out_fu_260_Out_0_7_address0,
        Out_0_7_ce0 => grp_Offload_Out_fu_260_Out_0_7_ce0,
        Out_0_7_q0 => Out_0_7_q0,
        Out_0_8_address0 => grp_Offload_Out_fu_260_Out_0_8_address0,
        Out_0_8_ce0 => grp_Offload_Out_fu_260_Out_0_8_ce0,
        Out_0_8_q0 => Out_0_8_q0,
        Out_0_9_address0 => grp_Offload_Out_fu_260_Out_0_9_address0,
        Out_0_9_ce0 => grp_Offload_Out_fu_260_Out_0_9_ce0,
        Out_0_9_q0 => Out_0_9_q0,
        Out_0_10_address0 => grp_Offload_Out_fu_260_Out_0_10_address0,
        Out_0_10_ce0 => grp_Offload_Out_fu_260_Out_0_10_ce0,
        Out_0_10_q0 => Out_0_10_q0,
        Out_0_11_address0 => grp_Offload_Out_fu_260_Out_0_11_address0,
        Out_0_11_ce0 => grp_Offload_Out_fu_260_Out_0_11_ce0,
        Out_0_11_q0 => Out_0_11_q0,
        Out_0_12_address0 => grp_Offload_Out_fu_260_Out_0_12_address0,
        Out_0_12_ce0 => grp_Offload_Out_fu_260_Out_0_12_ce0,
        Out_0_12_q0 => Out_0_12_q0,
        Out_0_13_address0 => grp_Offload_Out_fu_260_Out_0_13_address0,
        Out_0_13_ce0 => grp_Offload_Out_fu_260_Out_0_13_ce0,
        Out_0_13_q0 => Out_0_13_q0,
        Out_1_0_address0 => grp_Offload_Out_fu_260_Out_1_0_address0,
        Out_1_0_ce0 => grp_Offload_Out_fu_260_Out_1_0_ce0,
        Out_1_0_q0 => Out_1_0_q0,
        Out_1_1_address0 => grp_Offload_Out_fu_260_Out_1_1_address0,
        Out_1_1_ce0 => grp_Offload_Out_fu_260_Out_1_1_ce0,
        Out_1_1_q0 => Out_1_1_q0,
        Out_1_2_address0 => grp_Offload_Out_fu_260_Out_1_2_address0,
        Out_1_2_ce0 => grp_Offload_Out_fu_260_Out_1_2_ce0,
        Out_1_2_q0 => Out_1_2_q0,
        Out_1_3_address0 => grp_Offload_Out_fu_260_Out_1_3_address0,
        Out_1_3_ce0 => grp_Offload_Out_fu_260_Out_1_3_ce0,
        Out_1_3_q0 => Out_1_3_q0,
        Out_1_4_address0 => grp_Offload_Out_fu_260_Out_1_4_address0,
        Out_1_4_ce0 => grp_Offload_Out_fu_260_Out_1_4_ce0,
        Out_1_4_q0 => Out_1_4_q0,
        Out_1_5_address0 => grp_Offload_Out_fu_260_Out_1_5_address0,
        Out_1_5_ce0 => grp_Offload_Out_fu_260_Out_1_5_ce0,
        Out_1_5_q0 => Out_1_5_q0,
        Out_1_6_address0 => grp_Offload_Out_fu_260_Out_1_6_address0,
        Out_1_6_ce0 => grp_Offload_Out_fu_260_Out_1_6_ce0,
        Out_1_6_q0 => Out_1_6_q0,
        Out_1_7_address0 => grp_Offload_Out_fu_260_Out_1_7_address0,
        Out_1_7_ce0 => grp_Offload_Out_fu_260_Out_1_7_ce0,
        Out_1_7_q0 => Out_1_7_q0,
        Out_1_8_address0 => grp_Offload_Out_fu_260_Out_1_8_address0,
        Out_1_8_ce0 => grp_Offload_Out_fu_260_Out_1_8_ce0,
        Out_1_8_q0 => Out_1_8_q0,
        Out_1_9_address0 => grp_Offload_Out_fu_260_Out_1_9_address0,
        Out_1_9_ce0 => grp_Offload_Out_fu_260_Out_1_9_ce0,
        Out_1_9_q0 => Out_1_9_q0,
        Out_1_10_address0 => grp_Offload_Out_fu_260_Out_1_10_address0,
        Out_1_10_ce0 => grp_Offload_Out_fu_260_Out_1_10_ce0,
        Out_1_10_q0 => Out_1_10_q0,
        Out_1_11_address0 => grp_Offload_Out_fu_260_Out_1_11_address0,
        Out_1_11_ce0 => grp_Offload_Out_fu_260_Out_1_11_ce0,
        Out_1_11_q0 => Out_1_11_q0,
        Out_1_12_address0 => grp_Offload_Out_fu_260_Out_1_12_address0,
        Out_1_12_ce0 => grp_Offload_Out_fu_260_Out_1_12_ce0,
        Out_1_12_q0 => Out_1_12_q0,
        Out_1_13_address0 => grp_Offload_Out_fu_260_Out_1_13_address0,
        Out_1_13_ce0 => grp_Offload_Out_fu_260_Out_1_13_ce0,
        Out_1_13_q0 => Out_1_13_q0,
        Out_2_0_address0 => grp_Offload_Out_fu_260_Out_2_0_address0,
        Out_2_0_ce0 => grp_Offload_Out_fu_260_Out_2_0_ce0,
        Out_2_0_q0 => Out_2_0_q0,
        Out_2_1_address0 => grp_Offload_Out_fu_260_Out_2_1_address0,
        Out_2_1_ce0 => grp_Offload_Out_fu_260_Out_2_1_ce0,
        Out_2_1_q0 => Out_2_1_q0,
        Out_2_2_address0 => grp_Offload_Out_fu_260_Out_2_2_address0,
        Out_2_2_ce0 => grp_Offload_Out_fu_260_Out_2_2_ce0,
        Out_2_2_q0 => Out_2_2_q0,
        Out_2_3_address0 => grp_Offload_Out_fu_260_Out_2_3_address0,
        Out_2_3_ce0 => grp_Offload_Out_fu_260_Out_2_3_ce0,
        Out_2_3_q0 => Out_2_3_q0,
        Out_2_4_address0 => grp_Offload_Out_fu_260_Out_2_4_address0,
        Out_2_4_ce0 => grp_Offload_Out_fu_260_Out_2_4_ce0,
        Out_2_4_q0 => Out_2_4_q0,
        Out_2_5_address0 => grp_Offload_Out_fu_260_Out_2_5_address0,
        Out_2_5_ce0 => grp_Offload_Out_fu_260_Out_2_5_ce0,
        Out_2_5_q0 => Out_2_5_q0,
        Out_2_6_address0 => grp_Offload_Out_fu_260_Out_2_6_address0,
        Out_2_6_ce0 => grp_Offload_Out_fu_260_Out_2_6_ce0,
        Out_2_6_q0 => Out_2_6_q0,
        Out_2_7_address0 => grp_Offload_Out_fu_260_Out_2_7_address0,
        Out_2_7_ce0 => grp_Offload_Out_fu_260_Out_2_7_ce0,
        Out_2_7_q0 => Out_2_7_q0,
        Out_2_8_address0 => grp_Offload_Out_fu_260_Out_2_8_address0,
        Out_2_8_ce0 => grp_Offload_Out_fu_260_Out_2_8_ce0,
        Out_2_8_q0 => Out_2_8_q0,
        Out_2_9_address0 => grp_Offload_Out_fu_260_Out_2_9_address0,
        Out_2_9_ce0 => grp_Offload_Out_fu_260_Out_2_9_ce0,
        Out_2_9_q0 => Out_2_9_q0,
        Out_2_10_address0 => grp_Offload_Out_fu_260_Out_2_10_address0,
        Out_2_10_ce0 => grp_Offload_Out_fu_260_Out_2_10_ce0,
        Out_2_10_q0 => Out_2_10_q0,
        Out_2_11_address0 => grp_Offload_Out_fu_260_Out_2_11_address0,
        Out_2_11_ce0 => grp_Offload_Out_fu_260_Out_2_11_ce0,
        Out_2_11_q0 => Out_2_11_q0,
        Out_2_12_address0 => grp_Offload_Out_fu_260_Out_2_12_address0,
        Out_2_12_ce0 => grp_Offload_Out_fu_260_Out_2_12_ce0,
        Out_2_12_q0 => Out_2_12_q0,
        Out_2_13_address0 => grp_Offload_Out_fu_260_Out_2_13_address0,
        Out_2_13_ce0 => grp_Offload_Out_fu_260_Out_2_13_ce0,
        Out_2_13_q0 => Out_2_13_q0,
        Out_3_0_address0 => grp_Offload_Out_fu_260_Out_3_0_address0,
        Out_3_0_ce0 => grp_Offload_Out_fu_260_Out_3_0_ce0,
        Out_3_0_q0 => Out_3_0_q0,
        Out_3_1_address0 => grp_Offload_Out_fu_260_Out_3_1_address0,
        Out_3_1_ce0 => grp_Offload_Out_fu_260_Out_3_1_ce0,
        Out_3_1_q0 => Out_3_1_q0,
        Out_3_2_address0 => grp_Offload_Out_fu_260_Out_3_2_address0,
        Out_3_2_ce0 => grp_Offload_Out_fu_260_Out_3_2_ce0,
        Out_3_2_q0 => Out_3_2_q0,
        Out_3_3_address0 => grp_Offload_Out_fu_260_Out_3_3_address0,
        Out_3_3_ce0 => grp_Offload_Out_fu_260_Out_3_3_ce0,
        Out_3_3_q0 => Out_3_3_q0,
        Out_3_4_address0 => grp_Offload_Out_fu_260_Out_3_4_address0,
        Out_3_4_ce0 => grp_Offload_Out_fu_260_Out_3_4_ce0,
        Out_3_4_q0 => Out_3_4_q0,
        Out_3_5_address0 => grp_Offload_Out_fu_260_Out_3_5_address0,
        Out_3_5_ce0 => grp_Offload_Out_fu_260_Out_3_5_ce0,
        Out_3_5_q0 => Out_3_5_q0,
        Out_3_6_address0 => grp_Offload_Out_fu_260_Out_3_6_address0,
        Out_3_6_ce0 => grp_Offload_Out_fu_260_Out_3_6_ce0,
        Out_3_6_q0 => Out_3_6_q0,
        Out_3_7_address0 => grp_Offload_Out_fu_260_Out_3_7_address0,
        Out_3_7_ce0 => grp_Offload_Out_fu_260_Out_3_7_ce0,
        Out_3_7_q0 => Out_3_7_q0,
        Out_3_8_address0 => grp_Offload_Out_fu_260_Out_3_8_address0,
        Out_3_8_ce0 => grp_Offload_Out_fu_260_Out_3_8_ce0,
        Out_3_8_q0 => Out_3_8_q0,
        Out_3_9_address0 => grp_Offload_Out_fu_260_Out_3_9_address0,
        Out_3_9_ce0 => grp_Offload_Out_fu_260_Out_3_9_ce0,
        Out_3_9_q0 => Out_3_9_q0,
        Out_3_10_address0 => grp_Offload_Out_fu_260_Out_3_10_address0,
        Out_3_10_ce0 => grp_Offload_Out_fu_260_Out_3_10_ce0,
        Out_3_10_q0 => Out_3_10_q0,
        Out_3_11_address0 => grp_Offload_Out_fu_260_Out_3_11_address0,
        Out_3_11_ce0 => grp_Offload_Out_fu_260_Out_3_11_ce0,
        Out_3_11_q0 => Out_3_11_q0,
        Out_3_12_address0 => grp_Offload_Out_fu_260_Out_3_12_address0,
        Out_3_12_ce0 => grp_Offload_Out_fu_260_Out_3_12_ce0,
        Out_3_12_q0 => Out_3_12_q0,
        Out_3_13_address0 => grp_Offload_Out_fu_260_Out_3_13_address0,
        Out_3_13_ce0 => grp_Offload_Out_fu_260_Out_3_13_ce0,
        Out_3_13_q0 => Out_3_13_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Offload_Out_fu_260_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_Offload_Out_fu_260_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_Offload_Out_fu_260_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Offload_Out_fu_260_ap_ready = ap_const_logic_1)) then 
                    grp_Offload_Out_fu_260_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Process_r_fu_254_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_Process_r_fu_254_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_Process_r_fu_254_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Process_r_fu_254_ap_ready = ap_const_logic_1)) then 
                    grp_Process_r_fu_254_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    Out_ddr_AWVALID_assign_proc : process(ap_CS_fsm_state1, grp_Offload_Out_fu_260_m_axi_Out_ddr_AWVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            Out_ddr_AWVALID <= grp_Offload_Out_fu_260_m_axi_Out_ddr_AWVALID;
        else 
            Out_ddr_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    Out_ddr_BREADY_assign_proc : process(ap_CS_fsm_state1, grp_Offload_Out_fu_260_m_axi_Out_ddr_BREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            Out_ddr_BREADY <= grp_Offload_Out_fu_260_m_axi_Out_ddr_BREADY;
        else 
            Out_ddr_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    Out_ddr_WVALID_assign_proc : process(ap_CS_fsm_state1, grp_Offload_Out_fu_260_m_axi_Out_ddr_WVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            Out_ddr_WVALID <= grp_Offload_Out_fu_260_m_axi_Out_ddr_WVALID;
        else 
            Out_ddr_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    W_ddr_ARVALID_assign_proc : process(ap_CS_fsm_state1, grp_Process_r_fu_254_m_axi_W_ddr_ARVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            W_ddr_ARVALID <= grp_Process_r_fu_254_m_axi_W_ddr_ARVALID;
        else 
            W_ddr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    W_ddr_RREADY_assign_proc : process(ap_CS_fsm_state1, grp_Process_r_fu_254_m_axi_W_ddr_RREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            W_ddr_RREADY <= grp_Process_r_fu_254_m_axi_W_ddr_RREADY;
        else 
            W_ddr_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state2_on_subcall_done_assign_proc : process(grp_Process_r_fu_254_ap_done, grp_Offload_Out_fu_260_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((grp_Offload_Out_fu_260_ap_done = ap_const_logic_0) or (grp_Process_r_fu_254_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_Offload_Out_fu_260_ap_start <= grp_Offload_Out_fu_260_ap_start_reg;
    grp_Process_r_fu_254_ap_start <= grp_Process_r_fu_254_ap_start_reg;
    m_axi_In_ddr_ARADDR <= ap_const_lv32_0;
    m_axi_In_ddr_ARBURST <= ap_const_lv2_0;
    m_axi_In_ddr_ARCACHE <= ap_const_lv4_0;
    m_axi_In_ddr_ARID <= ap_const_lv1_0;
    m_axi_In_ddr_ARLEN <= ap_const_lv8_0;
    m_axi_In_ddr_ARLOCK <= ap_const_lv2_0;
    m_axi_In_ddr_ARPROT <= ap_const_lv3_0;
    m_axi_In_ddr_ARQOS <= ap_const_lv4_0;
    m_axi_In_ddr_ARREGION <= ap_const_lv4_0;
    m_axi_In_ddr_ARSIZE <= ap_const_lv3_0;
    m_axi_In_ddr_ARUSER <= ap_const_lv1_0;
    m_axi_In_ddr_ARVALID <= ap_const_logic_0;
    m_axi_In_ddr_AWADDR <= ap_const_lv32_0;
    m_axi_In_ddr_AWBURST <= ap_const_lv2_0;
    m_axi_In_ddr_AWCACHE <= ap_const_lv4_0;
    m_axi_In_ddr_AWID <= ap_const_lv1_0;
    m_axi_In_ddr_AWLEN <= ap_const_lv8_0;
    m_axi_In_ddr_AWLOCK <= ap_const_lv2_0;
    m_axi_In_ddr_AWPROT <= ap_const_lv3_0;
    m_axi_In_ddr_AWQOS <= ap_const_lv4_0;
    m_axi_In_ddr_AWREGION <= ap_const_lv4_0;
    m_axi_In_ddr_AWSIZE <= ap_const_lv3_0;
    m_axi_In_ddr_AWUSER <= ap_const_lv1_0;
    m_axi_In_ddr_AWVALID <= ap_const_logic_0;
    m_axi_In_ddr_BREADY <= ap_const_logic_0;
    m_axi_In_ddr_RREADY <= ap_const_logic_0;
    m_axi_In_ddr_WDATA <= ap_const_lv32_0;
    m_axi_In_ddr_WID <= ap_const_lv1_0;
    m_axi_In_ddr_WLAST <= ap_const_logic_0;
    m_axi_In_ddr_WSTRB <= ap_const_lv4_0;
    m_axi_In_ddr_WUSER <= ap_const_lv1_0;
    m_axi_In_ddr_WVALID <= ap_const_logic_0;
end behav;
