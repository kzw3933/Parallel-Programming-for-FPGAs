// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Process_r_HH_
#define _Process_r_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Load_W.h"

namespace ap_rtl {

struct Process_r : public sc_module {
    // Port declarations 51
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > m_axi_W_ddr_AWVALID;
    sc_in< sc_logic > m_axi_W_ddr_AWREADY;
    sc_out< sc_lv<32> > m_axi_W_ddr_AWADDR;
    sc_out< sc_lv<1> > m_axi_W_ddr_AWID;
    sc_out< sc_lv<32> > m_axi_W_ddr_AWLEN;
    sc_out< sc_lv<3> > m_axi_W_ddr_AWSIZE;
    sc_out< sc_lv<2> > m_axi_W_ddr_AWBURST;
    sc_out< sc_lv<2> > m_axi_W_ddr_AWLOCK;
    sc_out< sc_lv<4> > m_axi_W_ddr_AWCACHE;
    sc_out< sc_lv<3> > m_axi_W_ddr_AWPROT;
    sc_out< sc_lv<4> > m_axi_W_ddr_AWQOS;
    sc_out< sc_lv<4> > m_axi_W_ddr_AWREGION;
    sc_out< sc_lv<1> > m_axi_W_ddr_AWUSER;
    sc_out< sc_logic > m_axi_W_ddr_WVALID;
    sc_in< sc_logic > m_axi_W_ddr_WREADY;
    sc_out< sc_lv<32> > m_axi_W_ddr_WDATA;
    sc_out< sc_lv<4> > m_axi_W_ddr_WSTRB;
    sc_out< sc_logic > m_axi_W_ddr_WLAST;
    sc_out< sc_lv<1> > m_axi_W_ddr_WID;
    sc_out< sc_lv<1> > m_axi_W_ddr_WUSER;
    sc_out< sc_logic > m_axi_W_ddr_ARVALID;
    sc_in< sc_logic > m_axi_W_ddr_ARREADY;
    sc_out< sc_lv<32> > m_axi_W_ddr_ARADDR;
    sc_out< sc_lv<1> > m_axi_W_ddr_ARID;
    sc_out< sc_lv<32> > m_axi_W_ddr_ARLEN;
    sc_out< sc_lv<3> > m_axi_W_ddr_ARSIZE;
    sc_out< sc_lv<2> > m_axi_W_ddr_ARBURST;
    sc_out< sc_lv<2> > m_axi_W_ddr_ARLOCK;
    sc_out< sc_lv<4> > m_axi_W_ddr_ARCACHE;
    sc_out< sc_lv<3> > m_axi_W_ddr_ARPROT;
    sc_out< sc_lv<4> > m_axi_W_ddr_ARQOS;
    sc_out< sc_lv<4> > m_axi_W_ddr_ARREGION;
    sc_out< sc_lv<1> > m_axi_W_ddr_ARUSER;
    sc_in< sc_logic > m_axi_W_ddr_RVALID;
    sc_out< sc_logic > m_axi_W_ddr_RREADY;
    sc_in< sc_lv<32> > m_axi_W_ddr_RDATA;
    sc_in< sc_logic > m_axi_W_ddr_RLAST;
    sc_in< sc_lv<1> > m_axi_W_ddr_RID;
    sc_in< sc_lv<1> > m_axi_W_ddr_RUSER;
    sc_in< sc_lv<2> > m_axi_W_ddr_RRESP;
    sc_in< sc_logic > m_axi_W_ddr_BVALID;
    sc_out< sc_logic > m_axi_W_ddr_BREADY;
    sc_in< sc_lv<2> > m_axi_W_ddr_BRESP;
    sc_in< sc_lv<1> > m_axi_W_ddr_BID;
    sc_in< sc_lv<1> > m_axi_W_ddr_BUSER;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<1> > ap_var_for_const2;
    sc_signal< sc_lv<2> > ap_var_for_const1;


    // Module declarations
    Process_r(sc_module_name name);
    SC_HAS_PROCESS(Process_r);

    ~Process_r();

    sc_trace_file* mVcdFile;

    Load_W* grp_Load_W_fu_16;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > grp_Load_W_fu_16_ap_start;
    sc_signal< sc_logic > grp_Load_W_fu_16_ap_done;
    sc_signal< sc_logic > grp_Load_W_fu_16_ap_idle;
    sc_signal< sc_logic > grp_Load_W_fu_16_ap_ready;
    sc_signal< sc_logic > grp_Load_W_fu_16_m_axi_W_ddr_AWVALID;
    sc_signal< sc_lv<32> > grp_Load_W_fu_16_m_axi_W_ddr_AWADDR;
    sc_signal< sc_lv<1> > grp_Load_W_fu_16_m_axi_W_ddr_AWID;
    sc_signal< sc_lv<32> > grp_Load_W_fu_16_m_axi_W_ddr_AWLEN;
    sc_signal< sc_lv<3> > grp_Load_W_fu_16_m_axi_W_ddr_AWSIZE;
    sc_signal< sc_lv<2> > grp_Load_W_fu_16_m_axi_W_ddr_AWBURST;
    sc_signal< sc_lv<2> > grp_Load_W_fu_16_m_axi_W_ddr_AWLOCK;
    sc_signal< sc_lv<4> > grp_Load_W_fu_16_m_axi_W_ddr_AWCACHE;
    sc_signal< sc_lv<3> > grp_Load_W_fu_16_m_axi_W_ddr_AWPROT;
    sc_signal< sc_lv<4> > grp_Load_W_fu_16_m_axi_W_ddr_AWQOS;
    sc_signal< sc_lv<4> > grp_Load_W_fu_16_m_axi_W_ddr_AWREGION;
    sc_signal< sc_lv<1> > grp_Load_W_fu_16_m_axi_W_ddr_AWUSER;
    sc_signal< sc_logic > grp_Load_W_fu_16_m_axi_W_ddr_WVALID;
    sc_signal< sc_lv<32> > grp_Load_W_fu_16_m_axi_W_ddr_WDATA;
    sc_signal< sc_lv<4> > grp_Load_W_fu_16_m_axi_W_ddr_WSTRB;
    sc_signal< sc_logic > grp_Load_W_fu_16_m_axi_W_ddr_WLAST;
    sc_signal< sc_lv<1> > grp_Load_W_fu_16_m_axi_W_ddr_WID;
    sc_signal< sc_lv<1> > grp_Load_W_fu_16_m_axi_W_ddr_WUSER;
    sc_signal< sc_logic > grp_Load_W_fu_16_m_axi_W_ddr_ARVALID;
    sc_signal< sc_lv<32> > grp_Load_W_fu_16_m_axi_W_ddr_ARADDR;
    sc_signal< sc_lv<1> > grp_Load_W_fu_16_m_axi_W_ddr_ARID;
    sc_signal< sc_lv<32> > grp_Load_W_fu_16_m_axi_W_ddr_ARLEN;
    sc_signal< sc_lv<3> > grp_Load_W_fu_16_m_axi_W_ddr_ARSIZE;
    sc_signal< sc_lv<2> > grp_Load_W_fu_16_m_axi_W_ddr_ARBURST;
    sc_signal< sc_lv<2> > grp_Load_W_fu_16_m_axi_W_ddr_ARLOCK;
    sc_signal< sc_lv<4> > grp_Load_W_fu_16_m_axi_W_ddr_ARCACHE;
    sc_signal< sc_lv<3> > grp_Load_W_fu_16_m_axi_W_ddr_ARPROT;
    sc_signal< sc_lv<4> > grp_Load_W_fu_16_m_axi_W_ddr_ARQOS;
    sc_signal< sc_lv<4> > grp_Load_W_fu_16_m_axi_W_ddr_ARREGION;
    sc_signal< sc_lv<1> > grp_Load_W_fu_16_m_axi_W_ddr_ARUSER;
    sc_signal< sc_logic > grp_Load_W_fu_16_m_axi_W_ddr_RREADY;
    sc_signal< sc_logic > grp_Load_W_fu_16_m_axi_W_ddr_BREADY;
    sc_signal< sc_logic > grp_Load_W_fu_16_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_Load_W_fu_16_ap_start();
    void thread_m_axi_W_ddr_ARADDR();
    void thread_m_axi_W_ddr_ARBURST();
    void thread_m_axi_W_ddr_ARCACHE();
    void thread_m_axi_W_ddr_ARID();
    void thread_m_axi_W_ddr_ARLEN();
    void thread_m_axi_W_ddr_ARLOCK();
    void thread_m_axi_W_ddr_ARPROT();
    void thread_m_axi_W_ddr_ARQOS();
    void thread_m_axi_W_ddr_ARREGION();
    void thread_m_axi_W_ddr_ARSIZE();
    void thread_m_axi_W_ddr_ARUSER();
    void thread_m_axi_W_ddr_ARVALID();
    void thread_m_axi_W_ddr_AWADDR();
    void thread_m_axi_W_ddr_AWBURST();
    void thread_m_axi_W_ddr_AWCACHE();
    void thread_m_axi_W_ddr_AWID();
    void thread_m_axi_W_ddr_AWLEN();
    void thread_m_axi_W_ddr_AWLOCK();
    void thread_m_axi_W_ddr_AWPROT();
    void thread_m_axi_W_ddr_AWQOS();
    void thread_m_axi_W_ddr_AWREGION();
    void thread_m_axi_W_ddr_AWSIZE();
    void thread_m_axi_W_ddr_AWUSER();
    void thread_m_axi_W_ddr_AWVALID();
    void thread_m_axi_W_ddr_BREADY();
    void thread_m_axi_W_ddr_RREADY();
    void thread_m_axi_W_ddr_WDATA();
    void thread_m_axi_W_ddr_WID();
    void thread_m_axi_W_ddr_WLAST();
    void thread_m_axi_W_ddr_WSTRB();
    void thread_m_axi_W_ddr_WUSER();
    void thread_m_axi_W_ddr_WVALID();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
