// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Process_r.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Process_r::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Process_r::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> Process_r::ap_ST_fsm_state1 = "1";
const sc_lv<2> Process_r::ap_ST_fsm_state2 = "10";
const sc_lv<32> Process_r::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> Process_r::ap_const_lv1_0 = "0";
const sc_lv<3> Process_r::ap_const_lv3_0 = "000";
const sc_lv<2> Process_r::ap_const_lv2_0 = "00";
const sc_lv<4> Process_r::ap_const_lv4_0 = "0000";
const sc_lv<32> Process_r::ap_const_lv32_1 = "1";
const bool Process_r::ap_const_boolean_1 = true;

Process_r::Process_r(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_Load_W_fu_16 = new Load_W("grp_Load_W_fu_16");
    grp_Load_W_fu_16->ap_clk(ap_clk);
    grp_Load_W_fu_16->ap_rst(ap_rst);
    grp_Load_W_fu_16->ap_start(grp_Load_W_fu_16_ap_start);
    grp_Load_W_fu_16->ap_done(grp_Load_W_fu_16_ap_done);
    grp_Load_W_fu_16->ap_idle(grp_Load_W_fu_16_ap_idle);
    grp_Load_W_fu_16->ap_ready(grp_Load_W_fu_16_ap_ready);
    grp_Load_W_fu_16->m_axi_W_ddr_AWVALID(grp_Load_W_fu_16_m_axi_W_ddr_AWVALID);
    grp_Load_W_fu_16->m_axi_W_ddr_AWREADY(ap_var_for_const0);
    grp_Load_W_fu_16->m_axi_W_ddr_AWADDR(grp_Load_W_fu_16_m_axi_W_ddr_AWADDR);
    grp_Load_W_fu_16->m_axi_W_ddr_AWID(grp_Load_W_fu_16_m_axi_W_ddr_AWID);
    grp_Load_W_fu_16->m_axi_W_ddr_AWLEN(grp_Load_W_fu_16_m_axi_W_ddr_AWLEN);
    grp_Load_W_fu_16->m_axi_W_ddr_AWSIZE(grp_Load_W_fu_16_m_axi_W_ddr_AWSIZE);
    grp_Load_W_fu_16->m_axi_W_ddr_AWBURST(grp_Load_W_fu_16_m_axi_W_ddr_AWBURST);
    grp_Load_W_fu_16->m_axi_W_ddr_AWLOCK(grp_Load_W_fu_16_m_axi_W_ddr_AWLOCK);
    grp_Load_W_fu_16->m_axi_W_ddr_AWCACHE(grp_Load_W_fu_16_m_axi_W_ddr_AWCACHE);
    grp_Load_W_fu_16->m_axi_W_ddr_AWPROT(grp_Load_W_fu_16_m_axi_W_ddr_AWPROT);
    grp_Load_W_fu_16->m_axi_W_ddr_AWQOS(grp_Load_W_fu_16_m_axi_W_ddr_AWQOS);
    grp_Load_W_fu_16->m_axi_W_ddr_AWREGION(grp_Load_W_fu_16_m_axi_W_ddr_AWREGION);
    grp_Load_W_fu_16->m_axi_W_ddr_AWUSER(grp_Load_W_fu_16_m_axi_W_ddr_AWUSER);
    grp_Load_W_fu_16->m_axi_W_ddr_WVALID(grp_Load_W_fu_16_m_axi_W_ddr_WVALID);
    grp_Load_W_fu_16->m_axi_W_ddr_WREADY(ap_var_for_const0);
    grp_Load_W_fu_16->m_axi_W_ddr_WDATA(grp_Load_W_fu_16_m_axi_W_ddr_WDATA);
    grp_Load_W_fu_16->m_axi_W_ddr_WSTRB(grp_Load_W_fu_16_m_axi_W_ddr_WSTRB);
    grp_Load_W_fu_16->m_axi_W_ddr_WLAST(grp_Load_W_fu_16_m_axi_W_ddr_WLAST);
    grp_Load_W_fu_16->m_axi_W_ddr_WID(grp_Load_W_fu_16_m_axi_W_ddr_WID);
    grp_Load_W_fu_16->m_axi_W_ddr_WUSER(grp_Load_W_fu_16_m_axi_W_ddr_WUSER);
    grp_Load_W_fu_16->m_axi_W_ddr_ARVALID(grp_Load_W_fu_16_m_axi_W_ddr_ARVALID);
    grp_Load_W_fu_16->m_axi_W_ddr_ARREADY(m_axi_W_ddr_ARREADY);
    grp_Load_W_fu_16->m_axi_W_ddr_ARADDR(grp_Load_W_fu_16_m_axi_W_ddr_ARADDR);
    grp_Load_W_fu_16->m_axi_W_ddr_ARID(grp_Load_W_fu_16_m_axi_W_ddr_ARID);
    grp_Load_W_fu_16->m_axi_W_ddr_ARLEN(grp_Load_W_fu_16_m_axi_W_ddr_ARLEN);
    grp_Load_W_fu_16->m_axi_W_ddr_ARSIZE(grp_Load_W_fu_16_m_axi_W_ddr_ARSIZE);
    grp_Load_W_fu_16->m_axi_W_ddr_ARBURST(grp_Load_W_fu_16_m_axi_W_ddr_ARBURST);
    grp_Load_W_fu_16->m_axi_W_ddr_ARLOCK(grp_Load_W_fu_16_m_axi_W_ddr_ARLOCK);
    grp_Load_W_fu_16->m_axi_W_ddr_ARCACHE(grp_Load_W_fu_16_m_axi_W_ddr_ARCACHE);
    grp_Load_W_fu_16->m_axi_W_ddr_ARPROT(grp_Load_W_fu_16_m_axi_W_ddr_ARPROT);
    grp_Load_W_fu_16->m_axi_W_ddr_ARQOS(grp_Load_W_fu_16_m_axi_W_ddr_ARQOS);
    grp_Load_W_fu_16->m_axi_W_ddr_ARREGION(grp_Load_W_fu_16_m_axi_W_ddr_ARREGION);
    grp_Load_W_fu_16->m_axi_W_ddr_ARUSER(grp_Load_W_fu_16_m_axi_W_ddr_ARUSER);
    grp_Load_W_fu_16->m_axi_W_ddr_RVALID(m_axi_W_ddr_RVALID);
    grp_Load_W_fu_16->m_axi_W_ddr_RREADY(grp_Load_W_fu_16_m_axi_W_ddr_RREADY);
    grp_Load_W_fu_16->m_axi_W_ddr_RDATA(m_axi_W_ddr_RDATA);
    grp_Load_W_fu_16->m_axi_W_ddr_RLAST(m_axi_W_ddr_RLAST);
    grp_Load_W_fu_16->m_axi_W_ddr_RID(m_axi_W_ddr_RID);
    grp_Load_W_fu_16->m_axi_W_ddr_RUSER(m_axi_W_ddr_RUSER);
    grp_Load_W_fu_16->m_axi_W_ddr_RRESP(m_axi_W_ddr_RRESP);
    grp_Load_W_fu_16->m_axi_W_ddr_BVALID(ap_var_for_const0);
    grp_Load_W_fu_16->m_axi_W_ddr_BREADY(grp_Load_W_fu_16_m_axi_W_ddr_BREADY);
    grp_Load_W_fu_16->m_axi_W_ddr_BRESP(ap_var_for_const1);
    grp_Load_W_fu_16->m_axi_W_ddr_BID(ap_var_for_const2);
    grp_Load_W_fu_16->m_axi_W_ddr_BUSER(ap_var_for_const2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_Load_W_fu_16_ap_done );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_Load_W_fu_16_ap_done );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_grp_Load_W_fu_16_ap_start);
    sensitive << ( grp_Load_W_fu_16_ap_start_reg );

    SC_METHOD(thread_m_axi_W_ddr_ARADDR);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_Load_W_fu_16_m_axi_W_ddr_ARADDR );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m_axi_W_ddr_ARBURST);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_Load_W_fu_16_m_axi_W_ddr_ARBURST );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m_axi_W_ddr_ARCACHE);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_Load_W_fu_16_m_axi_W_ddr_ARCACHE );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m_axi_W_ddr_ARID);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_Load_W_fu_16_m_axi_W_ddr_ARID );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m_axi_W_ddr_ARLEN);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_Load_W_fu_16_m_axi_W_ddr_ARLEN );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m_axi_W_ddr_ARLOCK);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_Load_W_fu_16_m_axi_W_ddr_ARLOCK );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m_axi_W_ddr_ARPROT);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_Load_W_fu_16_m_axi_W_ddr_ARPROT );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m_axi_W_ddr_ARQOS);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_Load_W_fu_16_m_axi_W_ddr_ARQOS );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m_axi_W_ddr_ARREGION);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_Load_W_fu_16_m_axi_W_ddr_ARREGION );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m_axi_W_ddr_ARSIZE);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_Load_W_fu_16_m_axi_W_ddr_ARSIZE );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m_axi_W_ddr_ARUSER);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_Load_W_fu_16_m_axi_W_ddr_ARUSER );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m_axi_W_ddr_ARVALID);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_Load_W_fu_16_m_axi_W_ddr_ARVALID );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m_axi_W_ddr_AWADDR);

    SC_METHOD(thread_m_axi_W_ddr_AWBURST);

    SC_METHOD(thread_m_axi_W_ddr_AWCACHE);

    SC_METHOD(thread_m_axi_W_ddr_AWID);

    SC_METHOD(thread_m_axi_W_ddr_AWLEN);

    SC_METHOD(thread_m_axi_W_ddr_AWLOCK);

    SC_METHOD(thread_m_axi_W_ddr_AWPROT);

    SC_METHOD(thread_m_axi_W_ddr_AWQOS);

    SC_METHOD(thread_m_axi_W_ddr_AWREGION);

    SC_METHOD(thread_m_axi_W_ddr_AWSIZE);

    SC_METHOD(thread_m_axi_W_ddr_AWUSER);

    SC_METHOD(thread_m_axi_W_ddr_AWVALID);

    SC_METHOD(thread_m_axi_W_ddr_BREADY);

    SC_METHOD(thread_m_axi_W_ddr_RREADY);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_Load_W_fu_16_m_axi_W_ddr_RREADY );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m_axi_W_ddr_WDATA);

    SC_METHOD(thread_m_axi_W_ddr_WID);

    SC_METHOD(thread_m_axi_W_ddr_WLAST);

    SC_METHOD(thread_m_axi_W_ddr_WSTRB);

    SC_METHOD(thread_m_axi_W_ddr_WUSER);

    SC_METHOD(thread_m_axi_W_ddr_WVALID);

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_Load_W_fu_16_ap_done );
    sensitive << ( ap_CS_fsm_state2 );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "01";
    grp_Load_W_fu_16_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Process_r_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_W_ddr_AWVALID, "(port)m_axi_W_ddr_AWVALID");
    sc_trace(mVcdFile, m_axi_W_ddr_AWREADY, "(port)m_axi_W_ddr_AWREADY");
    sc_trace(mVcdFile, m_axi_W_ddr_AWADDR, "(port)m_axi_W_ddr_AWADDR");
    sc_trace(mVcdFile, m_axi_W_ddr_AWID, "(port)m_axi_W_ddr_AWID");
    sc_trace(mVcdFile, m_axi_W_ddr_AWLEN, "(port)m_axi_W_ddr_AWLEN");
    sc_trace(mVcdFile, m_axi_W_ddr_AWSIZE, "(port)m_axi_W_ddr_AWSIZE");
    sc_trace(mVcdFile, m_axi_W_ddr_AWBURST, "(port)m_axi_W_ddr_AWBURST");
    sc_trace(mVcdFile, m_axi_W_ddr_AWLOCK, "(port)m_axi_W_ddr_AWLOCK");
    sc_trace(mVcdFile, m_axi_W_ddr_AWCACHE, "(port)m_axi_W_ddr_AWCACHE");
    sc_trace(mVcdFile, m_axi_W_ddr_AWPROT, "(port)m_axi_W_ddr_AWPROT");
    sc_trace(mVcdFile, m_axi_W_ddr_AWQOS, "(port)m_axi_W_ddr_AWQOS");
    sc_trace(mVcdFile, m_axi_W_ddr_AWREGION, "(port)m_axi_W_ddr_AWREGION");
    sc_trace(mVcdFile, m_axi_W_ddr_AWUSER, "(port)m_axi_W_ddr_AWUSER");
    sc_trace(mVcdFile, m_axi_W_ddr_WVALID, "(port)m_axi_W_ddr_WVALID");
    sc_trace(mVcdFile, m_axi_W_ddr_WREADY, "(port)m_axi_W_ddr_WREADY");
    sc_trace(mVcdFile, m_axi_W_ddr_WDATA, "(port)m_axi_W_ddr_WDATA");
    sc_trace(mVcdFile, m_axi_W_ddr_WSTRB, "(port)m_axi_W_ddr_WSTRB");
    sc_trace(mVcdFile, m_axi_W_ddr_WLAST, "(port)m_axi_W_ddr_WLAST");
    sc_trace(mVcdFile, m_axi_W_ddr_WID, "(port)m_axi_W_ddr_WID");
    sc_trace(mVcdFile, m_axi_W_ddr_WUSER, "(port)m_axi_W_ddr_WUSER");
    sc_trace(mVcdFile, m_axi_W_ddr_ARVALID, "(port)m_axi_W_ddr_ARVALID");
    sc_trace(mVcdFile, m_axi_W_ddr_ARREADY, "(port)m_axi_W_ddr_ARREADY");
    sc_trace(mVcdFile, m_axi_W_ddr_ARADDR, "(port)m_axi_W_ddr_ARADDR");
    sc_trace(mVcdFile, m_axi_W_ddr_ARID, "(port)m_axi_W_ddr_ARID");
    sc_trace(mVcdFile, m_axi_W_ddr_ARLEN, "(port)m_axi_W_ddr_ARLEN");
    sc_trace(mVcdFile, m_axi_W_ddr_ARSIZE, "(port)m_axi_W_ddr_ARSIZE");
    sc_trace(mVcdFile, m_axi_W_ddr_ARBURST, "(port)m_axi_W_ddr_ARBURST");
    sc_trace(mVcdFile, m_axi_W_ddr_ARLOCK, "(port)m_axi_W_ddr_ARLOCK");
    sc_trace(mVcdFile, m_axi_W_ddr_ARCACHE, "(port)m_axi_W_ddr_ARCACHE");
    sc_trace(mVcdFile, m_axi_W_ddr_ARPROT, "(port)m_axi_W_ddr_ARPROT");
    sc_trace(mVcdFile, m_axi_W_ddr_ARQOS, "(port)m_axi_W_ddr_ARQOS");
    sc_trace(mVcdFile, m_axi_W_ddr_ARREGION, "(port)m_axi_W_ddr_ARREGION");
    sc_trace(mVcdFile, m_axi_W_ddr_ARUSER, "(port)m_axi_W_ddr_ARUSER");
    sc_trace(mVcdFile, m_axi_W_ddr_RVALID, "(port)m_axi_W_ddr_RVALID");
    sc_trace(mVcdFile, m_axi_W_ddr_RREADY, "(port)m_axi_W_ddr_RREADY");
    sc_trace(mVcdFile, m_axi_W_ddr_RDATA, "(port)m_axi_W_ddr_RDATA");
    sc_trace(mVcdFile, m_axi_W_ddr_RLAST, "(port)m_axi_W_ddr_RLAST");
    sc_trace(mVcdFile, m_axi_W_ddr_RID, "(port)m_axi_W_ddr_RID");
    sc_trace(mVcdFile, m_axi_W_ddr_RUSER, "(port)m_axi_W_ddr_RUSER");
    sc_trace(mVcdFile, m_axi_W_ddr_RRESP, "(port)m_axi_W_ddr_RRESP");
    sc_trace(mVcdFile, m_axi_W_ddr_BVALID, "(port)m_axi_W_ddr_BVALID");
    sc_trace(mVcdFile, m_axi_W_ddr_BREADY, "(port)m_axi_W_ddr_BREADY");
    sc_trace(mVcdFile, m_axi_W_ddr_BRESP, "(port)m_axi_W_ddr_BRESP");
    sc_trace(mVcdFile, m_axi_W_ddr_BID, "(port)m_axi_W_ddr_BID");
    sc_trace(mVcdFile, m_axi_W_ddr_BUSER, "(port)m_axi_W_ddr_BUSER");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_Load_W_fu_16_ap_start, "grp_Load_W_fu_16_ap_start");
    sc_trace(mVcdFile, grp_Load_W_fu_16_ap_done, "grp_Load_W_fu_16_ap_done");
    sc_trace(mVcdFile, grp_Load_W_fu_16_ap_idle, "grp_Load_W_fu_16_ap_idle");
    sc_trace(mVcdFile, grp_Load_W_fu_16_ap_ready, "grp_Load_W_fu_16_ap_ready");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_AWVALID, "grp_Load_W_fu_16_m_axi_W_ddr_AWVALID");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_AWADDR, "grp_Load_W_fu_16_m_axi_W_ddr_AWADDR");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_AWID, "grp_Load_W_fu_16_m_axi_W_ddr_AWID");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_AWLEN, "grp_Load_W_fu_16_m_axi_W_ddr_AWLEN");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_AWSIZE, "grp_Load_W_fu_16_m_axi_W_ddr_AWSIZE");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_AWBURST, "grp_Load_W_fu_16_m_axi_W_ddr_AWBURST");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_AWLOCK, "grp_Load_W_fu_16_m_axi_W_ddr_AWLOCK");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_AWCACHE, "grp_Load_W_fu_16_m_axi_W_ddr_AWCACHE");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_AWPROT, "grp_Load_W_fu_16_m_axi_W_ddr_AWPROT");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_AWQOS, "grp_Load_W_fu_16_m_axi_W_ddr_AWQOS");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_AWREGION, "grp_Load_W_fu_16_m_axi_W_ddr_AWREGION");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_AWUSER, "grp_Load_W_fu_16_m_axi_W_ddr_AWUSER");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_WVALID, "grp_Load_W_fu_16_m_axi_W_ddr_WVALID");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_WDATA, "grp_Load_W_fu_16_m_axi_W_ddr_WDATA");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_WSTRB, "grp_Load_W_fu_16_m_axi_W_ddr_WSTRB");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_WLAST, "grp_Load_W_fu_16_m_axi_W_ddr_WLAST");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_WID, "grp_Load_W_fu_16_m_axi_W_ddr_WID");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_WUSER, "grp_Load_W_fu_16_m_axi_W_ddr_WUSER");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_ARVALID, "grp_Load_W_fu_16_m_axi_W_ddr_ARVALID");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_ARADDR, "grp_Load_W_fu_16_m_axi_W_ddr_ARADDR");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_ARID, "grp_Load_W_fu_16_m_axi_W_ddr_ARID");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_ARLEN, "grp_Load_W_fu_16_m_axi_W_ddr_ARLEN");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_ARSIZE, "grp_Load_W_fu_16_m_axi_W_ddr_ARSIZE");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_ARBURST, "grp_Load_W_fu_16_m_axi_W_ddr_ARBURST");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_ARLOCK, "grp_Load_W_fu_16_m_axi_W_ddr_ARLOCK");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_ARCACHE, "grp_Load_W_fu_16_m_axi_W_ddr_ARCACHE");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_ARPROT, "grp_Load_W_fu_16_m_axi_W_ddr_ARPROT");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_ARQOS, "grp_Load_W_fu_16_m_axi_W_ddr_ARQOS");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_ARREGION, "grp_Load_W_fu_16_m_axi_W_ddr_ARREGION");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_ARUSER, "grp_Load_W_fu_16_m_axi_W_ddr_ARUSER");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_RREADY, "grp_Load_W_fu_16_m_axi_W_ddr_RREADY");
    sc_trace(mVcdFile, grp_Load_W_fu_16_m_axi_W_ddr_BREADY, "grp_Load_W_fu_16_m_axi_W_ddr_BREADY");
    sc_trace(mVcdFile, grp_Load_W_fu_16_ap_start_reg, "grp_Load_W_fu_16_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Process_r::~Process_r() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_Load_W_fu_16;
}

void Process_r::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_0;
}

void Process_r::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv1_0;
}

void Process_r::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv2_0;
}

void Process_r::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_Load_W_fu_16_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            grp_Load_W_fu_16_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_Load_W_fu_16_ap_ready.read())) {
            grp_Load_W_fu_16_ap_start_reg = ap_const_logic_0;
        }
    }
}

void Process_r::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Process_r::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Process_r::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(grp_Load_W_fu_16_ap_done.read(), ap_const_logic_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Process_r::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Process_r::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(grp_Load_W_fu_16_ap_done.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Process_r::thread_grp_Load_W_fu_16_ap_start() {
    grp_Load_W_fu_16_ap_start = grp_Load_W_fu_16_ap_start_reg.read();
}

void Process_r::thread_m_axi_W_ddr_ARADDR() {
    m_axi_W_ddr_ARADDR = grp_Load_W_fu_16_m_axi_W_ddr_ARADDR.read();
}

void Process_r::thread_m_axi_W_ddr_ARBURST() {
    m_axi_W_ddr_ARBURST = grp_Load_W_fu_16_m_axi_W_ddr_ARBURST.read();
}

void Process_r::thread_m_axi_W_ddr_ARCACHE() {
    m_axi_W_ddr_ARCACHE = grp_Load_W_fu_16_m_axi_W_ddr_ARCACHE.read();
}

void Process_r::thread_m_axi_W_ddr_ARID() {
    m_axi_W_ddr_ARID = grp_Load_W_fu_16_m_axi_W_ddr_ARID.read();
}

void Process_r::thread_m_axi_W_ddr_ARLEN() {
    m_axi_W_ddr_ARLEN = grp_Load_W_fu_16_m_axi_W_ddr_ARLEN.read();
}

void Process_r::thread_m_axi_W_ddr_ARLOCK() {
    m_axi_W_ddr_ARLOCK = grp_Load_W_fu_16_m_axi_W_ddr_ARLOCK.read();
}

void Process_r::thread_m_axi_W_ddr_ARPROT() {
    m_axi_W_ddr_ARPROT = grp_Load_W_fu_16_m_axi_W_ddr_ARPROT.read();
}

void Process_r::thread_m_axi_W_ddr_ARQOS() {
    m_axi_W_ddr_ARQOS = grp_Load_W_fu_16_m_axi_W_ddr_ARQOS.read();
}

void Process_r::thread_m_axi_W_ddr_ARREGION() {
    m_axi_W_ddr_ARREGION = grp_Load_W_fu_16_m_axi_W_ddr_ARREGION.read();
}

void Process_r::thread_m_axi_W_ddr_ARSIZE() {
    m_axi_W_ddr_ARSIZE = grp_Load_W_fu_16_m_axi_W_ddr_ARSIZE.read();
}

void Process_r::thread_m_axi_W_ddr_ARUSER() {
    m_axi_W_ddr_ARUSER = grp_Load_W_fu_16_m_axi_W_ddr_ARUSER.read();
}

void Process_r::thread_m_axi_W_ddr_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        m_axi_W_ddr_ARVALID = grp_Load_W_fu_16_m_axi_W_ddr_ARVALID.read();
    } else {
        m_axi_W_ddr_ARVALID = ap_const_logic_0;
    }
}

void Process_r::thread_m_axi_W_ddr_AWADDR() {
    m_axi_W_ddr_AWADDR = ap_const_lv32_0;
}

void Process_r::thread_m_axi_W_ddr_AWBURST() {
    m_axi_W_ddr_AWBURST = ap_const_lv2_0;
}

void Process_r::thread_m_axi_W_ddr_AWCACHE() {
    m_axi_W_ddr_AWCACHE = ap_const_lv4_0;
}

void Process_r::thread_m_axi_W_ddr_AWID() {
    m_axi_W_ddr_AWID = ap_const_lv1_0;
}

void Process_r::thread_m_axi_W_ddr_AWLEN() {
    m_axi_W_ddr_AWLEN = ap_const_lv32_0;
}

void Process_r::thread_m_axi_W_ddr_AWLOCK() {
    m_axi_W_ddr_AWLOCK = ap_const_lv2_0;
}

void Process_r::thread_m_axi_W_ddr_AWPROT() {
    m_axi_W_ddr_AWPROT = ap_const_lv3_0;
}

void Process_r::thread_m_axi_W_ddr_AWQOS() {
    m_axi_W_ddr_AWQOS = ap_const_lv4_0;
}

void Process_r::thread_m_axi_W_ddr_AWREGION() {
    m_axi_W_ddr_AWREGION = ap_const_lv4_0;
}

void Process_r::thread_m_axi_W_ddr_AWSIZE() {
    m_axi_W_ddr_AWSIZE = ap_const_lv3_0;
}

void Process_r::thread_m_axi_W_ddr_AWUSER() {
    m_axi_W_ddr_AWUSER = ap_const_lv1_0;
}

void Process_r::thread_m_axi_W_ddr_AWVALID() {
    m_axi_W_ddr_AWVALID = ap_const_logic_0;
}

void Process_r::thread_m_axi_W_ddr_BREADY() {
    m_axi_W_ddr_BREADY = ap_const_logic_0;
}

void Process_r::thread_m_axi_W_ddr_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        m_axi_W_ddr_RREADY = grp_Load_W_fu_16_m_axi_W_ddr_RREADY.read();
    } else {
        m_axi_W_ddr_RREADY = ap_const_logic_0;
    }
}

void Process_r::thread_m_axi_W_ddr_WDATA() {
    m_axi_W_ddr_WDATA = ap_const_lv32_0;
}

void Process_r::thread_m_axi_W_ddr_WID() {
    m_axi_W_ddr_WID = ap_const_lv1_0;
}

void Process_r::thread_m_axi_W_ddr_WLAST() {
    m_axi_W_ddr_WLAST = ap_const_logic_0;
}

void Process_r::thread_m_axi_W_ddr_WSTRB() {
    m_axi_W_ddr_WSTRB = ap_const_lv4_0;
}

void Process_r::thread_m_axi_W_ddr_WUSER() {
    m_axi_W_ddr_WUSER = ap_const_lv1_0;
}

void Process_r::thread_m_axi_W_ddr_WVALID() {
    m_axi_W_ddr_WVALID = ap_const_logic_0;
}

void Process_r::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_Load_W_fu_16_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

