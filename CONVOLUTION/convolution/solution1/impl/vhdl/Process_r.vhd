-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Process_r is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_W_ddr_AWVALID : OUT STD_LOGIC;
    m_axi_W_ddr_AWREADY : IN STD_LOGIC;
    m_axi_W_ddr_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_W_ddr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W_ddr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_W_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W_ddr_WVALID : OUT STD_LOGIC;
    m_axi_W_ddr_WREADY : IN STD_LOGIC;
    m_axi_W_ddr_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_W_ddr_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_WLAST : OUT STD_LOGIC;
    m_axi_W_ddr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W_ddr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W_ddr_ARVALID : OUT STD_LOGIC;
    m_axi_W_ddr_ARREADY : IN STD_LOGIC;
    m_axi_W_ddr_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_W_ddr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W_ddr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_W_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ddr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W_ddr_RVALID : IN STD_LOGIC;
    m_axi_W_ddr_RREADY : OUT STD_LOGIC;
    m_axi_W_ddr_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_W_ddr_RLAST : IN STD_LOGIC;
    m_axi_W_ddr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W_ddr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ddr_BVALID : IN STD_LOGIC;
    m_axi_W_ddr_BREADY : OUT STD_LOGIC;
    m_axi_W_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ddr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_W_ddr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of Process_r is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_Load_W_fu_16_ap_start : STD_LOGIC;
    signal grp_Load_W_fu_16_ap_done : STD_LOGIC;
    signal grp_Load_W_fu_16_ap_idle : STD_LOGIC;
    signal grp_Load_W_fu_16_ap_ready : STD_LOGIC;
    signal grp_Load_W_fu_16_m_axi_W_ddr_AWVALID : STD_LOGIC;
    signal grp_Load_W_fu_16_m_axi_W_ddr_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Load_W_fu_16_m_axi_W_ddr_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_W_fu_16_m_axi_W_ddr_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Load_W_fu_16_m_axi_W_ddr_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_W_fu_16_m_axi_W_ddr_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_W_fu_16_m_axi_W_ddr_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_W_fu_16_m_axi_W_ddr_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_W_fu_16_m_axi_W_ddr_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_W_fu_16_m_axi_W_ddr_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_W_fu_16_m_axi_W_ddr_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_W_fu_16_m_axi_W_ddr_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_W_fu_16_m_axi_W_ddr_WVALID : STD_LOGIC;
    signal grp_Load_W_fu_16_m_axi_W_ddr_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Load_W_fu_16_m_axi_W_ddr_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_W_fu_16_m_axi_W_ddr_WLAST : STD_LOGIC;
    signal grp_Load_W_fu_16_m_axi_W_ddr_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_W_fu_16_m_axi_W_ddr_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_W_fu_16_m_axi_W_ddr_ARVALID : STD_LOGIC;
    signal grp_Load_W_fu_16_m_axi_W_ddr_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Load_W_fu_16_m_axi_W_ddr_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_W_fu_16_m_axi_W_ddr_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Load_W_fu_16_m_axi_W_ddr_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_W_fu_16_m_axi_W_ddr_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_W_fu_16_m_axi_W_ddr_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Load_W_fu_16_m_axi_W_ddr_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_W_fu_16_m_axi_W_ddr_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Load_W_fu_16_m_axi_W_ddr_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_W_fu_16_m_axi_W_ddr_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Load_W_fu_16_m_axi_W_ddr_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Load_W_fu_16_m_axi_W_ddr_RREADY : STD_LOGIC;
    signal grp_Load_W_fu_16_m_axi_W_ddr_BREADY : STD_LOGIC;
    signal grp_Load_W_fu_16_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component Load_W IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_W_ddr_AWVALID : OUT STD_LOGIC;
        m_axi_W_ddr_AWREADY : IN STD_LOGIC;
        m_axi_W_ddr_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W_ddr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W_ddr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_WVALID : OUT STD_LOGIC;
        m_axi_W_ddr_WREADY : IN STD_LOGIC;
        m_axi_W_ddr_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W_ddr_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W_ddr_WLAST : OUT STD_LOGIC;
        m_axi_W_ddr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_ARVALID : OUT STD_LOGIC;
        m_axi_W_ddr_ARREADY : IN STD_LOGIC;
        m_axi_W_ddr_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W_ddr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W_ddr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_RVALID : IN STD_LOGIC;
        m_axi_W_ddr_RREADY : OUT STD_LOGIC;
        m_axi_W_ddr_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W_ddr_RLAST : IN STD_LOGIC;
        m_axi_W_ddr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W_ddr_BVALID : IN STD_LOGIC;
        m_axi_W_ddr_BREADY : OUT STD_LOGIC;
        m_axi_W_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W_ddr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    grp_Load_W_fu_16 : component Load_W
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Load_W_fu_16_ap_start,
        ap_done => grp_Load_W_fu_16_ap_done,
        ap_idle => grp_Load_W_fu_16_ap_idle,
        ap_ready => grp_Load_W_fu_16_ap_ready,
        m_axi_W_ddr_AWVALID => grp_Load_W_fu_16_m_axi_W_ddr_AWVALID,
        m_axi_W_ddr_AWREADY => ap_const_logic_0,
        m_axi_W_ddr_AWADDR => grp_Load_W_fu_16_m_axi_W_ddr_AWADDR,
        m_axi_W_ddr_AWID => grp_Load_W_fu_16_m_axi_W_ddr_AWID,
        m_axi_W_ddr_AWLEN => grp_Load_W_fu_16_m_axi_W_ddr_AWLEN,
        m_axi_W_ddr_AWSIZE => grp_Load_W_fu_16_m_axi_W_ddr_AWSIZE,
        m_axi_W_ddr_AWBURST => grp_Load_W_fu_16_m_axi_W_ddr_AWBURST,
        m_axi_W_ddr_AWLOCK => grp_Load_W_fu_16_m_axi_W_ddr_AWLOCK,
        m_axi_W_ddr_AWCACHE => grp_Load_W_fu_16_m_axi_W_ddr_AWCACHE,
        m_axi_W_ddr_AWPROT => grp_Load_W_fu_16_m_axi_W_ddr_AWPROT,
        m_axi_W_ddr_AWQOS => grp_Load_W_fu_16_m_axi_W_ddr_AWQOS,
        m_axi_W_ddr_AWREGION => grp_Load_W_fu_16_m_axi_W_ddr_AWREGION,
        m_axi_W_ddr_AWUSER => grp_Load_W_fu_16_m_axi_W_ddr_AWUSER,
        m_axi_W_ddr_WVALID => grp_Load_W_fu_16_m_axi_W_ddr_WVALID,
        m_axi_W_ddr_WREADY => ap_const_logic_0,
        m_axi_W_ddr_WDATA => grp_Load_W_fu_16_m_axi_W_ddr_WDATA,
        m_axi_W_ddr_WSTRB => grp_Load_W_fu_16_m_axi_W_ddr_WSTRB,
        m_axi_W_ddr_WLAST => grp_Load_W_fu_16_m_axi_W_ddr_WLAST,
        m_axi_W_ddr_WID => grp_Load_W_fu_16_m_axi_W_ddr_WID,
        m_axi_W_ddr_WUSER => grp_Load_W_fu_16_m_axi_W_ddr_WUSER,
        m_axi_W_ddr_ARVALID => grp_Load_W_fu_16_m_axi_W_ddr_ARVALID,
        m_axi_W_ddr_ARREADY => m_axi_W_ddr_ARREADY,
        m_axi_W_ddr_ARADDR => grp_Load_W_fu_16_m_axi_W_ddr_ARADDR,
        m_axi_W_ddr_ARID => grp_Load_W_fu_16_m_axi_W_ddr_ARID,
        m_axi_W_ddr_ARLEN => grp_Load_W_fu_16_m_axi_W_ddr_ARLEN,
        m_axi_W_ddr_ARSIZE => grp_Load_W_fu_16_m_axi_W_ddr_ARSIZE,
        m_axi_W_ddr_ARBURST => grp_Load_W_fu_16_m_axi_W_ddr_ARBURST,
        m_axi_W_ddr_ARLOCK => grp_Load_W_fu_16_m_axi_W_ddr_ARLOCK,
        m_axi_W_ddr_ARCACHE => grp_Load_W_fu_16_m_axi_W_ddr_ARCACHE,
        m_axi_W_ddr_ARPROT => grp_Load_W_fu_16_m_axi_W_ddr_ARPROT,
        m_axi_W_ddr_ARQOS => grp_Load_W_fu_16_m_axi_W_ddr_ARQOS,
        m_axi_W_ddr_ARREGION => grp_Load_W_fu_16_m_axi_W_ddr_ARREGION,
        m_axi_W_ddr_ARUSER => grp_Load_W_fu_16_m_axi_W_ddr_ARUSER,
        m_axi_W_ddr_RVALID => m_axi_W_ddr_RVALID,
        m_axi_W_ddr_RREADY => grp_Load_W_fu_16_m_axi_W_ddr_RREADY,
        m_axi_W_ddr_RDATA => m_axi_W_ddr_RDATA,
        m_axi_W_ddr_RLAST => m_axi_W_ddr_RLAST,
        m_axi_W_ddr_RID => m_axi_W_ddr_RID,
        m_axi_W_ddr_RUSER => m_axi_W_ddr_RUSER,
        m_axi_W_ddr_RRESP => m_axi_W_ddr_RRESP,
        m_axi_W_ddr_BVALID => ap_const_logic_0,
        m_axi_W_ddr_BREADY => grp_Load_W_fu_16_m_axi_W_ddr_BREADY,
        m_axi_W_ddr_BRESP => ap_const_lv2_0,
        m_axi_W_ddr_BID => ap_const_lv1_0,
        m_axi_W_ddr_BUSER => ap_const_lv1_0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Load_W_fu_16_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Load_W_fu_16_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_Load_W_fu_16_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Load_W_fu_16_ap_ready = ap_const_logic_1)) then 
                    grp_Load_W_fu_16_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_Load_W_fu_16_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_Load_W_fu_16_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_Load_W_fu_16_ap_done, ap_CS_fsm_state2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((grp_Load_W_fu_16_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_Load_W_fu_16_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_Load_W_fu_16_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_Load_W_fu_16_ap_start <= grp_Load_W_fu_16_ap_start_reg;
    m_axi_W_ddr_ARADDR <= grp_Load_W_fu_16_m_axi_W_ddr_ARADDR;
    m_axi_W_ddr_ARBURST <= grp_Load_W_fu_16_m_axi_W_ddr_ARBURST;
    m_axi_W_ddr_ARCACHE <= grp_Load_W_fu_16_m_axi_W_ddr_ARCACHE;
    m_axi_W_ddr_ARID <= grp_Load_W_fu_16_m_axi_W_ddr_ARID;
    m_axi_W_ddr_ARLEN <= grp_Load_W_fu_16_m_axi_W_ddr_ARLEN;
    m_axi_W_ddr_ARLOCK <= grp_Load_W_fu_16_m_axi_W_ddr_ARLOCK;
    m_axi_W_ddr_ARPROT <= grp_Load_W_fu_16_m_axi_W_ddr_ARPROT;
    m_axi_W_ddr_ARQOS <= grp_Load_W_fu_16_m_axi_W_ddr_ARQOS;
    m_axi_W_ddr_ARREGION <= grp_Load_W_fu_16_m_axi_W_ddr_ARREGION;
    m_axi_W_ddr_ARSIZE <= grp_Load_W_fu_16_m_axi_W_ddr_ARSIZE;
    m_axi_W_ddr_ARUSER <= grp_Load_W_fu_16_m_axi_W_ddr_ARUSER;

    m_axi_W_ddr_ARVALID_assign_proc : process(ap_CS_fsm_state1, grp_Load_W_fu_16_m_axi_W_ddr_ARVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_W_ddr_ARVALID <= grp_Load_W_fu_16_m_axi_W_ddr_ARVALID;
        else 
            m_axi_W_ddr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_W_ddr_AWADDR <= ap_const_lv32_0;
    m_axi_W_ddr_AWBURST <= ap_const_lv2_0;
    m_axi_W_ddr_AWCACHE <= ap_const_lv4_0;
    m_axi_W_ddr_AWID <= ap_const_lv1_0;
    m_axi_W_ddr_AWLEN <= ap_const_lv32_0;
    m_axi_W_ddr_AWLOCK <= ap_const_lv2_0;
    m_axi_W_ddr_AWPROT <= ap_const_lv3_0;
    m_axi_W_ddr_AWQOS <= ap_const_lv4_0;
    m_axi_W_ddr_AWREGION <= ap_const_lv4_0;
    m_axi_W_ddr_AWSIZE <= ap_const_lv3_0;
    m_axi_W_ddr_AWUSER <= ap_const_lv1_0;
    m_axi_W_ddr_AWVALID <= ap_const_logic_0;
    m_axi_W_ddr_BREADY <= ap_const_logic_0;

    m_axi_W_ddr_RREADY_assign_proc : process(ap_CS_fsm_state1, grp_Load_W_fu_16_m_axi_W_ddr_RREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_W_ddr_RREADY <= grp_Load_W_fu_16_m_axi_W_ddr_RREADY;
        else 
            m_axi_W_ddr_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_W_ddr_WDATA <= ap_const_lv32_0;
    m_axi_W_ddr_WID <= ap_const_lv1_0;
    m_axi_W_ddr_WLAST <= ap_const_logic_0;
    m_axi_W_ddr_WSTRB <= ap_const_lv4_0;
    m_axi_W_ddr_WUSER <= ap_const_lv1_0;
    m_axi_W_ddr_WVALID <= ap_const_logic_0;
end behav;
